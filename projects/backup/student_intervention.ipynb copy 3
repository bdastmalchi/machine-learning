{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Machine Learning Engineer Nanodegree\n",
    "## Supervised Learning\n",
    "## Project 2: Building a Student Intervention System"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Welcome to the second project of the Machine Learning Engineer Nanodegree! In this notebook, some template code has already been provided for you, and it will be your job to implement the additional functionality necessary to successfully complete this project. Sections that begin with **'Implementation'** in the header indicate that the following block of code will require additional functionality which you must provide. Instructions will be provided for each section and the specifics of the implementation are marked in the code block with a `'TODO'` statement. Please be sure to read the instructions carefully!\n",
    "\n",
    "In addition to implementing code, there will be questions that you must answer which relate to the project and your implementation. Each section where you will answer a question is preceded by a **'Question X'** header. Carefully read each question and provide thorough answers in the following text boxes that begin with **'Answer:'**. Your project submission will be evaluated based on your answers to each of the questions and the implementation you provide.  \n",
    "\n",
    ">**Note:** Code and Markdown cells can be executed using the **Shift + Enter** keyboard shortcut. In addition, Markdown cells can be edited by typically double-clicking the cell to enter edit mode."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Question 1 - Classification vs. Regression\n",
    "*Your goal for this project is to identify students who might need early intervention before they fail to graduate. Which type of supervised learning problem is this, classification or regression? Why?*"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Answer: **\n",
    "\n",
    "Based on the historical data, we would like to categorize the students into two groups: \n",
    "\n",
    "1- The ones who are likely to pass\n",
    "\n",
    "2- The ones who are likely to fail, hence, would need early intervension. \n",
    "\n",
    "Therefore, we are dealing with a classification problem with a binary outcome."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Exploring the Data\n",
    "Run the code cell below to load necessary Python libraries and load the student data. Note that the last column from this dataset, `'passed'`, will be our target label (whether the student graduated or didn't graduate). All other columns are features about each student."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Student data read successfully!\n"
     ]
    }
   ],
   "source": [
    "# Import libraries\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "from time import time\n",
    "from sklearn.metrics import f1_score\n",
    "\n",
    "# Read student data\n",
    "student_data = pd.read_csv(\"student-data.csv\")\n",
    "print \"Student data read successfully!\""
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Implementation: Data Exploration\n",
    "Let's begin by investigating the dataset to determine how many students we have information on, and learn about the graduation rate among these students. In the code cell below, you will need to compute the following:\n",
    "- The total number of students, `n_students`.\n",
    "- The total number of features for each student, `n_features`.\n",
    "- The number of those students who passed, `n_passed`.\n",
    "- The number of those students who failed, `n_failed`.\n",
    "- The graduation rate of the class, `grad_rate`, in percent (%).\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Total number of students: 395\n",
      "Number of features: 31\n",
      "Number of students who passed: 265\n",
      "Number of students who failed: 130\n",
      "Graduation rate of the class: 0.67%\n"
     ]
    }
   ],
   "source": [
    "# TODO: Calculate number of students\n",
    "n_students = student_data.shape[0]\n",
    "\n",
    "# TODO: Calculate number of features\n",
    "n_features = student_data.shape[1]\n",
    "\n",
    "# TODO: Calculate passing students\n",
    "n_passed = sum(student_data.passed == 'yes')\n",
    "\n",
    "# TODO: Calculate failing students\n",
    "n_failed = sum(student_data.passed == 'no')\n",
    "\n",
    "# TODO: Calculate graduation rate\n",
    "grad_rate = float(n_passed) / n_students\n",
    "\n",
    "# Print the results\n",
    "print \"Total number of students: {}\".format(n_students)\n",
    "print \"Number of features: {}\".format(n_features)\n",
    "print \"Number of students who passed: {}\".format(n_passed)\n",
    "print \"Number of students who failed: {}\".format(n_failed)\n",
    "print \"Graduation rate of the class: {:.2f}%\".format(grad_rate)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Preparing the Data\n",
    "In this section, we will prepare the data for modeling, training and testing.\n",
    "\n",
    "### Identify feature and target columns\n",
    "It is often the case that the data you obtain contains non-numeric features. This can be a problem, as most machine learning algorithms expect numeric data to perform computations with.\n",
    "\n",
    "Run the code cell below to separate the student data into feature and target columns to see if any features are non-numeric."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Feature columns:\n",
      "['school', 'sex', 'age', 'address', 'famsize', 'Pstatus', 'Medu', 'Fedu', 'Mjob', 'Fjob', 'reason', 'guardian', 'traveltime', 'studytime', 'failures', 'schoolsup', 'famsup', 'paid', 'activities', 'nursery', 'higher', 'internet', 'romantic', 'famrel', 'freetime', 'goout', 'Dalc', 'Walc', 'health', 'absences']\n",
      "\n",
      "Target column: passed\n",
      "\n",
      "Feature values:\n",
      "  school sex  age address famsize Pstatus  Medu  Fedu     Mjob      Fjob  \\\n",
      "0     GP   F   18       U     GT3       A     4     4  at_home   teacher   \n",
      "1     GP   F   17       U     GT3       T     1     1  at_home     other   \n",
      "2     GP   F   15       U     LE3       T     1     1  at_home     other   \n",
      "3     GP   F   15       U     GT3       T     4     2   health  services   \n",
      "4     GP   F   16       U     GT3       T     3     3    other     other   \n",
      "\n",
      "    ...    higher internet  romantic  famrel  freetime goout Dalc Walc health  \\\n",
      "0   ...       yes       no        no       4         3     4    1    1      3   \n",
      "1   ...       yes      yes        no       5         3     3    1    1      3   \n",
      "2   ...       yes      yes        no       4         3     2    2    3      3   \n",
      "3   ...       yes      yes       yes       3         2     2    1    1      5   \n",
      "4   ...       yes       no        no       4         3     2    1    2      5   \n",
      "\n",
      "  absences  \n",
      "0        6  \n",
      "1        4  \n",
      "2       10  \n",
      "3        2  \n",
      "4        4  \n",
      "\n",
      "[5 rows x 30 columns]\n"
     ]
    }
   ],
   "source": [
    "# Extract feature columns\n",
    "feature_cols = list(student_data.columns[:-1])\n",
    "\n",
    "# Extract target column 'passed'\n",
    "target_col = student_data.columns[-1] \n",
    "\n",
    "# Show the list of columns\n",
    "print \"Feature columns:\\n{}\".format(feature_cols)\n",
    "print \"\\nTarget column: {}\".format(target_col)\n",
    "\n",
    "# Separate the data into feature data and target data (X_all and y_all, respectively)\n",
    "X_all = student_data[feature_cols]\n",
    "y_all = student_data[target_col]\n",
    "\n",
    "# Show the feature information by printing the first five rows\n",
    "print \"\\nFeature values:\"\n",
    "print X_all.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Preprocess Feature Columns\n",
    "\n",
    "As you can see, there are several non-numeric columns that need to be converted! Many of them are simply `yes`/`no`, e.g. `internet`. These can be reasonably converted into `1`/`0` (binary) values.\n",
    "\n",
    "Other columns, like `Mjob` and `Fjob`, have more than two values, and are known as _categorical variables_. The recommended way to handle such a column is to create as many columns as possible values (e.g. `Fjob_teacher`, `Fjob_other`, `Fjob_services`, etc.), and assign a `1` to one of them and `0` to all others.\n",
    "\n",
    "These generated columns are sometimes called _dummy variables_, and we will use the [`pandas.get_dummies()`](http://pandas.pydata.org/pandas-docs/stable/generated/pandas.get_dummies.html?highlight=get_dummies#pandas.get_dummies) function to perform this transformation. Run the code cell below to perform the preprocessing routine discussed in this section."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Processed feature columns (48 total features):\n",
      "['school_GP', 'school_MS', 'sex_F', 'sex_M', 'age', 'address_R', 'address_U', 'famsize_GT3', 'famsize_LE3', 'Pstatus_A', 'Pstatus_T', 'Medu', 'Fedu', 'Mjob_at_home', 'Mjob_health', 'Mjob_other', 'Mjob_services', 'Mjob_teacher', 'Fjob_at_home', 'Fjob_health', 'Fjob_other', 'Fjob_services', 'Fjob_teacher', 'reason_course', 'reason_home', 'reason_other', 'reason_reputation', 'guardian_father', 'guardian_mother', 'guardian_other', 'traveltime', 'studytime', 'failures', 'schoolsup', 'famsup', 'paid', 'activities', 'nursery', 'higher', 'internet', 'romantic', 'famrel', 'freetime', 'goout', 'Dalc', 'Walc', 'health', 'absences']\n"
     ]
    }
   ],
   "source": [
    "def preprocess_features(X):\n",
    "    ''' Preprocesses the student data and converts non-numeric binary variables into\n",
    "        binary (0/1) variables. Converts categorical variables into dummy variables. '''\n",
    "    \n",
    "    # Initialize new output DataFrame\n",
    "    output = pd.DataFrame(index = X.index)\n",
    "    \n",
    "    # Investigate each feature column for the data\n",
    "    for col, col_data in X.iteritems():\n",
    "        \n",
    "        # If data type is non-numeric, replace all yes/no values with 1/0\n",
    "        if col_data.dtype == object:\n",
    "            col_data = col_data.replace(['yes', 'no'], [1, 0])\n",
    "\n",
    "        # If data type is categorical, convert to dummy variables\n",
    "        if col_data.dtype == object:\n",
    "            # Example: 'school' => 'school_GP' and 'school_MS'\n",
    "            col_data = pd.get_dummies(col_data, prefix = col)  \n",
    "        \n",
    "        # Collect the revised columns\n",
    "        output = output.join(col_data)\n",
    "    \n",
    "    return output\n",
    "\n",
    "X_all = preprocess_features(X_all)\n",
    "print \"Processed feature columns ({} total features):\\n{}\".format(len(X_all.columns), list(X_all.columns))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Implementation: Training and Testing Data Split\n",
    "So far, we have converted all _categorical_ features into numeric values. For the next step, we split the data (both features and corresponding labels) into training and test sets. In the following code cell below, you will need to implement the following:\n",
    "- Randomly shuffle and split the data (`X_all`, `y_all`) into training and testing subsets.\n",
    "  - Use 300 training points (approximately 75%) and 95 testing points (approximately 25%).\n",
    "  - Set a `random_state` for the function(s) you use, if provided.\n",
    "  - Store the results in `X_train`, `X_test`, `y_train`, and `y_test`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training set has 300 samples.\n",
      "Testing set has 95 samples.\n"
     ]
    }
   ],
   "source": [
    "# TODO: Import any additional functionality you may need here\n",
    "from sklearn.model_selection import train_test_split\n",
    "# TODO: Set the number of training points\n",
    "num_train = 300\n",
    "\n",
    "# Set the number of testing points\n",
    "num_test = X_all.shape[0] - num_train\n",
    "\n",
    "# TODO: Shuffle and split the dataset into the number of training and testing points above\n",
    "X_train, X_test, y_train, y_test = train_test_split(\n",
    "                                    X_all, y_all, test_size = num_test,\n",
    "                                    random_state = 10)\n",
    "\n",
    "# Show the results of the split\n",
    "print \"Training set has {} samples.\".format(X_train.shape[0])\n",
    "print \"Testing set has {} samples.\".format(X_test.shape[0])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Training and Evaluating Models\n",
    "In this section, you will choose 3 supervised learning models that are appropriate for this problem and available in `scikit-learn`. You will first discuss the reasoning behind choosing these three models by considering what you know about the data and each model's strengths and weaknesses. You will then fit the model to varying sizes of training data (100 data points, 200 data points, and 300 data points) and measure the F<sub>1</sub> score. You will need to produce three tables (one for each model) that shows the training set size, training time, prediction time, F<sub>1</sub> score on the training set, and F<sub>1</sub> score on the testing set.\n",
    "\n",
    "**The following supervised learning models are currently available in** [`scikit-learn`](http://scikit-learn.org/stable/supervised_learning.html) **that you may choose from:**\n",
    "- Gaussian Naive Bayes (GaussianNB)\n",
    "- Decision Trees\n",
    "- Ensemble Methods (Bagging, AdaBoost, Random Forest, Gradient Boosting)\n",
    "- K-Nearest Neighbors (KNeighbors)\n",
    "- Stochastic Gradient Descent (SGDC)\n",
    "- Support Vector Machines (SVM)\n",
    "- Logistic Regression"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Question 2 - Model Application\n",
    "*List three supervised learning models that are appropriate for this problem. For each model chosen*\n",
    "- Describe one real-world application in industry where the model can be applied. *(You may need to do a small bit of research for this — give references!)* \n",
    "- What are the strengths of the model; when does it perform well? \n",
    "- What are the weaknesses of the model; when does it perform poorly?\n",
    "- What makes this model a good candidate for the problem, given what you know about the data?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": false
   },
   "source": [
    "## Support Vector Machines (SVM)\n",
    "\n",
    "### **Applications:**\n",
    "- [Pattern recognition](http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.723.5893&rep=rep1&type=pdf)\n",
    "- [Text Categorization](http://www.cs.cornell.edu/people/tj/publications/joachims_98a.pdf)\n",
    "- [Financial time series forcasting](http://www.svms.org/finance/)\n",
    "\n",
    "### **Advantages:**\n",
    "- Robust and accurate\n",
    "- Resistant to overfitting.\n",
    "- With an appropriate kernel choice, can work well when data which is not-linearly separable in the base feature space. The trick is that the data is projected to higher dimension feature space to formulate a linear problem in that space.\n",
    "- Insensitive to the number of  dimensions. Especially popular in text classification problems where very high-dimensional spaces are the norm. \n",
    "\t\n",
    "### **Disadvantages:**\n",
    "- Time / Memory-intensive since it is based on convex quadratic programming and requires large matrix operations. Training time scales quadraticaly vs number of data points\n",
    "- Hard to interpret, run and tune.\n",
    "\n",
    "## Logistic Regression\n",
    "\n",
    "### **Applications:**\n",
    "- [Credit scoring](http://www.statsoft.com/textbook/credit-scoring): Predicting whether or not credit extended to an applicant will likely result in profit or losses for the lending institution.\n",
    "- [Measuring the success rates and effectiveness of marketing campaigns](http://www.sas.com/content/dam/SAS/en_ca/User%20Group%20Presentations/Toronto-Data-Mining-Forum/RyanZhao-MarketingCampaignROI.pdf)\n",
    "\n",
    "\n",
    "**Advantages:**\n",
    "- Intrinsically simple, has low variance and so is less prone to over-fitting\n",
    "- Works well with linear features, but can handle nonlinear features as well\n",
    "- Robust to noise\n",
    "- Feature correlations do not concern much, opposed to Naïve Bayes\n",
    "- Unlike SVM and Decision Trees, Have nice probabilistic interpretation, therefor, can be used to establish a probabilistic framework, e.g., to easily adjust classification thresholds, to say when you’re unsure, or to get confidence intervals\n",
    "- Model can easily be updated to take new data, using online gradient descent method\n",
    "- Decision boundaries can be in any direction, unlike decision trees\n",
    "\n",
    "**Disadvantages:**\n",
    "- Requires independent observations\n",
    "\n",
    "## K-Nearest Neighbors (KNeighbors)\n",
    "\n",
    "### **Applications:**\n",
    "- Everything including information retrieval to similar object search:\n",
    " - [Nearest Neighbor Retrieval and Classification](http://vlm1.uta.edu/~athitsos/nearest_neighbors/)\n",
    " - [Similar object search](http://staff.itee.uq.edu.au/zxf/_papers/sigmod510-zheng.pdf)\n",
    " - [Sentiment analysis](http://www.cs.tau.ac.il/~kfirbar/mlproject/project-ml.pdf)\n",
    " - [Query Dependent Ranking Using K-Nearest Neighbor](http://www.cs.cmu.edu/~aarnold/cald/fp025-geng.pdf)\n",
    "    \n",
    "### **Advantages:**\n",
    "- Has a simple implementation and very easy to interpret\n",
    "- Classes do not need to be linearly separable\n",
    "- Non parametric, does not make any assumptions on the data distribution, does not build a model therefor:\n",
    " - Fast training and works very well for relatively small databases \n",
    " - Can easily take in new data, with no need to rebuilt a model\n",
    "- Well suited for multi-modal classes as well as applications in which an object can have many class labels\n",
    "\n",
    "### **Disadvantages:**\n",
    "- Computationally inefficient for very large data sets\n",
    "- Sensitive to local noise or irrelevant attributes\n",
    "- Low accuracy for small amount of data\n",
    "- Performance depends on the dimensions used (curse of dimensionality)\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Answer:**\n",
    "The dataset has fairly small number of features (48), with below 400 samples. Some of the fearures might be related to the others. For example, family size and parents' level of education.\n",
    "\n",
    "* SVM\n",
    "* KNN\n",
    "* Logistic Regression\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Setup\n",
    "Run the code cell below to initialize three helper functions which you can use for training and testing the three supervised learning models you've chosen above. The functions are as follows:\n",
    "- `train_classifier` - takes as input a classifier and training data and fits the classifier to the data.\n",
    "- `predict_labels` - takes as input a fit classifier, features, and a target labeling and makes predictions using the F<sub>1</sub> score.\n",
    "- `train_predict` - takes as input a classifier, and the training and testing data, and performs `train_clasifier` and `predict_labels`.\n",
    " - This function will report the F<sub>1</sub> score for both the training and testing data separately."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "def train_classifier(clf, X_train, y_train):\n",
    "    ''' Fits a classifier to the training data. '''\n",
    "    \n",
    "    # Start the clock, train the classifier, then stop the clock\n",
    "    start = time()\n",
    "    clf.fit(X_train, y_train)\n",
    "    end = time()\n",
    "    \n",
    "    # Print the results\n",
    "    print \"Trained model in {:.4f} seconds\".format(end - start)\n",
    "\n",
    "    \n",
    "def predict_labels(clf, features, target):\n",
    "    ''' Makes predictions using a fit classifier based on F1 score. '''\n",
    "    \n",
    "    # Start the clock, make predictions, then stop the clock\n",
    "    start = time()\n",
    "    y_pred = clf.predict(features)\n",
    "    end = time()\n",
    "    \n",
    "    # Print and return results\n",
    "    print \"Made predictions in {:.4f} seconds.\".format(end - start)\n",
    "    return f1_score(target.values, y_pred, pos_label='yes')\n",
    "\n",
    "\n",
    "def train_predict(clf, X_train, y_train, X_test, y_test):\n",
    "    ''' Train and predict using a classifer based on F1 score. '''\n",
    "    \n",
    "    # Indicate the classifier and the training set size\n",
    "    print \"Training a {} using a training set size of {}. . .\".format(clf.__class__.__name__, len(X_train))\n",
    "    \n",
    "    # Train the classifier\n",
    "    train_classifier(clf, X_train, y_train)\n",
    "    \n",
    "    # Print the results of prediction for both training and testing\n",
    "    print \"F1 score for training set: {:.4f}.\".format(predict_labels(clf, X_train, y_train))\n",
    "    print \"F1 score for test set: {:.4f}.\".format(predict_labels(clf, X_test, y_test))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Implementation: Model Performance Metrics\n",
    "With the predefined functions above, you will now import the three supervised learning models of your choice and run the `train_predict` function for each one. Remember that you will need to train and predict on each classifier for three different training set sizes: 100, 200, and 300. Hence, you should expect to have 9 different outputs below — 3 for each model using the varying training set sizes. In the following code cell, you will need to implement the following:\n",
    "- Import the three supervised learning models you've discussed in the previous section.\n",
    "- Initialize the three models and store them in `clf_A`, `clf_B`, and `clf_C`.\n",
    " - Use a `random_state` for each model you use, if provided.\n",
    " - **Note:** Use the default settings for each model — you will tune one specific model in a later section.\n",
    "- Create the different training set sizes to be used to train each model.\n",
    " - *Do not reshuffle and resplit the data! The new training points should be drawn from `X_train` and `y_train`.*\n",
    "- Fit each model with each training set size and make predictions on the test set (9 in total).  \n",
    "**Note:** Three tables are provided after the following code cell which can be used to store your results."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "_____________________________________________________ SVC Classifier\n",
      "\n",
      "Training a SVC using a training set size of 100. . .\n",
      "Trained model in 0.0164 seconds\n",
      "Made predictions in 0.0066 seconds.\n",
      "F1 score for training set: 0.8889.\n",
      "Made predictions in 0.0041 seconds.\n",
      "F1 score for test set: 0.8101.\n",
      "\n",
      "\n",
      "Training a SVC using a training set size of 200. . .\n",
      "Trained model in 0.0103 seconds\n",
      "Made predictions in 0.0054 seconds.\n",
      "F1 score for training set: 0.8645.\n",
      "Made predictions in 0.0018 seconds.\n",
      "F1 score for test set: 0.8105.\n",
      "\n",
      "\n",
      "Training a SVC using a training set size of 300. . .\n",
      "Trained model in 0.0096 seconds\n",
      "Made predictions in 0.0063 seconds.\n",
      "F1 score for training set: 0.8615.\n",
      "Made predictions in 0.0035 seconds.\n",
      "F1 score for test set: 0.8079.\n",
      "\n",
      "_____________________________________________________ KNN Classifier\n",
      "\n",
      "Training a KNeighborsClassifier using a training set size of 100. . .\n",
      "Trained model in 0.0015 seconds\n",
      "Made predictions in 0.0047 seconds.\n",
      "F1 score for training set: 0.8516.\n",
      "Made predictions in 0.0024 seconds.\n",
      "F1 score for test set: 0.8205.\n",
      "\n",
      "\n",
      "Training a KNeighborsClassifier using a training set size of 200. . .\n",
      "Trained model in 0.0009 seconds\n",
      "Made predictions in 0.0044 seconds.\n",
      "F1 score for training set: 0.8483.\n",
      "Made predictions in 0.0028 seconds.\n",
      "F1 score for test set: 0.7639.\n",
      "\n",
      "\n",
      "Training a KNeighborsClassifier using a training set size of 300. . .\n",
      "Trained model in 0.0012 seconds\n",
      "Made predictions in 0.0085 seconds.\n",
      "F1 score for training set: 0.8519.\n",
      "Made predictions in 0.0035 seconds.\n",
      "F1 score for test set: 0.7887.\n",
      "\n",
      "_____________________________________ Logistic Regression Classifier\n",
      "\n",
      "Training a LogisticRegression using a training set size of 100. . .\n",
      "Trained model in 0.0023 seconds\n",
      "Made predictions in 0.0007 seconds.\n",
      "F1 score for training set: 0.9595.\n",
      "Made predictions in 0.0003 seconds.\n",
      "F1 score for test set: 0.7626.\n",
      "\n",
      "\n",
      "Training a LogisticRegression using a training set size of 200. . .\n",
      "Trained model in 0.0031 seconds\n",
      "Made predictions in 0.0004 seconds.\n",
      "F1 score for training set: 0.8552.\n",
      "Made predictions in 0.0006 seconds.\n",
      "F1 score for test set: 0.7887.\n",
      "\n",
      "\n",
      "Training a LogisticRegression using a training set size of 300. . .\n",
      "Trained model in 0.0061 seconds\n",
      "Made predictions in 0.0007 seconds.\n",
      "F1 score for training set: 0.8263.\n",
      "Made predictions in 0.0005 seconds.\n",
      "F1 score for test set: 0.8169.\n"
     ]
    }
   ],
   "source": [
    "# TODO: Import the three supervised learning models from sklearn\n",
    "from sklearn.neighbors import KNeighborsClassifier \n",
    "from sklearn.svm import SVC\n",
    "from sklearn.tree import DecisionTreeClassifier\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "\n",
    "from sklearn.utils import shuffle\n",
    "\n",
    "# TODO: Initialize the three models\n",
    "\n",
    "clf_A = SVC()\n",
    "clf_B = KNeighborsClassifier()\n",
    "clf_C = LogisticRegression()\n",
    "\n",
    "# TODO: Set up the training set sizes\n",
    "X_train_100, y_train_100 = shuffle(X_train, y_train, n_samples=100, random_state=0)\n",
    "\n",
    "X_train_200, y_train_200 = shuffle(X_train, y_train, n_samples=200, random_state=0)\n",
    "\n",
    "X_train_300, y_train_300 = shuffle(X_train, y_train, n_samples=300, random_state=0)\n",
    "\n",
    "# TODO: Execute the 'train_predict' function for each classifier and each training set size\n",
    "# train_predict(clf, X_train, y_train, X_test, y_test)\n",
    "print '\\n_____________________________________________________ SVC Classifier\\n'\n",
    "train_predict(clf_A, X_train_100, y_train_100, X_test, y_test)\n",
    "print '\\n'\n",
    "train_predict(clf_A, X_train_200, y_train_200, X_test, y_test)\n",
    "print '\\n'\n",
    "train_predict(clf_A, X_train_300, y_train_300, X_test, y_test)\n",
    "print '\\n_____________________________________________________ KNN Classifier\\n'\n",
    "train_predict(clf_B, X_train_100, y_train_100, X_test, y_test)\n",
    "print '\\n'\n",
    "train_predict(clf_B, X_train_200, y_train_200, X_test, y_test)\n",
    "print '\\n'\n",
    "train_predict(clf_B, X_train_300, y_train_300, X_test, y_test)\n",
    "print '\\n_____________________________________ Logistic Regression Classifier\\n'\n",
    "train_predict(clf_C, X_train_100, y_train_100, X_test, y_test)\n",
    "print '\\n'\n",
    "train_predict(clf_C, X_train_200, y_train_200, X_test, y_test)\n",
    "print '\\n'\n",
    "train_predict(clf_C, X_train_300, y_train_300, X_test, y_test)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Tabular Results\n",
    "Edit the cell below to see how a table can be designed in [Markdown](https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet#tables). You can record your results from above in the tables provided."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "** Classifer 1 - K-Nearest Neighbors Classifier**  \n",
    "\n",
    "| Training Set Size | Training Time | Prediction Time (test) | F1 Score (train) | F1 Score (test) |\n",
    "| :---------------: | :-----------: | :--------------------: | :--------------: | :-------------: |\n",
    "| 100               |   0.0066      |   0.0041               |    0.8889        |    0.8101       |\n",
    "| 200               |   0.0054      |   0.0018               |    0.8645        |    0.8105       |\n",
    "| 300               |   0.0063      |   0.0035               |    0.8615        |    0.8079       |\n",
    "\n",
    "** Classifer 2 - Support Vector Machine Classifier**  \n",
    "\n",
    "| Training Set Size | Training Time | Prediction Time (test) | F1 Score (train) | F1 Score (test) |\n",
    "| :---------------: | :-----------: | :--------------------: | :--------------: | :-------------: |\n",
    "| 100               |   0.0015      |   0.0024               |    0.8516        |    0.8205       |\n",
    "| 200               |   0.0009      |   0.0028               |    0.8483        |    0.7639       |\n",
    "| 300               |   0.0012      |   0.0035               |    0.8519        |    0.7887       |\n",
    "\n",
    "** Classifer 3 - Logistic Regression, default parameters**  \n",
    "\n",
    "| Training Set Size | Training Time | Prediction Time (test) | F1 Score (train) | F1 Score (test) |\n",
    "| :---------------: | :-----------: | :--------------------: | :--------------: | :-------------: |\n",
    "| 100               |   0.0023      |   0.0003               |    0.9595        |    0.7626       |\n",
    "| 200               |   0.0031      |   0.0006               |    0.8552        |    0.7887       |\n",
    "| 300               |   0.0061      |   0.0005               |    0.8263        |    0.8169       |"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\nWrXv/QAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x112e5bdd0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\nQmCC\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x1135a1bd0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x10f9c5550>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x10f9c5150>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from matplotlib import pyplot as plt\n",
    "from sklearn.learning_curve import learning_curve\n",
    "from sklearn.model_selection import ShuffleSplit\n",
    "from sklearn.ensemble import GradientBoostingClassifier\n",
    "#from sklearn.naive_bayes import GaussianNB\n",
    "#from sklearn.linear_model import SGDClassifier\n",
    "#from sklearn.ensemble import RandomForestClassifier\n",
    "#from sklearn.ensemble import AdaBoostClassifier\n",
    "\n",
    "#from sklearn.model_selection import KFold\n",
    "#cv = list(KFold(n_splits=40, random_state=20, shuffle=True).split(X_train, y_train))\n",
    "\n",
    "def plot_LCurve(train_sizes, train_scores, test_scores):\n",
    "    train_scores_mean = np.mean(train_scores, axis=1)\n",
    "    train_scores_std = np.std(train_scores, axis=1)\n",
    "    test_scores_mean = np.mean(test_scores, axis=1)\n",
    "    test_scores_std = np.std(test_scores, axis=1)\n",
    "\n",
    "    plt.figure()\n",
    "    plt.fill_between(train_sizes, train_scores_mean - train_scores_std,\n",
    "                     train_scores_mean + train_scores_std, alpha=0.1, color=\"r\")\n",
    "    plt.fill_between(train_sizes, test_scores_mean - test_scores_std,\n",
    "                     test_scores_mean + test_scores_std, alpha=0.1, color=\"g\")\n",
    "    plt.plot(train_sizes, train_scores_mean, 'o-', color=\"r\", label=\"Training score\")\n",
    "    plt.plot(train_sizes, test_scores_mean, 'o-', color=\"g\", label=\"Cross-validation score\")\n",
    "    plt.ylim([0,1])\n",
    "    plt.show()\n",
    "    \n",
    "clf_A = SVC()\n",
    "clf_D = GradientBoostingClassifier(max_depth=1, n_estimators=300)\n",
    "\n",
    "cv = ShuffleSplit(n_splits=50, test_size=0.1, random_state=0).split(X_train, y_train)    \n",
    "train_sizes, train_scores, test_scores = learning_curve(\n",
    "    clf_A, X_train, y_train, cv=cv, n_jobs=1, train_sizes=np.linspace(.1, 1.0, 10))\n",
    "plot_LCurve(train_sizes, train_scores, test_scores)\n",
    "\n",
    "cv = ShuffleSplit(n_splits=50, test_size=0.1, random_state=0).split(X_train, y_train)\n",
    "train_sizes, train_scores, test_scores = learning_curve(\n",
    "    clf_B, X_train, y_train, cv=cv, n_jobs=1, train_sizes=np.linspace(.1, 1.0, 10))\n",
    "plot_LCurve(train_sizes, train_scores, test_scores)\n",
    "\n",
    "cv = ShuffleSplit(n_splits=50, test_size=0.1, random_state=0).split(X_train, y_train)\n",
    "train_sizes, train_scores, test_scores = learning_curve(\n",
    "    clf_C, X_train, y_train, cv=cv, n_jobs=1, train_sizes=np.linspace(.1, 1.0, 10))\n",
    "plot_LCurve(train_sizes, train_scores, test_scores)\n",
    "\n",
    "cv = ShuffleSplit(n_splits=50, test_size=0.1, random_state=0).split(X_train, y_train)\n",
    "train_sizes, train_scores, test_scores = learning_curve(\n",
    "    clf_D, X_train, y_train, cv=cv, n_jobs=1, train_sizes=np.linspace(.1, 1.0, 10))\n",
    "plot_LCurve(train_sizes, train_scores, test_scores)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\nWrXv/QAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x112e5bdd0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\nQmCC\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x1135a1bd0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAXcAAAD8CAYAAACMwORRAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAIABJREFUeJzt3XuUXFWdL/Dv79Szu/qRhATIgzx4v4dHTMBhKQ46PGTI\nNaIXBx3nLsfctbwsHyNimDgOcldGxDvO6JKlRmVQF0sMGDAICi7v+MBlEsLlHQg0gYTuBPLqdNKP\nep7f/WPXrjpVfaqruru6q/rU9wNn1amq01XnVKW+e5999tlHVBVERBQsTqNXgIiI6o/hTkQUQAx3\nIqIAYrgTEQUQw52IKIAY7kREAVQ13EXkbhHZLyIvVHheRORbItIjIs+JyEX1X00iIhqPWmru9wC4\naoznrwZwWn5aA+A7k18tIiKajKrhrqp/AHB4jEVWAfixGlsAzBKR+fVaQSIiGr9wHV5jIYA3Pfd7\n84/tK19QRNbA1O6RSCQuPvPMM8f3TocPA319QDoNRCLAiScC3d2APctWBHAcIBQy8yIT2iAiomb1\n1FNPHVTVedWWq0e4+yWo75gGqroBwAYAWL58uW7fvr32d7n3XmDNGhPsAJDJAAcPArfcAqxebR5z\nXfN8NptfMwHa2oBEAojHgWjUBD8R0QwlIrtrWa4e4d4L4CTP/UUA9tbhdUutWwcMD5c+NjIC3HFH\nMdwdx4S4pVosBFzXPBaNAh0dQHu7mY9E6r6qRESNVo+ukJsB/F2+18wlAAZUdVSTzKTt2eP/eF8f\n8N3vAvv3j35OxAR4IgF0dpopFAKOHgV6e4Fdu4CeHmDfPvNYKlVs4iEimsGk2qiQIvJTAJcDmAvg\nbQD/AiACAKr6XRERAN+G6VEzDOB/qGrV9pZxN8ssXQrs9tkbiUZNU0woBFx+OfDhDwPvex8Qi9X2\nut6mHNViU05HB5tyiKjpiMhTqrq86nKNGvJ3wm3u3qaZtjbgzjuB888HHnjATPv2AbNmAatWmaD/\ni78Y34FV25STybAph4iaTvDCHTABv26daaKZPx+49dZiezsA5HLAn/4EbNwI/OpXQDIJnHaaCfnV\nq03vmonIZk3Y2wO1oZBp6kkkTAHDsCeiaRLMcLeOHAHefhsIh024+jl6FPjlL03QP/mkOdj67ncD\nH/oQcOWVpQdex6u8KaetzewtJBJswiGiKRXscAdMuB46ZEJ8rJAHzIHTBx4A7r8f2LvX9I2/7joT\n9BddNPn+8Ol0sYtmR4d5/bY2U6AQEdVR8MPdSqVMyB87ZppHxqqRu65ptrn/fuCRR0yzzSmnmGab\nD37QNPVMhqpZn0zGBHtnpwn6eJwnVBFRXbROuFvJpOnPPjRkDnpW6y1z7JgJ+I0bga1bTfi+610m\n6K+8cuw9gVqomnXKZs2eRXe3qdXHYgx6Ipqw1gt3a2QEOHDA9KqxXRmreeONYrNNb6+pcdtmm+XL\nJx/GrmuCPpczexezZ5v2+VrWjYjIo3XD3RoeNiE/MlJ7jxbXBbZsMbX5X/7S/O2yZSbkr78eWLjQ\nLLdpkzkzdu9eYMECYO3a0l47Y8nlTNNNLmdq8Tbow/U4WZiIgo7hDpimERvyqZSpydfabXFw0DTb\n3H8/8Oc/m9r7ZZeZk6nuv9/UxC3b377WgLcymeJZsYmE6XHT1sYeN0RUEcPdS9W0xe/fbwK1rW18\nNeU9e4rNNpWGQVi4ENi2beLrmE6boBdhjxsiqojh7kfVHEg9eNCEfHv7+GrJrgssXuw//oyIaa+v\nxzp6e9x0d5tjAOxxQ0SoPdxbq1ooAnR1maaV+fNNbXlw0LR/18JxTBu7H1XTNn///aNHrxzvOsbj\nJtDb201htGeP6at/8KAJfiKiKlor3C3HMSG/bBlwwgkmMAcHi2PJjGXt2tHdJONx4P3vNwdYP/tZ\n4IILgM99zrTV1/KaldhBzDo7zcHXI0dMz55du4D+/uKJU0REZVq7i4Zt9ujoMGe6HjxoHh+rrdse\nNPXrLaNqhjrYuBF4+GFzu3hxsbfN4sWTW9f2djOfzZp13b+/2OPG9ghi0w0RodXa3KvJ5YCBAROc\njmMCc6JhOTJiBi/buBF44gkT/JdeaoL+2mtN75h68Pa4CYVMQWVPluKAZkSBwwOqk5HNmiaQQ4dM\nYE4m5AFzQZGf/9wE/euvm9d7//vN2bCXXlq/HjHlA5pFIiboEwkT9uxLTzTjMdzrIZMxbdv9/fUJ\neVVg+3Zz0HXzZnOwdNEi02TzoQ+ZA731lMuZsM/lzHtHo+ZYQ1ubCXv2pyeacRju9ZROF0M+Epn8\nuDOAabZ57DET9L//vQnflSuLzTadnZN/j3LZbDHsvb1y2tpM8LNPPVHTY7hPBTvM8MBA/UIeMAdm\nN20yzTavvWZC95prTNBfdtnUhW4mY7bJdU3Yt7cX+9RHozw4S9SEGO5TKZUyB10HB007dr1OMFIF\nnn7ahPwvfmF68CxYUGy2Ofnkyb/HWO/tvbyg45i2enstWfbEIWoKDPfpkEyaAB4YMIE4nrFrannt\nxx83zTa/+515/Xe8w4T83/yNaTufzABm1aiaWn0mU+yJ09lZPDjLnjhEDcFwn065nBm75vBhU6sP\nhUzQ16s55a23gAcfNDX6V14xr33uucBzz5WeyDTRAcxq4brF0SwBs8diz6JlTxyiacNwb5RUyvSC\n6e8v9lCp17jtqsCzz5qQ//GP/ce4WbDAnEg11WxPnGzWNNdEo8UmnHDY1OzZG4eo7hjujea6ZoyZ\nw4dNzxh7UlS9avOLFvmHOwCceipwzjml07x59XnfSrJZ04Rju12KmG2Nxcx2M/SJ6qLWcOe+9FRx\nnOLZoum0aZs/csSEXy2XAaxmwQJzclS5zk4T7k89ZQ7KWiecYEL+7LOLgb9sWf0Km3B4dNOMPUg7\nMGAKubFC3+/viWjC+GuaDtEoMHcuMGeOqcX395uwD4cnfjLR2rXALbeY17Pa2oB//ddim/uRI8CO\nHcCLLxanP/zB1LIB017uDftzzgHOOKN+XTxtc005hj7RlGOzTKPY4Yb7+03YRiIm0MZjIr1lUing\n1VdLA//FF81xAsAE7KmnmgO2tqZ/7rmmYKrnevixoZ/LFZt3AFP4MfSJALDNfeZQNbXvI0dMwDqO\nCbDpbJdWBd58E3jhhdLA37u3uMyJJ5qwt6F/zjlmlMuHHvLfg6hnrx1VUwBms8XeOrZ7ZixmPi97\nda1w2DzOPvkUUAz3mSiTKdbmMxlTm4/FGhdUhw+bZh0b+jt2mFq/DVh7PMFvXPnJXnawFpVCX6QY\n8t7Aj0RM4VlpYoFAMwDDfSZTNScx9feb2rwdB6YZmiGSSdPX3tbu//M/Ky/70Y+aJp5TTwVOOcX0\n8Jmu8Wtct3RSLd4CxULAexsKlRYI3okFAjUJhntQZLPmBKlDh0xtvp7DHdTDihX+vXaiUXPA9siR\n4mPxuOmhYwPfTiefXLwQSSNVKhCA0m6ntkAATMBXKhBCoeLzdp5oktgVMijCYXO1qK4uU2seGDA9\nbYDmqM1X6rVj29wPHwZ6ekqn558HHnmk9BKECxaU1vLt7YknTl9BZmvj42ELANc13095oWCXAYpN\nQ/bEtmi0GPw2/FkAUJ2w5j4T2eEODh0y7d3egGjEwcSJ9tp5443S0H/tNXM7NFRcLpEoDXw7LV06\n+lyBqRxrpx5Uiz2BXNf/wuyOwwKAxsRmmVaRTJowTCZNs002W9qUIFLsQ+4NiWalasbSsUFvb3t6\nSnvvOI7prWND/+hRE+6pVHGZqRxrZ6rYvYDJFADsLRRoDPdWZmuHdrIX6bCTtw+5ZWuEzdw+PDQE\n7NpVGvg9PeYxb6h7RSLA8uWmacs2b9n58vtdXcCsWZM7pjEdew+1FAD2OIC3ALDfr/eWhcCMwzb3\nVlatdm7bhL0FgL1wh53sWazlr+stAKY7GBIJ4LzzzOSVywFLlviPtWPHp3/jDXO8YmDAjPkzlkjE\nP/jL521hYO8/8QTwla8Ujz/09ZnjEUB9A94WxGMdb7Hf78iI2V5vAeDdo7PHAbwFAQuBQKgp3EXk\nKgDfBBAC8ANVvaPs+cUAfgRgVn6Ztar6aJ3XlerF/qirFQDlewDe8B8ZKT1o6H3d6T6RKBSqPNbO\nwoWmNu2VyRTH4be3djp6tDgOkPe53buL9/0KvkpGRoAvfhHYuRM4/ngzDMW8eWaaO9cUDlPxOdkC\noNq4+2MVApa3EIhGiwVB+Z5eMzf3taCq4S4iIQB3AXgfgF4AT4rIZlXd4VnsSwA2qup3RORsAI8C\nWDoF60vTxZ4IVEvt0Nv8k0yaaXi4tCY91cFfqdfO2rWjl41EgOOOM9N42TOKvYWBnf/MZ/z/ZngY\n+M53/IMzGjXrYcPeBr+3ALCFwngKglqbh2otBGwT0NBQseD3dgn1njxWrRDgnsC0qKXmvgJAj6ru\nAgARuQ/AKgDecFcAXfn5bgB7QcHnFwzd3cV5e+aobfNPpUzwp1ImDLwDhnmDfyJscE11e7e91mx7\nOzB/fulzd95Zee9hyxazN3DgQOl08GBxfv9+cxbwwYP+ewe2UBqrAJg3D9i6tf7NQzacx1MI2GMD\nfux37S0EyguAZj32M0NUPaAqItcDuEpV/yF//2MAVqrqTZ5l5gN4HMBsAAkA71XVp3xeaw2ANQCw\nePHii3fv3l2v7aCZxNb87NABmUyxxp/Nltb46xH802XTpvqMs+O6pQWBLQAOHjQFgLdAqFQQ+Glv\nB268sXi8wHvswDvf0VG/mnWlPYjyg8L2/IDyM4e9e5C2IPCeNextEmqRvYF6HlD1+8TKS4SPALhH\nVf9NRC4F8BMROVdVS4ptVd0AYANgesvU8N4URGM1+ZQHfypVnEZGisHvPW7QLN0767X34DhmFM45\nc8wQzGOxBYG3APjUp/yXHR4GfvpTM35Rtfe3ge8N/mqFgp1PJMz3U17Yle9BVDsoDJSeJOZtErLP\neQPdvp73ALH3TOEWO0BcS7j3AjjJc38RRje7fALAVQCgqn8WkTiAuQD212MlqYWUB39HR/G58oHC\nvM083tqy97Xsbr2d9/b7t/P1tHr19Par9xYEp59uHlu/vnLz0LZt5vOzB469B5bHmn/99eJ970lm\nldapq8uMi1R+nGFkBFi3znxvs2aZafbs4nz5tQS8hXi1JiEb/HZP0Hum8MMPA9/4BrBvn2lO+/zn\ngQ98INDjCNUS7k8COE1ElgHoA3ADgL8tW2YPgCsA3CMiZwGIAzhQzxUlgoj5gdsfuTf47S6+DX77\nw7YndZWfGWofLx8moNIP2BYE3smvsGgG1Q4uh8PFAmEiMhkT3N4Dyn6FxT33+P/90aPAF77g/1w8\nXgz6apO3ULB7C357Aps2Af/8z8XPY+9e4EtfMsuuWlV52Ihy3i6otRYIDTxmUNNJTCJyDYD/gOnm\neLeqrheR2wFsV9XN+R4y3wfQAdNkc4uqPj7Wa/IkJmoKtp3XO2qk37ydKhUWYx08LB9ozFsYTFUI\nNMNQDJUGlVuwwFwH4MiRylN//+j5ZLLye4XDlQuBjRuL4zF5nXAC8Otfm0pCW1v1wrn834Lf4HL2\neIFVPvz0L34BfPWr5nNZvNjsZd14Y/XP0oNnqBI1QqVCwbsnYSd73+5JAJX3HvwKhGbbYyhXrwPM\nlu2CWq0wKJ+qHWMAzGeYSJigb283t4lE8TE7X37fu3z534ZCpRWFTZuAf/qn0s+jvR3YsGFcAc9w\nJ5ppygsC7+Q9l8B73MFvj8FTQLgozpf80r3HG8aYV/v34yxANP9u8uBDCH3t64U9CP3iLcDq1RAI\nZLoKpUp7ELNnm+ahoSEzDQ6Wzg8Pm1vvfLWzm73i8dLCoKfH/8I2S5aYM6hrxHAnCihVhasucpoz\nt7ks3FwW6UwS2WwamWwamVwauVwGuWwaYn/irkLdnAlVb6FQMq8oFAOq0ELPFBfi23Gu8joCMO9V\nvjciYvrgicCREEQciAjECcGREJyQA8fOOw7Mf1KcF6fw2raQEMAz77mFQB56CHLLFyH12INw3WLQ\n+xUKYxUSj1doqbbfR404tkyLyOQyyLgZ3+eq/Rir1Zxq+TGXv4b9Uaunnlj+WKX7br7nrL1VKFTz\nE/yX8bt1xARA2AmX3IacEAQCJx8mjjij7jeSqy5ybq4kuDO5DLJuFulcGlk3i6ybRU5t4Ob/0Dbn\ni2MCMBZGWGKI5rerbrxXsbK3tcwXNnD0Xolms1A3ZwoRdaG5HNx0Frn8Y5r/z/yf/0/NNivU/BtV\nAE6+wIA94O1prnr3eej88j9i7rd+gPBb+5E98Xgc/NwaDF1xITDwuu+mOhjj34IIJCFAIgogCnN6\nT/4pVP7dLPyr5xDe+9boJxYvrvxek8Bwn0FUFelcGqlsCkOZIQxlhpBzzQ+9/B9UYbe4wo+7ULOq\n8A9RoWMGg6r6/m3J3+no+/k39b3vfT37N+XvUf64330bjqlcqlAw2EKi0nvb+45jCoaQhEoKhZDk\nJydUsWDw3rdcdQuTDW4b0jawbYD7rY99bbsesXCscYWQt+mmXi8J/xNpCsoPbvtdLtF2gfQ2a9lj\nGuqaPZZr348D11xdqCGrKtqSPsNBoLRiUv4MIBWet8/ZDRv9WR256ZOYc/udcJKeEUzb281B1SnA\ncG9iOTeHdC6NZDaJwfQgRrIjhVANh8KIh+MNr20GjW3yUCgybqZwH0Dhcfsd2IKr/D4UCDthuDCh\n7leI2UIgJCFEQhHEwrHpa4OeSWw/93q/rN/eha3wjPHcqMst2ls7723qsrf559L//YMYiLeh4/98\nE+F9+yET7C1TK4Z7E8nkMkjn0hjODGMwPYh0zhx8ccRBJBRBIpJgAEwxG7iTYfcWpvWgIY3PVJzA\nVoORf/g4Dn/8w+iKdWFeYt6UvhfDvUHGamIJO2FEQhF0hjsbvJY0EfZgHlEjMdynCZtYiGg6Mdyn\nCJtYiKiRGO51YLussYmFiJoFw32ccm6upCsbm1iIqBkx3H14+yJnchmkcikks0mkc+lCtzgAhRNk\n2MRCRM2mZcNdVZHTYi08lTUBnsqmSs74tF3jwk4YbeE2hjgRzQiBD3dvM0oml0Eym0QymyycoGKF\nHHP2YTQcRVziDVxjIqLJC0S4q2ohwLNuthDgqVyqcGATQOEU7rATRnuonbVwIppWm17ahK8+8VXs\nO7YPi7sXY/0V63HjeTxDtcD2SrEhXhiXI882o/DAJrWqTS9twh1P3IG9x/ZiQecCrL1sLVafNc0X\n62gizfB5bHppE275zS0YyZrRKXcP7Maah9cAwJQE/IwM9yPJI+hP9iMWiiHiRBAPsxmFyCoPkb5j\nfbjlN+bC1I0ItGYL1fF+Ht7mXNsikMwmMZIdKT6WP2ZXslzZYw++/GBhHazhzDDW/XbdlIT7jBzP\n/e3BtzGUGWr5UG+GHw41F1XFiu+vwN7B8mvYA3Pb5+J7136vZLxz839xDHQ7uqV3XHTAM3a65znv\nCJh+zz/+2uO444k7kMwVL48XC8Vw8ztvxnuWvqc4Hr2bQ1azcF230MnBPp7TXPHWM++3rPc1Csu6\nOfzw6R/iWPrYqM8jHo7jnYveWQhpG9rlAV0YYnkCYqEY4uE44uE43h5623cZgcD9l/qP585wn6HK\nayMA0BZuw53vu7NlA74ZCrt6roOqYigzhMMjh9E/0o/DI4fNlDw86rH+kX70J839SuP7tyI7Wmcl\nF5xwAeLhOGLhYgj73s+HdFu4zfd57zLe1/A2C6/4/gr0HRt9Ragl3UvwxmffqH2beLGO4FJVrP/j\n+lG7eCPZEdz2u9twUtdJ6Ip1oTveje5YN+Lh+JQePG5kqObcHAbTg3hgxwNY/8f1SOXMWNl9x/pw\n8+M3463Bt3DlqVci4kTMwXQxZwzboXbt8ZmQM/lhZcfa/f/AmR/AcGa4GMZJT1iX3e8f6TfBnTxc\nGLainCMOZsdnY07bHMxpm4Ols5bioraLMKdtDn7y3E8wkBoY9Tdz2+fi29d8u3ixFO9Y997bsouk\nVHy+0nL5+c899rmKn9X3rv1eYXz8wq1n3HzHcRAW873Y80nGfNzO5x+3r+mIUzFUF3YuxCM3PjLu\n73mi1l62dlSFrD3SjvVXTM147qy5N7mDwwfx8sGXsfPgTuw8tBMvH3wZrxx6xXc3s5JoKGrCPtZd\nuO2Od5cUAN2xbnTFuwrz9vmuWBfCTuU6wET3IHJuDkOZIRxLHcOxdH7Kzw+mBkvvp4v37fxgahBH\n00cxnBnHNS3HIBCEnXBhCjmhQoFQKBic8OjHJIxwKIywhLGlbwuS2eSo13bEQcSJFAoev+dnxWcV\ngnpOfA5mtxWDe3bb7JIgn9M2B12xroqdBZplr26sUN32yW3Tth7N8nnYdZlsbxk2y8wwA8kBvHLo\nFbx8yAS5DfFDI4cKy8yOz8aZc8/EGcedgYd2PoQjySOjXmde+zx886pv4kjqCI6mjmIgOYCjqaM4\nkjT37WMDKTMdTR0d1duoXEe0o1golBUMP3vhZ74FTUekA9eefi2Opo+aQLbBnA/socxQ1c9EIOiI\ndhTevyPagc5oJzpiHeiKdqEjlr8f7cBXfv+Viq/z7au/jYybQc7NFW6zmkU2ly3eutnRj3luvX9b\neA1P99usm8XTbz1dcR0+tfxTpWFtwzs+B93x7rr36mqWJqpmCtVGfx7WSGZkUuO5M9yb1EhmBK8c\negU7D+0sqY3vG9xXWCYRSeCMuWfgzOPOxBlzzzDTcWdgXvu8QvNKvX44qorhzLAJ+3xBUAj+ZHG+\n8FxZwTCYHqz42vM75qMz1lkI5c5YZyGMS+7bsI52FJbvinWhPdJec+g1Qy2xGdah2TRTqDaL6Qp3\ntrlPQC3/YNO5NHb17zK18HxtfOfBndg9sLtwgCcWiuHUOafi0pMuLQT5mXPPxMLOhVXbyO37TfaH\nIyJIRBNIRBNY0LlgXH8LNE+g+bVntoXbsPaytS21Ds1m9VmrWz7MG4U193HyqzHHQjF87PyPYVbb\nrEJtfFf/rkJzR0hCOHn2yaNq40u6l4zZnj0TcNe7+daBmhubZcbQyHC/eMPFeGvwrYrPL+legtOP\nO70kyE+ZfQpi4dg0ruX0YqAR1Y7NMk1AVdFzuAdb+7Zia+9WbO3bWjHYBYKdN+1EIpqY5rVsPO56\nEzUfhrtH1s1ix4EdhTDf1ret0FtlXvs8rFi4AoPpQd8+xAs6F7RksBNRc2rpcE9mk3j2rWexpW8L\ntvVuw/Z92wu9PxZ3L8Z7lr0Hlyy8BCsWrcDJs06GiFRsY27lg2ZE1HxaKtwH04PYvnc7tvRuwba+\nbXjmrWcKJ5accdwZWH3WaqxcuBIrFq6o2HOkXr1UiIimUqDD/dDwIWzr22Zq5n3b8ML+F+Cqi5CE\ncP4J5+PvL/h7rFy4Eu9Y+A7MaZtT8+uyjZmImt2MCvd7n78X6367DnsG9mB+53zcetmtJSHbd7QP\nW/u2Fmrmrx5+FQAQD8Vx4fwL8ekVn8bKRStx8fyL2T5ORIE2Y8L93ufvxZqH1xTGEtl7bC9ufvxm\n/GnPn5B209jWtw29R3sBAF2xLixfsBzXn309Vi5aifOPPz/QXRGJaPqpKlx1C5MdMM1VF2N1MQ85\nZtC6qTZj+rkv/Y+l2D2w2/c525PlkkWXYMXCFThr7ll1GeWPiFqDN6RtOCtMUFfiiFMYgdI76Jx3\ndMryyTtG/kTVtZ+7iFwF4JsAQgB+oKp3+CzzYQC3AVAAz6rq345rjavYM7DHf90gePp/Ps3roRK1\nOBvK5TVpG9Kqai5Q4iPshAvXWI6FYiVB7RfS3guVNKuq4S4iIQB3AXgfgF4AT4rIZlXd4VnmNAC3\nAvhLVe0XkePrvaKLuxf71twXdC5o+g+ZiMZWaM7wBHFJQKuikMtqb7T421cT0CJm6OZoKFoY493e\n2itN+U1BVEvNfQWAHlXdBQAich+AVQB2eJb5JIC7VLUfAFR1f71XdP0V60va3AH2L6fWUF77HNW+\nW0w7Q4p/N6qm6r2r3tliUI76O8+s97mScB3j9bx/Vx7I9vUdceDAKYyVXx7M5TVmbzPHTKhFN0It\n4b4QwJue+70AVpYtczoAiMifYJpublPVX5e/kIisAbAGABYvXjyuFbUD2o/VW6YV2R84/4E3r/JQ\nHtWmWxbK5TVTgZRcWahardQbeN5aafnxNe/l57zPlV+WrtJz4309v3WrVzs0jVZLuPt96uVHYcMA\nTgNwOYBFAP4oIueqasnVJFR1A4ANgDmgOt6VvfG8G3HjeTfO6PHcx0NVCxf6ddVc+Nf7oxEIHMcc\n0Mm6WfMjUphvTFF4zl6+rBV+QN7gLFxODqWXlbPzVvljhc8RKAncQq3T+5xnvrx2au97v4ewhEfV\nSENOqBB63uCre600+F8/edQS7r0ATvLcXwSg/NLqvQC2qGoGwOsishMm7J+sy1oGUHlwF3avy8I5\n4kQQD8cRcSKIhCKFI/HempzlvVp81s0inUsXppHcCFw3f+Tf8/re61A2a/jbz6q8R4Nf22tYirVY\nW+u1n5G3luh9zDvvvbV/7zcPoKTGWWm5oLbnUvOrJdyfBHCaiCwD0AfgBgDlPWEeAvARAPeIyFyY\nZppd9VzRmcTugnvD2y+4w2IO/NhprOCuRcgJIYSQaRjz4Q3/nOaQyWWQzCZLw99TU7Xhb7t61TP8\nvb0a7B5JTnOeBfK3+fZYe2Fre7DMW+u168imKaKiquGuqlkRuQnAYzCxcbeqvigitwPYrqqb88/9\ntYjsAJAD8AVVPVT5VWc+VUUql0LOzZU0AQAo1IajoSgSkURdgrseqoW/qy6ybrYk/NO5NJLZJEay\nnvDPb6o3/O02ueqW7I0UTujwOchnwzoejo/qeuYNbQY20fjNmJOYvBrV5q6qSGaTyLpZOOKgM9qJ\ntkhbSWjb2yCywZ11syXhn86lkcql4LquCehQGBGnWMu2n0vhpI8GFW5EQcCLddSJqy5S2VQh0Lvj\n3eiIdiAejrdcQDniwAk503LqNBFNDsPdh1+gd0Y7EQvHWi7QiWhmYrjneQM95ITQFetCZ7QT8XCc\nbb5ENONYEkoJAAAJN0lEQVS0dLi76iKZTSLn5hByQpgVm4VENMFAJ6IZr+XCPefmCr1cwk4Ys2Kz\n0BHrQCwUY6ATUWC0RLh7Az3iRBjoRBR4gQ33nJtDMpuEqy4iTgSz47ORiCYY6ETUEgIV7uWBflz7\ncYWTiBjoRNRKZny4Z90sUtmUCfRQBHPb56I90s7L6hFRS5ux4Z7MJJHJZRjoREQ+ZmS4t0faEe2M\nIhE1TS5ERFRqRoZ7Z6yz0atARNTUeC49EVEAMdyJiAKI4U5EFEAMdyKiAGK4ExEFEMOdiCiAGO5E\nRAHEcCciCiCGOxFRADHciYgCiOFORBRADHciogBiuBMRBRDDnYgogBjuREQBxHAnIgoghjsRUQAx\n3ImIAojhTkQUQAx3IqIAYrgTEQUQw52IKIAY7kREAVRTuIvIVSKyU0R6RGTtGMtdLyIqIsvrt4pE\nRDReVcNdREIA7gJwNYCzAXxERM72Wa4TwKcBbK33ShIR0fjUUnNfAaBHVXepahrAfQBW+Sz3vwHc\nCSBZx/UjIqIJqCXcFwJ403O/N/9YgYhcCOAkVf3lWC8kImtEZLuIbD9w4MC4V5aIiGpTS7iLz2Na\neFLEAfDvAD5f7YVUdYOqLlfV5fPmzat9LYmIaFxqCfdeACd57i8CsNdzvxPAuQB+JyJvALgEwGYe\nVCUiapxawv1JAKeJyDIRiQK4AcBm+6SqDqjqXFVdqqpLAWwBcJ2qbp+SNSYioqqqhruqZgHcBOAx\nAC8B2KiqL4rI7SJy3VSvIBERjV+4loVU9VEAj5Y99uUKy14++dUiIqLJ4BmqREQBxHAnIgoghjsR\nUQAx3ImIAojhTkQUQAx3IqIAYrgTEQUQw52IKIAY7kREAcRwJyIKIIY7EVEAMdyJiAKI4U5EFEAM\ndyKiAGK4ExEFEMOdiCiAGO5ERAHEcCciCiCGOxFRADHciYgCiOFORBRADHciogBiuBMRBRDDnYgo\ngBjuREQBxHAnIgoghjsRUQAx3ImIAojhTkQUQAx3IqIAYrgTEQUQw52IKIAY7kREAcRwJyIKoJrC\nXUSuEpGdItIjImt9nv9HEdkhIs+JyG9FZEn9V5WIiGpVNdxFJATgLgBXAzgbwEdE5OyyxZ4GsFxV\nzwfwAIA7672iRERUu1pq7isA9KjqLlVNA7gPwCrvAqr6X6o6nL+7BcCi+q4mERGNRy3hvhDAm577\nvfnHKvkEgF/5PSEia0Rku4hsP3DgQO1rSURE41JLuIvPY+q7oMhHASwH8HW/51V1g6ouV9Xl8+bN\nq30tiYhoXMI1LNML4CTP/UUA9pYvJCLvBbAOwLtVNVWf1SMioomopeb+JIDTRGSZiEQB3ABgs3cB\nEbkQwPcAXKeq++u/mkRENB5Vw11VswBuAvAYgJcAbFTVF0XkdhG5Lr/Y1wF0ALhfRJ4Rkc0VXo6I\niKZBLc0yUNVHATxa9tiXPfPvrfN6ERHRJPAMVSKiAGK4ExEFEMOdiCiAGO5ERAHEcCciCiCGOxFR\nADHciYgCiOFORBRADHciogBiuBMRBRDDnYgogBjuREQBxHAnIgoghjsRUQAx3ImIAojhTkQUQAx3\nIqIAYrgTEQUQw52IKIAY7kREAcRwJyIKIIY7EVEAMdyJiAKI4U5EFEAMdyKiAGK4ExEFEMOdiCiA\nGO5ERAHEcCciCiCGOxFRADHciYgCiOFORBRADHciogBiuBMRBRDDnYgogGoKdxG5SkR2ikiPiKz1\neT4mIj/LP79VRJbWe0WJiKh2VcNdREIA7gJwNYCzAXxERM4uW+wTAPpV9VQA/w7ga/VeUSIiql0t\nNfcVAHpUdZeqpgHcB2BV2TKrAPwoP/8AgCtEROq3mkRENB7hGpZZCOBNz/1eACsrLaOqWREZAHAc\ngIPehURkDYA1+buDIrJzIivdIHNRtj0tpFW3vVW3G+C2N/O2L6lloVrC3a8GrhNYBqq6AcCGGt6z\n6YjIdlVd3uj1aIRW3fZW3W6A2x6Eba+lWaYXwEme+4sA7K20jIiEAXQDOFyPFSQiovGrJdyfBHCa\niCwTkSiAGwBsLltmM4CP5+evB/B/VXVUzZ2IiKZH1WaZfBv6TQAeAxACcLeqvigitwPYrqqbAfwQ\nwE9EpAemxn7DVK50g8zI5qQ6adVtb9XtBrjtM56wgk1EFDw8Q5WIKIAY7kREAcRwr0BE3hCR50Xk\nGRHZnn9sjoj8RkRezd/ObvR6TpaI3C0i+0XkBc9jvtspxrfyw0w8JyIXNW7NJ6/Ctt8mIn357/0Z\nEbnG89yt+W3fKSJXNmatJ09EThKR/xKRl0TkRRH5TP7xwH/vY2x78L53VeXkMwF4A8DcssfuBLA2\nP78WwNcavZ512M53AbgIwAvVthPANQB+BXNewyUAtjZ6/adg228DcLPPsmcDeBZADMAyAK8BCDV6\nGya43fMBXJSf7wTwSn77Av+9j7HtgfveWXMfH+8wCz8C8N8auC51oap/wOhzEipt5yoAP1ZjC4BZ\nIjJ/eta0/ipseyWrANynqilVfR1AD8zQHDOOqu5T1f+Xnz8G4CWYs8wD/72Pse2VzNjvneFemQJ4\nXESeyg+bAAAnqOo+wPwjAXB8w9ZualXaTr+hKMb6YcxUN+WbH+72NL0FctvzI7heCGArWux7L9t2\nIGDfO8O9sr9U1YtgRsP8XyLyrkavUBOoaZiJGe47AE4BcAGAfQD+Lf944LZdRDoA/BzAZ1X16FiL\n+jwWtG0P3PfOcK9AVffmb/cDeBBmV+xtuzuav93fuDWcUpW2s5ahKGY0VX1bVXOq6gL4Poq74IHa\ndhGJwITbvaq6Kf9wS3zvftsexO+d4e5DRBIi0mnnAfw1gBdQOszCxwH8ojFrOOUqbedmAH+X7z1x\nCYABuxsfFGVtyR+A+d4Bs+035C9MswzAaQC2Tff61UN+OO4fAnhJVb/heSrw33ulbQ/k997oI7rN\nOAE4GeYI+bMAXgSwLv/4cQB+C+DV/O2cRq9rHbb1pzC7oRmYWsonKm0nzC7qXTA9Bp4HsLzR6z8F\n2/6T/LY9B/PDnu9Zfl1+23cCuLrR6z+J7b4MpmnhOQDP5KdrWuF7H2PbA/e9c/gBIqIAYrMMEVEA\nMdyJiAKI4U5EFEAMdyKiAGK4ExEFEMOdiCiAGO5ERAH0/wE6Z29FewjA7QAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x10f9c5550>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x10f9c5150>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from matplotlib import pyplot as plt\n",
    "from sklearn.learning_curve import learning_curve\n",
    "from sklearn.model_selection import ShuffleSplit\n",
    "from sklearn.ensemble import GradientBoostingClassifier\n",
    "#from sklearn.naive_bayes import GaussianNB\n",
    "#from sklearn.linear_model import SGDClassifier\n",
    "#from sklearn.ensemble import RandomForestClassifier\n",
    "#from sklearn.ensemble import AdaBoostClassifier\n",
    "\n",
    "#from sklearn.model_selection import KFold\n",
    "#cv = list(KFold(n_splits=40, random_state=20, shuffle=True).split(X_train, y_train))\n",
    "\n",
    "def plot_LCurve(train_sizes, train_scores, test_scores):\n",
    "    train_scores_mean = np.mean(train_scores, axis=1)\n",
    "    train_scores_std = np.std(train_scores, axis=1)\n",
    "    test_scores_mean = np.mean(test_scores, axis=1)\n",
    "    test_scores_std = np.std(test_scores, axis=1)\n",
    "\n",
    "    plt.figure()\n",
    "    plt.fill_between(train_sizes, train_scores_mean - train_scores_std,\n",
    "                     train_scores_mean + train_scores_std, alpha=0.1, color=\"r\")\n",
    "    plt.fill_between(train_sizes, test_scores_mean - test_scores_std,\n",
    "                     test_scores_mean + test_scores_std, alpha=0.1, color=\"g\")\n",
    "    plt.plot(train_sizes, train_scores_mean, 'o-', color=\"r\", label=\"Training score\")\n",
    "    plt.plot(train_sizes, test_scores_mean, 'o-', color=\"g\", label=\"Cross-validation score\")\n",
    "    plt.ylim([0,1])\n",
    "    plt.show()\n",
    "    \n",
    "clf_A = SVC()\n",
    "clf_D = GradientBoostingClassifier(max_depth=1, n_estimators=300)\n",
    "\n",
    "cv = ShuffleSplit(n_splits=50, test_size=0.1, random_state=0).split(X_train, y_train)    \n",
    "train_sizes, train_scores, test_scores = learning_curve(\n",
    "    clf_A, X_train, y_train, cv=cv, n_jobs=1, train_sizes=np.linspace(.1, 1.0, 10))\n",
    "plot_LCurve(train_sizes, train_scores, test_scores)\n",
    "\n",
    "cv = ShuffleSplit(n_splits=50, test_size=0.1, random_state=0).split(X_train, y_train)\n",
    "train_sizes, train_scores, test_scores = learning_curve(\n",
    "    clf_B, X_train, y_train, cv=cv, n_jobs=1, train_sizes=np.linspace(.1, 1.0, 10))\n",
    "plot_LCurve(train_sizes, train_scores, test_scores)\n",
    "\n",
    "cv = ShuffleSplit(n_splits=50, test_size=0.1, random_state=0).split(X_train, y_train)\n",
    "train_sizes, train_scores, test_scores = learning_curve(\n",
    "    clf_C, X_train, y_train, cv=cv, n_jobs=1, train_sizes=np.linspace(.1, 1.0, 10))\n",
    "plot_LCurve(train_sizes, train_scores, test_scores)\n",
    "\n",
    "cv = ShuffleSplit(n_splits=50, test_size=0.1, random_state=0).split(X_train, y_train)\n",
    "train_sizes, train_scores, test_scores = learning_curve(\n",
    "    clf_D, X_train, y_train, cv=cv, n_jobs=1, train_sizes=np.linspace(.1, 1.0, 10))\n",
    "plot_LCurve(train_sizes, train_scores, test_scores)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 141,
   "metadata": {
    "collapsed": false,
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x112f058d0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\nuIuIFND/B7LFdVX0tJItAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x1133750d0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n0P8HMImSQBZpEawAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x1133755d0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAXcAAAEICAYAAACktLTqAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAIABJREFUeJzt3X+cJHV95/HXp7vn1/4UdjfA7rKCcTnFHxfNZuVOUCOg\noI+AQZMH6KkXjXt3kZwJemSRBIEERaImmhjORRBjVgini0GDQYMSMYm6S1QQEEOQH8sisAK7s7Oz\n86s/90dVTX+7pqq7Z6Znerrm/Xw86tHV9a2u+db0zLu+/a1vVZu7IyIixVLqdAVERKT9FO4iIgWk\ncBcRKSCFu4hIASncRUQKSOEuIlJACncRkQJSuEtbmdnhZnajmQ2Z2UNm9uac9b5qZgeCadTM7grK\njzGzb5rZQTP7sZmdknr975vZz8xsn5ldY2Z9qfL3mNlP43rca2bHBWVrzOzzZvaMmT1tZttTrz3F\nzP4tfu0jZvabQVnZzP7EzPaY2aCZfd/MnhWUP8fMvhKX7TWzK1LbPjuuz5CZ/YeZnRSULTGzv4pf\nt8/MvpV67UvN7Fvx7+txM3tPvHxD6nd5wMzczN7b+N2SQnN3TZraNgHXAX8LLANOBPYBL2jhdbcB\nFwXP/xX4GDAAvBF4BlgTl70WeBx4AXBY/NrLg9f+NnAncDxgwC8Chwflt8fbXgn0AC8Jyo4HngBO\nByrAKuAXg/I/Ab4BPDve9guB/risF/gP4DxgKdAPvDh47anAQ8AJRA2rdcC6oPxvgOuBNUAZ+OWg\nbHVcr7cAfcBy4Pk5v8tjgQngmE7/PWjq3NTxCmgqzhQH2ihwXLDsc2Hw5rzumDiMjo2fHweMAMuD\ndW4H/mc8/3ngg0HZycDP4vkS8Ahwcs7Peg3wIFDOKf888Mc5ZYcBB8KwT5VvAW5vsJ//Arwzp+w/\nAfuBFTnlHwQ+1+L78AHgm53+e9DU2UndMtJOxwET7v6TYNkPiVrYjbyNKBR/Gj9/AfCAuw/mbOcF\n8fOw7AgzWwWsj6cXxl0qPzWzS8ws+Vs/AbgP+KyZ/dzMdprZK4NtnQBgZneZ2WNm9jdmdnhc9iJg\nHHhT3CX0EzN7d+q1D8ZdTnvN7DYze1G8vTKwCVhjZveb2W4z+0szG4hf+zKiVv0l8WvvMrM3prb9\nlJn9i5k9YWZfNrMNDX6fn80pk0VC4S7ttIyoGya0j6gLoZG3AddOYzvp8mR+OVGwQ9RCfxHwq8A5\nwDvj5evjsm8CRwIfBf7OzFYH5W8l6graSNQt9BdB2Uqig9ixwJuAi83s1KD8bOATwFrg7+Nt9wJH\nEHUBvQk4Cfgl4CXAHwavfWG8L2uBc4kOQM8Pyt8OvAfYAPyUqAusTtyHfwTwhXSZLC4Kd2mnA8CK\n1LIVwGDGugCY2YlEIRuGUbPtpMuT+UFgOJ6/wt2fcfcHgU8Br4uXDwMPuvvV7j7m7tcTdeO8PCj/\njLv/xN0PEHWHhK8FuNTdh939TqI+8rD82+7+VXcfBT5C1Gf//OC1f+Huj7n7XqJ+//C1Y8CfuPuo\nu/8T0QHoNUH5je6+090PAZcA/9XMVqZ+T28HvhjXXRYxhbu000+AipltDJb9Z+DuBq95O7AjFUZ3\nA88xs7DFH27n7vh5WPa4u/+cqMtlFMi73emdDcqald8ZP0572+7+NLC7hW23Wq9k3pIFcRfPb6Au\nGQGdUNXU3omoJXsd0cnVl9NgtAxRl8czwKszyr5D1PLtB36d+tEypwE/IxrZchjR6JVwtMxfA1+h\n1k3zY+ITmcDhwNNEB5UyUTfJU8DquPwdRF0ezwGWADcQnMgEvkX0SaCPqEX+BPHJW6KTogeBU+Jt\n/z7R6JneuPxSYCfwC3G9byc+eUvUZXM/8EdEo3ReTvRJ5Hlx+avjev9SvO6fkTp5C7yZqN/eOv13\noKnzU8croKlYUxyeXwKGgIeBN8fLTwIOpNY9Jy+MiEbQ3EbUHXEfcEqq/Dyi4ZD7gc8AfUHZivgg\nM0jU5XJR+DPiutxF1L2zCzgpte1LgCfj6XPAYUHZOuAf4tc+APyP1GvPikN6f1z/FwRlPcBfER2o\nfkbUN98flL+AaAjoEHAP8Oupbf8v4NE45L8MHJ0qv4WckT6aFt9k7vqyDhGRolGfu4hIATUN9/jS\n7ifM7Ec55WZmn4jH7t5pZi9tfzVFRGQ6Wmm5X0t0AivP6UTjgTcSXaF35eyrJSIis9E03N39W0Sj\nCfKcCfy1R74DPMvMjmpXBUVEZPoqbdjGOqIRCYnd8bLH0iua2Rai1j1Lly795ec973lt+PEiIovH\nHXfcsdfd1zRbrx3hbhnL8i7k2AZsA9i0aZPv2rWrDT9eRGTxMLOHWlmvHaNldgNHB8/XA3vasF0R\nEZmhdoT7TcDb4lEzJwD73H1Kl4yIiMyfpt0yZnYd8CpgtZntJrpXdA+Au/9f4Gaimx/dT3Tp9W/N\nVWVFRKQ1TcPd3c9pUu7AuxutIyIi80tXqIqIFJDCXUSkgBTuIiIFpHAXESkghbuISAEp3EVECkjh\nLiJSQAp3EZECUriLiBSQwl1EpIC6M9yr1WgSEZFM7bif+/zbuxeefhr6+mBgAJYsgZ6eaCqXO107\nEZGO685wd4+CvFSCAwdg375aWaUC/f1R4Pf2RutVKmBZ3ykiIlJM3RnuiUolmkLVKoyMwNBQreum\nVIoCf2Agekxa+aXu7JUSEWmmu8M9S6kUddf09dWWucP4eNTCf+qp2rLe3qiFPzAQzWcdLEREutDi\nSDKzWms9ND4etfD374/CHqKDQ9KP39enbh0R6UqLI9zz5HXrjI7CwYO1wDeLgn7JEnXriEhXWNzh\nnqWVbh332qeB3t7aVKlEo3WSSeEvIh2icG9FXrfOxASMjcGhQ1GLP2npJ0qlKPCT8E+6eHQAEJE5\npnCfjSSg87hHB4CRERgejubDA4BZFO7pTwDp8NcBQESmSeE+l8yaj8BJDgCHDkX9/BMTU9cpl2uf\nHLIOAOWyTviKSB2Fe6e1cgCoVqPQHx6uH7+f3k7S0i+Xo+0l3ULJY/JJoVSqzYePOkCIFIbCvRsk\ngZzu8w+5R1Ny351Dh+qXpc8HZL2+2cEh78AQzovIgqBwL4qk5T2bgA0PBGNjtedQO2iY1UYLZUmH\nffrAkDUldQ+nrOUi0jKFu9QkXTuzkXxaSKaJiWgYafI8WafRXT3zDh7JwSA80RwuS5+ADg8K4WMr\n83nLRLqEwl3aay5b2eEni+Q8RPpgEh5Esl6f1K3Rp4+88uSgER48wmWN5sNPIulzHFmfUJotE2mi\nu8J9+3a48EJ4+GE46ii44AI466xO10rmSzs+WcxG+MkjnIfawSavPGtZMp8O61aWhQeP9AEjfUBJ\nf9rJ6gZrNknX6Z5w374dtmyJhgsC7NkD73tfdF/3N76xdovf+bBjB1x+eVSHtWth61YdZBaDhdRF\nkz5opLvC0p9imn2qaSbrXEqj8yl551HCSeaU+Uzf7FnatGmT79q1q/UXHHMMPPRQ43UqlSjkkzs9\nJvOtLMsqC6f+/ugPdMcOOP/8aFhiYmAArrhCAd9pOujOnfQBJOkem80BJLlaOxkKnMxnnVMJDxqL\nnJnd4e6bmq3XPS33hx/OL7v44qhFf/BgFLrp+cFBeOKJ2vJkms6BzSwK8eRWA6Hh4ShI7r0XVqyA\n5cth5cr6x2R+6dL2/YEqzGrSB91HH42ew+L8nbT7b2MuumeSEVhjY9FV3OmDRvrnQ/1Q3fSkA0Kd\n7gn3DRuyW+7r1sG73jX97blHQR0eDNJTVtm2bdnbGxqCT386uqNkI6VS7QCwYkVtCp+HB4WsZX19\nCyvM5vIgMz6e//6E0+WX13+aguj5RRdF//hZn9DCZe3qJlgIB9xu+duYSfdM+lqO8AR7nrALKf2p\nIO88BeSfe2i2fIHonm6ZdJ87dKY7ZPPm6J8lbd06+N73oj+4wcHoDpKDg9G94vfvr58Pp/S6g4PN\nP1H090cHkaw/6P5+OOWU2l0qk5uVJbcvSG5k1kpZuDxrvqcHvv51uOyyaL8TfX3w7nfDr/zK1BAe\nGpp60EwvGxqqHVxHRmb3frUq+aauvPBPHxzS6w0MwB13wFVX1de5rw/OOw9e/epaKE1M1Obn4vnH\nPlb/1ZOJlSujuiS3q8jr/kjKGw07bVZeKsE3vgF//uf1v4/+frj00uh/tq9vfvre3eGLX4yyYs+e\naDDG+94HZ5xRK08ew/msoG42ygqmDscNfzdf+hJ86ENRPTZsiP533vKWae1Oq90y3RPusDBGy8x1\nn3u1Gn0vbNbBIDwQXHll/jae+9yoxTs6Gj2OjUVTMp91/5r5FH4D1tKljc91ZE1Ll9aH69Kl8PrX\nR/8waUceCdddl99lNzxcP99K+fDwzE9MSr3wrqn9/fU30Ovrm/o8a1mz8p074Zpr6j9V9/XB7/0e\nnHxy9uiiZq37RuvC1IsK3eHGG+H976/PjiVLot6AaQR8McM98fjjUeuuv7+9lWrVQvjo3ewTRCNJ\nP2cY/OnnjcrC5+edl/9zduyYGsRLljS+jcJMzeeJ7rBLLzwgvP71+aF/1VXZrdu5eH7qqdkHurVr\n4Wtfq42oCVv7eZ8C8srDbSSjc9Ll73hH/u/wgguisB0ZiR6T+fB5Vnl6WfJ8oSuV8ruOnv1sePDB\nljdVvBOqC8lZZ3X+JN3WrdlhtnVr89eWSlO/kGSmPvrR/IPMy142++23Knk/5uOgm5xcHxioX752\nbf7v4nWva3898lxwQfbfxgUXwGGHzV891q3L/32ce277fo57/gFhdBROOy3/oPvpT9cfvMI+/fTz\nvPlGz8PlH/94dh0aDRaZhZbC3cxOAz4OlIFPu/vlqfINwGeBZ8XrbHX3m9tcVwnNZ5g1MpuDTLt1\n+qC7UH4Xi+1vw6xxY6XRQff009tbl0a+8IXsemzYMCc/rmm3jJmVgZ8ApwK7gZ3AOe5+T7DONuD7\n7n6lmR0P3OzuxzTabld3y0i9hdBNtVDod1Fvvn8fWVcG33hj9HPTB5kPfhDe8Ib8K4cbbTdrnWb1\n+spX4A//sH7wwRz2ubfSct8M3O/uD8Qbvh44E7gnWMeBFfH8SiCjw08Kq9Mt5rRWRjTMlYX2u5iu\nvFsntFIWbiN5fO1r4TWvqf8ZBw7UrxveaTT92Op64frpewD92q9F3SIf+UjtIHP++dGV7eF6Wa9N\nP+Yty7rpXPgI0QiyVavgAx+ARx6Z8WiZVrXScn8TcJq7/3b8/K3Ay9z93GCdo4CvAYcBS4FT3P2O\njG1tAbYAbNiw4ZcfanbFaR613Be35MTd+PjUe9UnoxQajXsO1827R8tCuvil2dWh4fJmN0ZrduBL\nB1f6d5Q8pkeDtFLWLADb9Vhw7Wy5Z/3G0keEc4Br3f2jZvZfgM+Z2Qvdve4/zN23Adsg6pZp4WfL\nYpSMxEimdFCXy9Ewt+SCrvDy9WQMdjoI805yjY/X/6zwoJH83LxWJDQ+QCTr5oVxo4ZV+meG36TV\n01M/SqbRhTnpi2zSj4ssGBeTVsJ9N3B08Hw9U7td3gmcBuDu/2pm/cBq4Il2VFIKKB2sIbMowJJx\nz319U+870ky69TgT0zlApB/Hx2s/P31lZN63WjWaF5mmVsJ9J7DRzI4FHgXOBt6cWudh4GTgWjN7\nPtAPPNnOikqXSVrf6VZwIrl4ZenS6LGnp/7r/RZCoLXjACHSIU3D3d3Hzexc4BaiYY7XuPvdZnYp\nsMvdbwLeC1xlZr9P1GXz371TV0fNh/CCjURWGM3Hsqy6zeQxb1mz16TXC09q9fREoxL6+2u3Lgi7\nEUSmyd1xHHen6tXJ+axlVa9OThM+wUR1gqpPPReTvH7K8ng7aZnbwKd2VgNVss/9rBpYxWEDc3vN\nQUvj3OMx6zenll0UzN8DvLy9VeuA8KN2eKVeUhb2T4Z3ooOpLdOsPtW8ftasZVknBFs5SdjoJFbe\nDY+ajRDIe8zqww0DXDoqCbjc8qw0ytlOS+s12V6jQK56lfHqeF0gV706GchVqlSr1egMoAMWbc+w\numWTVTAwDDOL1oHJectoJFnmqUUy161YdmxmrZu17UPjhxivjmeu206L5wrV8FLprG4C91p/aKVS\n6+8N+0sXYqsz+cdbCN0YMmNZwVf1amYIZrVG84LQ3TNDJwzsvGCbXDdOzLzwSm83d3tW+7lmNhnI\nYQinH0ulEhWr5Iay5Ov+cE8CO7m/RdZNsZI74CUn6ZL+3nRgd2Nrs8B/8GHIJUE3OY9Phtl4dXyy\n1Zc8hmEQtt4ASlY7OLdalg6XuvVyytJhnG6ZTlQnpgZx0BJ1vC4E8bhOQb1KVlIQSqbuDHez2t0N\nk9BO7gKXnJgLA3uhnKBbZNIt0DCYw4ALgzmZT1qlSYhNBl30BKgPuiTkShYFXNhFkO5TnfCJurLJ\n+VS3Ql53RKP1wrJ0t0AYxGZGb6VXQSxzpjvDffXq6Eovhfa8SgJ6wiemhPPoxCjj1fHJUJ7wiahF\nSn0w131stzjw4oArWWkynHutV6EnMgvdGe4Lqc+7AML+2iS4xyfGGauOTQb3RHWCcQ9OAgUnrpKA\nLpfKGEalpHAW6bTuDHdpaspJtqDbI2llj02M1c7aT15Q6VNa0uVSmd5KL/2m2z2IdAuF+wLTbBxv\n1jCyJLQnW9mp/uraQ61vumxleso99FX61MIWKSCFewPJibLkJFnW81bCNxwZEbak60aB5IzjBaaM\nmAgfp/RXq0tEROjScB8eG+bQ+KHJCzQmwzS4oiwpa/YYBnYS2smJwMkRcsmFmfGJwaTrIj0yolH4\nhhdShCcRK1ZpeHGFiMhMdGW47x/Zz9OHnqZSqky5YGJybHMQplnPw6vM8tYREelWXRnuAL3lXvor\nOsEnIpJFYwpFRApI4S4iMk923LuDV1z7Co74yBEc8+fHsP2u7XP2sxTuIjJndty7g81XbWb9x9az\n+arN7Lh3x6Ktx457d3D+189nz+AeHOehfQ+x5ctb5izgu7bPXUTy7bh3B5d/+3L2DO5h7fK1bD1x\nK2c9f36/uDsJs+HxYQAeHXyU879+PsC81qVd9ci6rmRy8nHGJ+ofJ6oTjE2MMeHR4yW3XTJZh8TB\nsYNceOuFvOVF7f+SbIW7SMG0O1RzAy1jmqhOMFYdY6I6wSX/NDXMhseH+cBtH8Cw6GK7+B5ESRiG\nd89M7lE0+ZjMJ/cuitfN2saExzekq1a57aHbODR+aEo9zrvlPD51x6dqodxkf8aqYzN8Rxp7eN/D\nc7JdhbsUxkJprc51HUYnRtl3aB/7Rvax79A+9o/sZ//Ifp4ZeYb9I/v5y+/9ZWaovvdr7+Wa71/T\nPKC9vsXZ6pd6tOqp4ac496vnTvt1yUV6JStRtnJtvlSmbOXaYzIfP08He2KsOsZRy46iUqpMTuVS\nmZ5ST91jxSpUypXaY6lStyzzNcE2k+l3/v53ePLg1G8f3bByw7R/F61QuEshLIQugFbrUPUqgyOD\n7B/ZXxfQ+0bqAzsJ8KRs/6EowPPCqpnRiVFW9q1sOZQaBVXWa3tKPVFZfGuL3/3q77L34N4p9Thi\n6RHc8Bs3TAnhuoBOPSa3zZiJzVdt5tHBR6csX7d8Hde+4doZbXMmLnrlRXV/HwBLepZw2cmXzcnP\ns0591emmTZt8165dM3rt4wceZ2hsSOPcF6GqV3nm0DPsPbh3cvr5wZ/z4X/+MIOjg1PWH6gMcPJz\nTq5dFRxeMZzzLUDhFcTAlPLwlg9h+XU/uo4Dowem1KGv3MfGVRsnA3v/yP6GrWHDWNm3khX9K6LH\nvhWs7F85ZT6v7BWfeUVumH3vXd+b6a9+2tIHO4jejytOvaKjfe6dqkdSlw99+0M8NvgYG1Zu4LKT\nL5t2f7uZ3eHum5qtp5a7zNpsuiLcnYNjB2tBPfzzKcG9dzh+PLiXp4afqvuyjWaGx4f58d4f192I\nLfmWo2b3BWr0GG4juT/Q0NhQZh1GJkY4ctmRHLfquFoo96/gWX3PmgzkFX1RkK/sX8my3mV13/Q0\nXVtP3JoZZltP3Drjbc5E8jfQ6a6yhVKPpC6nP/d0VvStYM3SNXP6s9Ry72ILpY85K0jef9L72bxu\nc2ZQT87HYZ7XzbC8dzmrlqxi9ZLVrB5YXZtfEs8PrJ58fvr20zveWm308X8+W8ywMP42JNvw2PCs\nwl0t94KbSR+zuzNeHefQ+KHJaWRihEPjhxgeH64tGx+pXyf9fGJkcv1bH7iVkYmRup8zPD7MH33z\nj6b8/N5yby2cB1axcdXGyYBOB/eqgVXTOngvhNbqQqhD4qznn6UwX+QU7jMwF62iqlc5OHYwcxoe\nG649H48er9x5ZcMREenwTqbkbpgz0Vfuo7/ST3+ln75KNJ8O9tDVZ1xd18Je1rtszm7KthA+ei+E\nOogkuqpbZvtd27nw1gt5eN/DHLX8KC448YJ5/cdxd264+wbe/43313Ul9JZ7eeuL38qLj3hxw0Ce\nsjxYdmhiZiMgsrzy2a+cEsKTz4OAHqgMNF0n3E5WP/BC6ooQ6QbqlknZftd2tnx5CwfHDgKwZ3BP\nS0PdJqoTHBg9wIGxAwyNDkXzwTQ0OsSBsfj5yNT1hsaGGBwZZGhsiKHRocyTeaMTo1z9/aunLO8r\n9zHQM8CSniW1qbKEVQOrWL9ifa2sUiufsn5Pqixe96TPnJQbqp9/4+dn+muetoXUFSEiNV0T7hfe\neuFksCeGx4f5g3/8A/7xgX+cEtRDo0MMjg62PCa4UqqwrHdZNPUsY2nvUlb0rWDt8rWTy5f2LuUT\n3/1E5usN4/bfur0uiCulufv1LpRQVVeEyMLUNeGed4nuwbGD3Pn4nZMBfOSyI1nWs4xlfVFIJ6Gc\nPC7vXV5bFpT3lVv7LtEv3vPFzBbz2uVrOfawY2e9n61aSKGqk3ciC0/XhPuGlRt4aN9DU5avW76O\nb7/j2/NWj4XSYgaFqojk65pb/l528mUs6VlSt6xT3RBXnHoF65avwzDWLV/XkSvdREQa6ZqWe3KJ\nbidHyyTUYhaRha5rwh2igH/Li96iK1RFRJromm4ZERFpXVe13EVEutHkDeeg7ffHz6NwF1nEptzt\nssEyYHJ5Mo8DFpUnt1FOlk1mWDzvOGZWWzcpI7u80frJ88nbMlM/jDm9PHye3ofwKv30fk/uSzA/\nZV8z9jH9ulIp6iQpEX3RSF+5r9Hb0hYthbuZnQZ8HCgDn3b3yzPW+U3gYqLd+qG7v7mN9RSRlKpX\n66bJ2xqH4QR1QZkO3lKpRIlS3f3pS1aqmxotC+91n/ysvGV1BwWY1XP34DbM03yetV/hPfrT+5fe\nLyBzvtG6ndA03M2sDHwSOBXYDew0s5vc/Z5gnY3ABcDL3f1pM/uFuaqwSBElwVwX1vG94tPrQRQg\n4Tcipb8lKSuMs4JXiquVlvtm4H53fwDAzK4HzgTuCdZ5F/BJd38awN2faHdFRebCbG6c16zv1N0n\nv8g5bFXnqZSi7+XsL/fXhXU6qCdbmwpoaaCVcF8HPBI83w28LLXOcQBm9s9EXTcXu/s/pDdkZluA\nLQAbNszNl8JKsSWt2vBb7qf0dc6A2cxbs8lX72Vts1Kq0Ffuo6fUQ0+5J7NVHbauRdqllXDP+otP\n/wtVgI3Aq4D1wO1m9kJ3f6buRe7bgG0Q3fJ32rWVQktCO2ntVqtxl0Rwkq5kJXpKPfRX+ukt99Jb\n7qVkpbovVFZQirQW7ruBo4Pn64E9Get8x93HgJ+a2X1EYb+zLbWUKdIjGrJGBSykj+11oZ0Ed2qE\nQcUq9JSj4O4p99BT6qkL7bKVF9Q+iSxkrYT7TmCjmR0LPAqcDaRHwnwJOAe41sxWE3XTPNDOinaj\nRl+ynJwoS3/pcsNhZUFZepRDcp95d6dKtO0pLd8m8+HPrasDQT2oP3CkuyOSE4Hh65OTfz2lHnoq\nPfSWe6MuiqClreAWaa+m4e7u42Z2LnALUX/6Ne5+t5ldCuxy95visteY2T3ABPB/3P3nc1nx+ZIe\nwZBMiUZBjJPbx1oulaMxr0F5OJIhHJ6VfpxOt0PWcLLZzIe/k/Q8RN9KlW5t6+SfyPxraZy7u98M\n3JxadlEw78B58bSgJa3m9CiGqlenBJC7T3YNJMPNku6CdCCnw3mhdItMaWF3vkoiMg+6/grVrPHB\n4ZCzyVEUsaQLoLfcO2VscNLK1HAzEel2XRnuZsbo+Cjj1fHJsK6UKlFfbs6QM3UPiMhi0pXhvnrJ\nag4fOFzjg0VEcnRluCvURUQaU0KKiBSQwl1EpIAU7iIiBaRwFxEpIIW7iEgBKdxFRApI4S4iUkAK\ndxGRAlK4i4gUkMJdRKSAFO4iIgWkcBcRKSCFu4hIASncRUQKSOEuIlJACncRkQJSuIuIFJDCXUSk\ngBTuIiIFpHAXESkghbuISAEp3EVECkjhLiJSQAp3EZECUriLiBSQwl1EpIAU7iIiBaRwFxEpIIW7\niEgBKdxFRApI4S4iUkAthbuZnWZm95nZ/Wa2tcF6bzIzN7NN7auiiIhMV9NwN7My8EngdOB44Bwz\nOz5jveXA/wa+2+5KiojI9LTSct8M3O/uD7j7KHA9cGbGen8MXAEcamP9RERkBloJ93XAI8Hz3fGy\nSWb2EuBod/9Kow2Z2RYz22Vmu5588slpV1ZERFrTSrhbxjKfLDQrAX8GvLfZhtx9m7tvcvdNa9as\nab2WIiIyLa2E+27g6OD5emBP8Hw58ELgNjN7EDgBuEknVUVEOqeVcN8JbDSzY82sFzgbuCkpdPd9\n7r7a3Y9x92OA7wBnuPuuOamxiIg01TTc3X0cOBe4BbgXuMHd7zazS83sjLmuoIiITF+llZXc/Wbg\n5tSyi3LWfdXsqyUiIrOhK1RFRApI4S4iUkAKdxGRAlK4i4gUkMJdRKSAFO4iIgWkcBcRKSCFu4hI\nASncRUQKSOEuIlJACncRkQJSuIuIFJDCXUSkgBTuIiIFpHAXESkghbuISAEp3EVECkjhLiJSQAp3\nEZECUriLiBSQwl1EpIAU7iIiBaRwFxEpIIW7iEgBKdxFRApI4S4iUkAKdxGRAlK4i4gUkMJdRKSA\nFO4iIgX+k89GAAAGGElEQVSkcBcRKSCFu4hIASncRUQKSOEuIlJALYW7mZ1mZveZ2f1mtjWj/Dwz\nu8fM7jSzW83s2e2vqoiItKppuJtZGfgkcDpwPHCOmR2fWu37wCZ3fzHwBeCKdldURERa10rLfTNw\nv7s/4O6jwPXAmeEK7v5Ndz8YP/0OsL691RQRkeloJdzXAY8Ez3fHy/K8E/hqVoGZbTGzXWa268kn\nn2y9liIiMi2thLtlLPPMFc3+G7AJ+NOscnff5u6b3H3TmjVrWq+liIhMS6WFdXYDRwfP1wN70iuZ\n2SnAhcAr3X2kPdUTEZGZaKXlvhPYaGbHmlkvcDZwU7iCmb0E+BRwhrs/0f5qiojIdDQNd3cfB84F\nbgHuBW5w97vN7FIzOyNe7U+BZcD/M7MfmNlNOZsTEZF50Eq3DO5+M3BzatlFwfwpba6XiIjMgq5Q\nFREpIIW7iEgBKdxFRApI4S4iUkAKdxGRAlK4i4gUkMJdRKSAFO4iIgWkcBcRKSCFu4hIASncRUQK\nSOEuIlJACncRkQJSuIuIFJDCXUSkgBTuIiIFpHAXESkghbuISAEp3EVECkjhLiJSQAp3EZECUriL\niBSQwl1EpIAU7iIiBaRwFxEpIIW7iEgBKdxFRApI4S4iUkAKdxGRAlK4i4gUkMJdRKSAFO4iIgWk\ncBcRKSCFu4hIASncRUQKqKVwN7PTzOw+M7vfzLZmlPeZ2d/G5d81s2PaXVEREWld03A3szLwSeB0\n4HjgHDM7PrXaO4Gn3f25wJ8BH253RUVEpHWttNw3A/e7+wPuPgpcD5yZWudM4LPx/BeAk83M2ldN\nERGZjkoL66wDHgme7wZelreOu4+b2T5gFbA3XMnMtgBb4qcHzOy+mVS6Q1aT2p9FZLHu+2Ldb9C+\nL+R9f3YrK7US7lktcJ/BOrj7NmBbCz9zwTGzXe6+qdP16ITFuu+Ldb9B+16EfW+lW2Y3cHTwfD2w\nJ28dM6sAK4Gn2lFBERGZvlbCfSew0cyONbNe4GzgptQ6NwFvj+ffBHzD3ae03EVEZH407ZaJ+9DP\nBW4BysA17n63mV0K7HL3m4Crgc+Z2f1ELfaz57LSHdKV3Ultslj3fbHuN2jfu56pgS0iUjy6QlVE\npIAU7iIiBaRwz2FmD5rZXWb2AzPbFS873My+bmb/Hj8e1ul6zpaZXWNmT5jZj4JlmftpkU/Et5m4\n08xe2rmaz17Ovl9sZo/G7/sPzOx1QdkF8b7fZ2av7UytZ8/Mjjazb5rZvWZ2t5m9J15e+Pe9wb4X\n7313d00ZE/AgsDq17Apgazy/Ffhwp+vZhv18BfBS4EfN9hN4HfBVousaTgC+2+n6z8G+Xwy8L2Pd\n44EfAn3AscB/AOVO78MM9/so4KXx/HLgJ/H+Ff59b7DvhXvf1XKfnvA2C58F3tDBurSFu3+Lqdck\n5O3nmcBfe+Q7wLPM7Kj5qWn75ex7njOB6919xN1/CtxPdGuOruPuj7n7v8Xzg8C9RFeZF/59b7Dv\nebr2fVe453Pga2Z2R3zbBIAj3P0xiP5IgF/oWO3mVt5+Zt2KotE/Rrc6N+5+uCboeivkvsd3cH0J\n8F0W2fue2nco2PuucM/3cnd/KdHdMN9tZq/odIUWgJZuM9HlrgR+Efgl4DHgo/Hywu27mS0Dvgj8\nnrvvb7RqxrKi7Xvh3neFew533xM/PgHcSPRR7PHk42j8+ETnajin8vazlVtRdDV3f9zdJ9y9ClxF\n7SN4ofbdzHqIwm27u++IFy+K9z1r34v4vivcM5jZUjNbnswDrwF+RP1tFt4O/F1najjn8vbzJuBt\n8eiJE4B9ycf4okj1Jf860fsO0b6fHX8xzbHARuB7812/dohvx301cK+7fywoKvz7nrfvhXzfO31G\ndyFOwHOIzpD/ELgbuDBevgq4Ffj3+PHwTte1Dft6HdHH0DGiVso78/aT6CPqJ4lGDNwFbOp0/edg\n3z8X79udRP/YRwXrXxjv+33A6Z2u/yz2+0SiroU7gR/E0+sWw/veYN8L977r9gMiIgWkbhkRkQJS\nuIuIFJDCXUSkgBTuIiIFpHAXESkghbuISAEp3EVECuj/AxfAk0frmImfAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x1133c6310>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from matplotlib import pyplot as plt\n",
    "from sklearn.learning_curve import learning_curve\n",
    "from sklearn.model_selection import ShuffleSplit\n",
    "from sklearn.ensemble import GradientBoostingClassifier\n",
    "#from sklearn.naive_bayes import GaussianNB\n",
    "#from sklearn.linear_model import SGDClassifier\n",
    "#from sklearn.ensemble import RandomForestClassifier\n",
    "#from sklearn.ensemble import AdaBoostClassifier\n",
    "\n",
    "#from sklearn.model_selection import KFold\n",
    "#cv = list(KFold(n_splits=40, random_state=20, shuffle=True).split(X_train, y_train))\n",
    "\n",
    "def plot_LCurve(train_sizes, train_scores, test_scores):\n",
    "    train_scores_mean = np.mean(train_scores, axis=1)\n",
    "    train_scores_std = np.std(train_scores, axis=1)\n",
    "    test_scores_mean = np.mean(test_scores, axis=1)\n",
    "    test_scores_std = np.std(test_scores, axis=1)\n",
    "\n",
    "    plt.figure()\n",
    "    plt.fill_between(train_sizes, train_scores_mean - train_scores_std,\n",
    "                     train_scores_mean + train_scores_std, alpha=0.1, color=\"r\")\n",
    "    plt.fill_between(train_sizes, test_scores_mean - test_scores_std,\n",
    "                     test_scores_mean + test_scores_std, alpha=0.1, color=\"g\")\n",
    "    plt.plot(train_sizes, train_scores_mean, 'o-', color=\"r\", label=\"Training score\")\n",
    "    plt.plot(train_sizes, test_scores_mean, 'o-', color=\"g\", label=\"Cross-validation score\")\n",
    "    plt.title(test_scores_mean[len(test_scores_mean)-1])\n",
    "    plt.ylim([0,1])\n",
    "    plt.show()\n",
    "\n",
    "clf_1 = SVC(kernel='rbf', C=0.7, gamma=0.046)\n",
    "clf_2 = SVC(kernel='rbf', C=0.7, gamma=0.047)\n",
    "clf_3 = SVC(kernel='rbf', C=0.7, gamma=0.048)\n",
    "clf_4 = SVC(kernel='rbf', C=0.7, gamma=0.049)\n",
    "   \n",
    "\n",
    "cv = ShuffleSplit(n_splits=50, test_size=0.1, random_state=0).split(X_train, y_train)    \n",
    "train_sizes, train_scores, test_scores = learning_curve(\n",
    "    clf_1, X_train, y_train, cv=cv, n_jobs=1, train_sizes=np.linspace(.1, 1.0, 10))\n",
    "plot_LCurve(train_sizes, train_scores, test_scores)\n",
    "\n",
    "cv = ShuffleSplit(n_splits=50, test_size=0.1, random_state=0).split(X_train, y_train)\n",
    "train_sizes, train_scores, test_scores = learning_curve(\n",
    "    clf_2, X_train, y_train, cv=cv, n_jobs=1, train_sizes=np.linspace(.1, 1.0, 10))\n",
    "plot_LCurve(train_sizes, train_scores, test_scores)\n",
    "\n",
    "cv = ShuffleSplit(n_splits=50, test_size=0.1, random_state=0).split(X_train, y_train)\n",
    "train_sizes, train_scores, test_scores = learning_curve(\n",
    "    clf_3, X_train, y_train, cv=cv, n_jobs=1, train_sizes=np.linspace(.1, 1.0, 10))\n",
    "plot_LCurve(train_sizes, train_scores, test_scores)\n",
    "\n",
    "cv = ShuffleSplit(n_splits=50, test_size=0.1, random_state=0).split(X_train, y_train)\n",
    "train_sizes, train_scores, test_scores = learning_curve(\n",
    "    clf_4, X_train, y_train, cv=cv, n_jobs=1, train_sizes=np.linspace(.1, 1.0, 10))\n",
    "plot_LCurve(train_sizes, train_scores, test_scores)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 144,
   "metadata": {
    "collapsed": false,
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\nIpJD/x+aokGBothqZAAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x10fb3d9d0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAXcAAAEICAYAAACktLTqAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAHl5JREFUeJzt3X+UXGWd5/H3t6r6R7oJP0KaCAkEnI0DCDsCfTI4gOii\nDDBnwGE4I8gos4NmZ4/s6jIrhEEZRJlRZgZnZHAUhUUhgqhxDAqLLIuL7gyQRvmdhQmEHyFIOgoh\nne50d1V99497b+V2dVX1raQ61f3053XOPXXrPk9VfW9X8rm3nrp1r7k7IiISlly7CxARkdZTuIuI\nBEjhLiISIIW7iEiAFO4iIgFSuIuIBEjhLiISIIW7tJSZLTCz75vZdjN70cw+2KDvsWb2gJkNmdlr\nZvbxGn1ONjM3s89VLX+rmf3QzLaZ2RYzu6aq/VwzWxfX8ZyZnZRq6zGzL8eP22pmDzRTl5l93Mw2\nxM+9zszelmrrM7NvmdkbZva6ma2qeux7zezn8WNfNrM/SrXlzexzZrYpXq9fmNm+WdY5rjU9lczs\nunp/ewlfod0FSHCuB8aARcA7gB+Z2WPu/lS6k5ktBP4n8N+A7wKdwJKqPh3APwAPVS3vBO6NX+sD\nQAlIB+z7gC/EbQ8DB1bVeAPRv/0jgF/HdWaqy8w+AlwI/B6wDngr8HrquVcDa4GlwDBwVOqxRwLf\nAi6I698H2Df12M8AvwO8E3gJeDuwI8s6u/teqdfpBV4DvoPMWaZfqEqrxKHyOnCUuz8bL7sFeMXd\nV1b1/SvgYHf/UIPnWwksAA4ANrr7p+LlK4APuftJdR73L8CN7n5jjbbfJArfJe7+Zo32unWZWQ54\nEfgTd7+vRvupRBuO33D3Uo32bwHPufuna7TtB7wM/Ja7P1ejveE6V/W9APjLuA79B5+jNCwjrfQ2\noJQEe+wxoj3QascDvzazfzGzzWZ2p5kdkjSa2VLgT4Gr6jz2BTO7Ox6e+ImZHR0/Lg/0A31mtt7M\nNprZP5rZvPixv00U0J+JH/uEmf1hxrqWxNNR8ZDKBjP7TBz6yWOfAb5hZr8ys7VmdnLVcxO/5qtm\ndquZLYjbjgaKwDlm9ksze9bMPpZlnWu4APimgn1uU7hLK+0FbK1athWYX6PvEqIQ+jhwCLABuC3V\n/iXg0+4+VOex58Z9DgJ+BPwgHrpYBHQA5wAnEQ25HAN8KvXYo+K6DgIuIgrjIzLUlQzPnEoUxu8B\nziMapknaTwXuB94C/F1c18JU+4eAPwSWAfOA61Jt+xBtIA+L678yHmKaap0r4g3RycA3avzdZA5R\nuEsrDQF7Vy3bG9hWo+8I8H13X+vuO4jHm81sHzP7fWC+u3+7zuuMAD9z97vdfQz4W2B/ojH0kbjP\nde7+qrtvAa4Fzkg9dhz4nLuPufv/IQrjU6eqK/Xc17j7G+7+AvDVqud+wd1vdPdxd7+daKjlhFT7\n/3D3Z+ON1l9VPRbgKncfcffHgdur2uutc9qH434b6vztZI5QuEsrPQsUzGxZatlvAU/V6Ps4kB42\nSOYNOAXoj4cnfkn0BeInzOwHdR6780ncXwc21muPH9tIo7qeIfqyuNFzNxoKadSe1LWrz534MNpr\nFwB316SpZRPR3uZtQC/RHutW4O01+v0Hoi9f30E0jPJF4Kdx23yiYY1k+nbcviBu/02iI1HeC+SJ\njmx5DuiM268i+tL0AGA/4KfAZ+O2DmA98GmiI2ZOIPpkcfhUdcXt3wR+GNe4BPh/wIVx24L4sRfE\ndZ1DdDTOwrj9T4mGed4K9AB3ALeknvsBok8CXUR75JuBU7Ksc9znd4DtRJ962v5vQVN7p7YXoCms\nKQ64f45D5iXgg/Hyk4Chqr7/GXglDsQ7iY5SqfWcNxMNo6SXnR2H9JvAT9IbkDiUvwy8AfySaJy6\nO9X+duBf4xqfBv4ga11Ew0y3xxuEl4EriI86S63nE0RDVAPASVXP/RlgMJ5uAfZLtS0mOgxzCHge\n+E9Z1zlu/2p6Y6Fpbk86FFJEJEAacxcRCdCU4W5mN8XH+z5Zp93M7EvxMcWPm9mxrS9TRESakWXP\n/WbgtAbtpxMds7sMWAH80+6XJSIiu2PKcHf3B4i+8a/nLOJfw7n7g8C+ZlZ9Lg8REdmDWnHisMVE\nRw0kNsbLXq3uGJ8fYwVAb2/vcYcffnj2V3nkkfptvb3Zn2d3bd+uOlTHzK1BdczOOo47LvPTPPLI\nI1vcvW/KjlkOqQEOBZ6s0/Yj4MTU/fuA46Z6zuOOO86bsnSpO0yeli5t7nl2l+pQHTO5BtURfB3A\ngGfI7VYcLbMRODh1fwmwqQXPO9HVV0NPz8RlPT3R8j1JdaiOmVyD6lAdiSxbABrvuf8ecDfRz7OP\nBx7O8pxN77m7u996a7SVM4tub721+edoBdWhOmZyDaoj6DrIuOc+5Y+YzOw24N3AQqILAPwl0S8A\ncfevmJkB/0h0RM0w8B/dfWCqjUp/f78PDEzZTUREUszsEXfvn6rflF+ouvt5U7Q78LFGfUREZM/S\nL1RFRAKkcBcRCZDCXUQkQAp3EZEAKdxFRAKkcBcRCZDCXUQkQAp3EZEAKdxFRAKkcBcRCZDCXUQk\nQAp3EZEAKdxFRAKkcBcRCZDCXUQkQAp3EZEAKdxFRAKkcBcRCZDCXUQkQAp3EZEAKdxFRAKkcBcR\nCZDCXUQkQAp3EZEAKdxFRAKkcBcRCZDCXUQkQAp3EZEAKdxFRAKkcBcRCZDCXUQkQAp3EZEAKdxF\nRAKkcBcRCZDCXUQkQJnC3cxOM7NnzGy9ma2s0X6Imd1vZr8ws8fN7IzWlyoiIllNGe5mlgeuB04H\njgTOM7Mjq7p9CrjD3Y8BzgW+3OpCRUQkuyx77suB9e7+vLuPAbcDZ1X1cWDveH4fYFPrShQRkWZl\nCffFwMup+xvjZWlXAn9sZhuBu4D/UuuJzGyFmQ2Y2cDg4OAulCsiIllkCXerscyr7p8H3OzuS4Az\ngFvMbNJzu/sN7t7v7v19fX3NVysiIplkCfeNwMGp+0uYPOxyIXAHgLv/K9ANLGxFgSIi0rws4b4W\nWGZmh5lZJ9EXpmuq+rwEnAJgZkcQhbvGXURE2mTKcHf3InARcA+wjuiomKfM7CozOzPu9ufAR83s\nMeA24E/cvXroRkRE9pBClk7ufhfRF6XpZVek5p8GTmhtaSIisqv0C1URkQAp3EVEAqRwFxEJkMJd\nRCRACncRkQAp3EVEApTpUEgRkZnM3XE8023OcuRzeXKWq0whUriLyLQre7mpAC57mbKXKZVLlIlv\n42XJ5O6UKVMul6MzYDlT3np8WiyrOmVWR76DQq5QmTrznRM2AHnbOW9W63RbM4/CXUTqSgK3EqZe\nnnS/7GWK5WLN25KXKJejx5hZpgDGovA1s0oIJ/NmRs5yFKwwYdnurmOyHjuKOyZsPICdtceS109v\nEDrznRM+CaQ3DO2icBdpQr090CT00svSqgMoveeYbpuO5Y3CuVQuUfJ4Kpd2hnJqj9mwSsC5+4T7\nyWslQZvs2SYB2GmdM35P18zIW548+Uz93Z2SlxgvjzNaGq1sDCZ22jlbyBUo5At05HZuDHo6eugq\ndLVwLSZTuEtwqsO3USDXmpKgq/Xxv94eaBLmE9omFJWaT7UlYRl12RmY9ZY3eq6Gy63q9SzpZpW9\ny3Qwd+Q7ZtUQxJ5kZhQse3QmG8vkU8FYaYyFPQvpK0zvac8V7jKrFctFxkvjjJXGGB4fZmR8hKIX\nJ42zNhoSyFluj3z8l7kpZzly+T0/PKNwn0L1Hl7JS5UtcbFcnPAlTD6XJ295hcA0cPcoyMvjjBZH\noyAvjlAql4B4byoXjYN257rbXK1I+83JcE8COwnqdFgn01hprLKs1sflZM8uGcOMGgEjGmvMd9JV\n6KIz31kJ/kKuoPDPoOxlxkvjjJfH2TG+g+HiMKPF0ejv7JDL5SjkCnQXuoM9jE1kdwUT7smXHBMO\noYq/tR8vjzNeGq8Ed8lLqQfunM3lcpUxyHwuT2ehk25rfi8wed3R0dEJX7QlY53JN+1dhS668l1z\nOvxL5VLl/RkpjjA8NsxYeayyocxbvvIF1Fz6u4jsrlkZ7tvHtjM0NlTZu0tCvdaXUMl4anJoUleh\na9r39nKWozPfSb0v35Pw3za6ja2+NXP4J0E3W0Ou1vj4eHkcoPIedeQ72KuwV5srFZn9ZmW4D40N\nsXV0a2XIYzYcbpWWJfxL5dKE8E9/MZiEf2e+k+5CN/lcvu5xwVPNAy3/stDdK3vjlSAvjlR+bJIO\n8u4OjY+LTIdZGe5A5YcDIUq+Xe/Id9RsT8J/aGyIN0ffpOzlyYfg7co80dBULj7lUPLJp1LTFPNl\nLzNSHKk5Pj6vMG9WbYBFZrtZG+5z2VThv6vSv8hLzwOVL6CTfsny6h/raHxcZGZQuEtFephm0o9w\nRGRW0XFkIiIBUriLiARI4S4iEiCFu4gEb/W61Sz/2nKWXLuE5V9bzup1q9td0rRTuIsEaKaE2Uyo\nY/W61Vxy7yW8su0VHOeVba9wyb2XtK2Wd938Lhb97SIO/ftDWfXEqml7LR0tI9JCq9et5vM/+zyb\ntm3ioPkHsfLElZx9xNl7vIZL7r2EkeIIQCXMgD1ay1R1pH/sNloarfzoLT0/Vh5jrDjGeLlGW40p\nea5kfqw0xt3r767UkBgpjnDp/7qUR3/5KN2FbroL3XTluyrzlWWFycuqp0IuW4xW/z1e3PoiK+5c\nAcD5R5/fqj97hVUfp7yn9Pf3+8DAwC499rWh19g+vp3ugn7dKDu1O1ir//MCzCvM45r3XVO3Dnev\n/Ip3uBidkmF4fLjmNKGtWGf5+DAb3tgw+eIRsUKuMOHXzMlhr+mT4TVqn3Rhjgbtm7Ztmngep5hh\ndOY7GS2NtuYPn9KVj07Wl/yCuzPfyUtbX6rbf37nfHYUd1ROg7Er8pbPtFG4f8P9kzYyAEv3WcoL\nn3gh8+uZ2SPu3j9VP+25SxDq7SWOl8Y5Y9kZlRPGjZfGJ9ymzwQ6Xh6fdHbQysnm4hOcJbe1ln1l\n4Cs19xA/ee8n+c7T36kb1LUCsJHufDfzOubR09EzYerr7aOno4fnXn+u7mP/rP/PKqeymHQBk+pl\nU7RD1ZWpqtq/t+57NWtwnI8c+xE6ch10FjrpzHVWArlWONdq68p3RY9P9al33qXlX1vOK9tembR8\n8fzFPPzRh4HoBHajpVF2FHdUfmW9o7hjwlS9bLQ0ykhxpG570mfL8JbK89bSaOOzOxTuu6Dde4hz\n0Wgx+k+yeftmBocHo9vtg2we3szmoc3ct+G+SXtfI8URLv7xxVz844vbVHVkR3EHQ2ND9HT0sGDe\nAnoKURjXCuhkmtcxr9IvvWxeYR75XOPLwTUKs8tOvGy6VnOSBzc+WLeOvzjpL/ZYHStPXFnzE9XK\nE1dW7udzeXpy0d95utR7Xw7Z55BpeT2Fe5NmynhmUstM2Mjsah1lL/PGjjd4bei1SYE9uH1wZ5AP\nbeaN0TdqPseCeQs4oOeAhh+rrzj5CgoWnVkzfR3L5GybHbmOCbfp9lpT3qKTniVn6UymE246oW6Y\n3Xnendn/oLspS5jNpTqSf4vt/r9S6+/R09HD1adcPS2vpzH3OkaLo2wZ2cKW7VsYHB5ky3B0e91D\n17F9fPuk/vMK83j/4e+fvEdWqNobq7WXlmFvrNqujO9Oh1p1dBe6ufSESznmLcewefvmaKoO7O2b\n2TK8hWK5OOk55xXmsah3EX29ffT19nFAzwHRbe8Blamvp4+FPQsr59fJ8tF7us2U9ySppd1hNpPq\nmClWr1vNX//sr3l126scss8hXH3K1U1/mZp1zH1WhfuqJ1Zx+X2X89LWlzhw/oFcduJlTf1DGRkf\nqYT0luEtDG4fnBDc6SDfOrq12VViUe+iXR5H7cp3TQ7/Bh/fv/7zr9escd/ufbn0hEt3Xl3Ki5TL\n5cr4crI8uQh0yavmUxc5KXmJcrk84Tmq+67dtJax0tiU65ezHH09tcO6ellvR2/TJx6bKcGqMJOp\njIyPsHfX3vT17toFsoML91VPrGLFnSsYHh+uLJtXmMdn3/NZ3nnwOyeFc/p+smxobKjmc+/dtXd0\nNfJ4b7Cvp4+FvdFtZVlvNH/yzSdPuYdY7wiIWkc71Ds6orK8OHl5K44ySIYXkqtOFaxALpcjb/nK\nhUGSC5yk+1bm475rN62t+xqrzl5FX28fi3oXsV/3fk1/OmmWglVmA4V7lUP//lBe3Ppi5v77du87\nKZhrBff+Pfs3NbwzE/YQS+USx3/9eDYNbZrU9pa93sJdH7xrQkDXCuxWmQnDISKzyZ4K90xfqJrZ\nacA/EF076Ovu/vkaff4IuJLosg+PufsHm6p4Co0OF7r2d6+dsJe9f8/+03Yhj5nw5Uw+l+eyky6r\nuZG5/KTLWbTXoj1Wy0z50kxEJpoy3M0sD1wPvA/YCKw1szXu/nSqzzLgMuAEd3/dzA5odaGH7HNI\nzT33xfMX84G3f6DVL9fQ2Uec3faP+zNhIzOT6hCRibLsuS8H1rv78wBmdjtwFvB0qs9Hgevd/XUA\nd9/c6kKvPuXqmmPuc3kPcSZsZGZSHSKyU5bB18XAy6n7G+NlaW8D3mZm/9fMHoyHcSYxsxVmNmBm\nA4ODg00Vev7R53PD79/A0n2WYhgHzT+oLYeYiYjMBln23Gsdk1b9LWwBWAa8G1gC/NTMjnL3Cb88\ncfcbgBsg+kK12WLPP/p8zj/6fJ1bRkRkCln23DcCB6fuLwGqD9PYCPzA3cfdfQPwDFHYi4hIG2QJ\n97XAMjM7zMw6gXOBNVV9/hl4D4CZLSQapnm+lYWKiEh2U4a7uxeBi4B7gHXAHe7+lJldZWZnxt3u\nAX5lZk8D9wOfdPdfTVfRIiLSWKbj3N39LuCuqmVXpOYduDieRESkzXRWSJHAJOcPKnu5ctGOnOUq\nF+NIJgmbwl1klkgCu+Ql3H3nyenii28kJ1srWIFCvkB3vpuOXAeOT7joSNGj+fRjIDonksUHx5lV\nXXFJG4Zdkj69i8cHGfqkgw2nh8JdpI3cvRLYyZ522csTAjsJ3UK+QEcuvgpRfKWi5MRvOctVTu6W\n9YyayVWU0q/r+KQzh7Zqw1C93pX5VNhVn+uqUVvWfhPC1Hcuq9SfNBsN71e/H1keA5DLReuei7/i\nzFt+2k6PkqZwl0zSl09LQiCZh52XbZtOzZ4G2Gr+RKP281X3rX6tdHujtnR7EpilcikKzXI5eUAl\nIMyMQi4K7Y5CR+VycdWBPR1n1MxZDgzyNP/czW4Yqq/pmg779HyyUWi2rXrj0agteX/SG6NG93f3\nMe2icA9Y+vqWE651WXWdTIyJH+1rzOdzeXLkKmGUfDxPz0/Hx/Wk1l2RDpTq56neGFWHTzOPTZ+7\n36M/GBCFSke+g56Onii88x2TAnu2DnHszoZB9gyFe5vUDNoaFyBOL8OpBHFl7y8O4Mpyds4n4ZGz\nXHSZufzOvcF0W/LROf0xunq+3XshItIchXsT0h+z0x9DK2Nw1nhcMM0wcrkcOeKAzeXIk8dytnOv\njtyEEAbqBm9ym7OcwlhEFO41A7u8cxw5HZLJRZa7Cl2VCy1X7/k2cysiMl2CDPfdDexaX2g1cxSC\niEi7zdpwHy2OUiwVAQW2iEi1WRnue3XuVfeQMQW2iMgsDffezl566W13GSIiM9bsPMhWREQaUriL\niARI4S4iEiCFu4hIgBTuIiIBUriLiARI4S4iEiCFu4hIgBTuIiIBUriLiARI4S4iEiCFu4hIgBTu\nIiIBUriLiARI4S4iEiCFu4hIgBTuIiIBUriLiARI4S4iEiCFu4hIgBTuIiIBUriLiARI4S4iEqBM\n4W5mp5nZM2a23sxWNuh3jpm5mfW3rkQREWnWlOFuZnngeuB04EjgPDM7ska/+cB/BR5qdZEiItKc\nLHvuy4H17v68u48BtwNn1ej3WeAaYEcL6xMRkV2QJdwXAy+n7m+Ml1WY2THAwe7+w0ZPZGYrzGzA\nzAYGBwebLlZERLLJEu5WY5lXGs1ywBeBP5/qidz9Bnfvd/f+vr6+7FWKiEhTsoT7RuDg1P0lwKbU\n/fnAUcBPzOwF4Hhgjb5UFRFpnyzhvhZYZmaHmVkncC6wJml0963uvtDdD3X3Q4EHgTPdfWBaKhYR\nkSlNGe7uXgQuAu4B1gF3uPtTZnaVmZ053QWKiEjzClk6uftdwF1Vy66o0/fdu1+WiIjsDv1CVUQk\nQAp3EZEAKdxFRAKkcBcRCZDCXUQkQAp3EZEAKdxFRAKkcBcRCZDCXUQkQAp3EZEAKdxFRAKkcBcR\nCZDCXUQkQAp3EZEAKdxFRAKkcBcRCZDCXUQkQAp3EZEAKdxFRAKkcBcRCZDCXUQkQAp3EZEAKdxF\nRAKkcBcRCZDCXUQkQAp3EZEAKdxFRAKkcBcRCZDCXUQkQAp3EZEAKdxFRAKkcBcRCZDCXUQkQAp3\nEZEAZQp3MzvNzJ4xs/VmtrJG+8Vm9rSZPW5m95nZ0taXKiIiWU0Z7maWB64HTgeOBM4zsyOruv0C\n6Hf3fw98F7im1YWKiEh2WfbclwPr3f15dx8DbgfOSndw9/vdfTi++yCwpLVliohIM7KE+2Lg5dT9\njfGyei4E7q7VYGYrzGzAzAYGBwezVykiIk3JEu5WY5nX7Gj2x0A/8De12t39Bnfvd/f+vr6+7FWK\niEhTChn6bAQOTt1fAmyq7mRm7wUuB05299HWlCciIrsiy577WmCZmR1mZp3AucCadAczOwb4KnCm\nu29ufZkiItKMKcPd3YvARcA9wDrgDnd/ysyuMrMz425/A+wFfMfMHjWzNXWeTkRE9oAswzK4+13A\nXVXLrkjNv7fFdYmIyG7QL1RFRAKkcBcRCZDCXUQkQAp3EZEAKdxFRAKkcBcRCZDCXUQkQAp3EZEA\nKdxFRAKkcBcRCZDCXUQkQAp3EZEAKdxFRAKkcBcRCZDCXUQkQAp3EZEAKdxFRAKkcBcRCZDCXUQk\nQAp3EZEAKdxFRAKkcBcRCZDCXUQkQAp3EZEAKdxFRAKkcBcRCZDCXUQkQAp3EZEAKdxFRAKkcBcR\nCZDCXUQkQAp3EZEAKdxFRAKkcBcRCZDCXUQkQJnC3cxOM7NnzGy9ma2s0d5lZt+O2x8ys0NbXaiI\niGQ3ZbibWR64HjgdOBI4z8yOrOp2IfC6u/874IvAF1pdqIiIZJdlz305sN7dn3f3MeB24KyqPmcB\n34jnvwucYmbWujJFRKQZhQx9FgMvp+5vBH67Xh93L5rZVmB/YEu6k5mtAFbEd4fM7JldKbpNFlK1\nPnPIXF33ubreoHWfyeu+NEunLOFeaw/cd6EP7n4DcEOG15xxzGzA3fvbXUc7zNV1n6vrDVr3ENY9\ny7DMRuDg1P0lwKZ6fcysAOwD/LoVBYqISPOyhPtaYJmZHWZmncC5wJqqPmuAC+L5c4D/7e6T9txF\nRGTPmHJYJh5Dvwi4B8gDN7n7U2Z2FTDg7muAG4FbzGw90R77udNZdJvMyuGkFpmr6z5X1xu07rOe\naQdbRCQ8+oWqiEiAFO4iIgFSuNdhZi+Y2RNm9qiZDcTLFpjZvWb2b/Htfu2uc3eZ2U1mttnMnkwt\nq7meFvlSfJqJx83s2PZVvvvqrPuVZvZK/L4/amZnpNoui9f9GTP73fZUvfvM7GAzu9/M1pnZU2b2\n8Xh58O97g3UP7313d001JuAFYGHVsmuAlfH8SuAL7a6zBev5LuBY4Mmp1hM4A7ib6HcNxwMPtbv+\naVj3K4H/XqPvkcBjQBdwGPAckG/3Ouzieh8IHBvPzweejdcv+Pe9wboH975rz7056dMsfAN4fxtr\naQl3f4DJv0mot55nAd/0yIPAvmZ24J6ptPXqrHs9ZwG3u/uou28A1hOdmmPWcfdX3f3n8fw2YB3R\nr8yDf98brHs9s/Z9V7jX58CPzeyR+LQJAIvc/VWI/pEAB7StuulVbz1rnYqi0X+M2eqiePjhptTQ\nW5DrHp/B9RjgIebY+1617hDY+65wr+8Edz+W6GyYHzOzd7W7oBkg02kmZrl/An4DeAfwKvB38fLg\n1t3M9gK+B3zC3d9s1LXGstDWPbj3XeFeh7tvim83A98n+ij2WvJxNL7d3L4Kp1W99cxyKopZzd1f\nc/eSu5eBr7HzI3hQ625mHUThtsrdV8eL58T7XmvdQ3zfFe41mFmvmc1P5oFTgSeZeJqFC4AftKfC\naVdvPdcAH46Pnjge2Jp8jA9F1VjyHxC97xCt+7nxhWkOA5YBD+/p+lohPh33jcA6d7821RT8+15v\n3YN839v9je5MnIC3En1D/hjwFHB5vHx/4D7g3+LbBe2utQXrehvRx9Bxor2UC+utJ9FH1OuJjhh4\nAuhvd/3TsO63xOv2ONF/7ANT/S+P1/0Z4PR2178b630i0dDC48Cj8XTGXHjfG6x7cO+7Tj8gIhIg\nDcuIiARI4S4iEiCFu4hIgBTuIiIBUriLiARI4S4iEiCFu4hIgP4/E9n9+c3I3c8AAAAASUVORK5C\nYII=\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x1133fcdd0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\nAABJRU5ErkJggg==\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x1131cb790>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x112f81fd0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from matplotlib import pyplot as plt\n",
    "from sklearn.learning_curve import learning_curve\n",
    "from sklearn.model_selection import ShuffleSplit\n",
    "from sklearn.ensemble import GradientBoostingClassifier\n",
    "#from sklearn.naive_bayes import GaussianNB\n",
    "#from sklearn.linear_model import SGDClassifier\n",
    "#from sklearn.ensemble import RandomForestClassifier\n",
    "#from sklearn.ensemble import AdaBoostClassifier\n",
    "\n",
    "#from sklearn.model_selection import KFold\n",
    "#cv = list(KFold(n_splits=40, random_state=20, shuffle=True).split(X_train, y_train))\n",
    "\n",
    "def plot_LCurve(train_sizes, train_scores, test_scores):\n",
    "    train_scores_mean = np.mean(train_scores, axis=1)\n",
    "    train_scores_std = np.std(train_scores, axis=1)\n",
    "    test_scores_mean = np.mean(test_scores, axis=1)\n",
    "    test_scores_std = np.std(test_scores, axis=1)\n",
    "\n",
    "    plt.figure()\n",
    "    plt.fill_between(train_sizes, train_scores_mean - train_scores_std,\n",
    "                     train_scores_mean + train_scores_std, alpha=0.1, color=\"r\")\n",
    "    plt.fill_between(train_sizes, test_scores_mean - test_scores_std,\n",
    "                     test_scores_mean + test_scores_std, alpha=0.1, color=\"g\")\n",
    "    plt.plot(train_sizes, train_scores_mean, 'o-', color=\"r\", label=\"Training score\")\n",
    "    plt.plot(train_sizes, test_scores_mean, 'o-', color=\"g\", label=\"Cross-validation score\")\n",
    "    plt.title(test_scores_mean[len(test_scores_mean)-1])\n",
    "    plt.ylim([0,1])\n",
    "    plt.show()\n",
    "\n",
    "clf_1 = KNeighborsClassifier(n_neighbors=3, weights='uniform', algorithm='ball_tree')\n",
    "clf_2 = KNeighborsClassifier(n_neighbors=3, weights='distance', algorithm='ball_tree')\n",
    "clf_3 = KNeighborsClassifier(n_neighbors=3, weights='uniform', algorithm='kd_tree')\n",
    "clf_4 = KNeighborsClassifier(n_neighbors=3, weights='distance', algorithm='kd_tree')\n",
    "   \n",
    "\n",
    "cv = ShuffleSplit(n_splits=50, test_size=0.1, random_state=0).split(X_train, y_train)    \n",
    "train_sizes, train_scores, test_scores = learning_curve(\n",
    "    clf_1, X_train, y_train, cv=cv, n_jobs=1, train_sizes=np.linspace(.1, 1.0, 10))\n",
    "plot_LCurve(train_sizes, train_scores, test_scores)\n",
    "\n",
    "cv = ShuffleSplit(n_splits=50, test_size=0.1, random_state=0).split(X_train, y_train)\n",
    "train_sizes, train_scores, test_scores = learning_curve(\n",
    "    clf_2, X_train, y_train, cv=cv, n_jobs=1, train_sizes=np.linspace(.1, 1.0, 10))\n",
    "plot_LCurve(train_sizes, train_scores, test_scores)\n",
    "\n",
    "cv = ShuffleSplit(n_splits=50, test_size=0.1, random_state=0).split(X_train, y_train)\n",
    "train_sizes, train_scores, test_scores = learning_curve(\n",
    "    clf_3, X_train, y_train, cv=cv, n_jobs=1, train_sizes=np.linspace(.1, 1.0, 10))\n",
    "plot_LCurve(train_sizes, train_scores, test_scores)\n",
    "\n",
    "cv = ShuffleSplit(n_splits=50, test_size=0.1, random_state=0).split(X_train, y_train)\n",
    "train_sizes, train_scores, test_scores = learning_curve(\n",
    "    clf_4, X_train, y_train, cv=cv, n_jobs=1, train_sizes=np.linspace(.1, 1.0, 10))\n",
    "plot_LCurve(train_sizes, train_scores, test_scores)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 128,
   "metadata": {
    "collapsed": false,
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\nwl1EJIf+Pw89vBczyZO2AAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x113398190>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n3EVECuj/A5pDjgux0jdEAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x113398990>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from matplotlib import pyplot as plt\n",
    "from sklearn.learning_curve import learning_curve\n",
    "from sklearn.model_selection import ShuffleSplit\n",
    "from sklearn.ensemble import GradientBoostingClassifier\n",
    "#from sklearn.naive_bayes import GaussianNB\n",
    "#from sklearn.linear_model import SGDClassifier\n",
    "#from sklearn.ensemble import RandomForestClassifier\n",
    "#from sklearn.ensemble import AdaBoostClassifier\n",
    "\n",
    "#from sklearn.model_selection import KFold\n",
    "#cv = list(KFold(n_splits=40, random_state=20, shuffle=True).split(X_train, y_train))\n",
    "\n",
    "def plot_LCurve(train_sizes, train_scores, test_scores):\n",
    "    train_scores_mean = np.mean(train_scores, axis=1)\n",
    "    train_scores_std = np.std(train_scores, axis=1)\n",
    "    test_scores_mean = np.mean(test_scores, axis=1)\n",
    "    test_scores_std = np.std(test_scores, axis=1)\n",
    "\n",
    "    plt.figure()\n",
    "    plt.fill_between(train_sizes, train_scores_mean - train_scores_std,\n",
    "                     train_scores_mean + train_scores_std, alpha=0.1, color=\"r\")\n",
    "    plt.fill_between(train_sizes, test_scores_mean - test_scores_std,\n",
    "                     test_scores_mean + test_scores_std, alpha=0.1, color=\"g\")\n",
    "    plt.plot(train_sizes, train_scores_mean, 'o-', color=\"r\", label=\"Training score\")\n",
    "    plt.plot(train_sizes, test_scores_mean, 'o-', color=\"g\", label=\"Cross-validation score\")\n",
    "    plt.title(test_scores_mean[len(test_scores_mean)-1])\n",
    "    plt.ylim([0,1])\n",
    "    plt.show()\n",
    "\n",
    "clf_1 = LogisticRegression(penalty='l1', C=0.08)\n",
    "clf_2 = LogisticRegression(penalty='l1', C=0.08)\n",
    "   \n",
    "\n",
    "cv = ShuffleSplit(n_splits=50, test_size=0.1, random_state=0).split(X_train, y_train)    \n",
    "train_sizes, train_scores, test_scores = learning_curve(\n",
    "    clf_1, X_train, y_train, cv=cv, n_jobs=1, train_sizes=np.linspace(.1, 1.0, 10))\n",
    "plot_LCurve(train_sizes, train_scores, test_scores)\n",
    "\n",
    "cv = ShuffleSplit(n_splits=50, test_size=0.1, random_state=0).split(X_train, y_train)\n",
    "train_sizes, train_scores, test_scores = learning_curve(\n",
    "    clf_2, X_train, y_train, cv=cv, n_jobs=1, train_sizes=np.linspace(.1, 1.0, 10))\n",
    "plot_LCurve(train_sizes, train_scores, test_scores)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 150,
   "metadata": {
    "collapsed": false,
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAXcAAAEICAYAAACktLTqAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAIABJREFUeJzt3Xu8XGV97/HPb6577+xbyIUkQAgJqFy8FtEeaKFVMFwE\nile0R9vSxlOKd8V4sB6kUCmtl/qqx9OgVLS8RGujRgWVKqh4DgooKIFik5CEJJALSfYl+zYz6zl/\nPGvNnpk9M3v2zuzb2t/36zWvWbNmzexn7dn7u575rWetZc45REQkXhIz3QAREWk+hbuISAwp3EVE\nYkjhLiISQwp3EZEYUriLiMSQwl1EJIYU7hJLZnaMmX3DzI6Y2Q4ze0uN5e42s/6S24iZ/SZ8bqmZ\nfcXM9phZj5n9zMxeUfH6d5rZU2bWa2YPmdk507F+IuNRuEtcfRYYAY4F3gp8zsxOr1zIOXehc649\nugH/F/i38Ol24EHgd4BjgNuB75pZO0AY9DcDrwe6gC8A3zCz5JSumUgDTEeoStyY2QLgEHCGc+63\n4bwvA7udc+vrvG4VsBU42Tn3VI1leoE/cM49bGZvAt7vnDur5Of2Ayucc880cZVEJkw9d4mj5wGF\nKNhDjwJjeu4V3gb8tE6wvwTIAFvCWXcDSTN7Rdhb/zPgEeDZo2m8SDOkZroBIlOgHeipmNcDdIzz\nurcBN1Z7wsw6gS8DH3PORe/dB/w7cD9gwGHgQqevwzILqOcucdQPdFbM68SHcVXhjtBlwNerPNcK\nfBt4wDn38ZKn/hzfWz8d36P/Y+A7ZrbiqFov0gQKd4mj3wIpMzulZN6Lgc11XvN2YKNzrr90ppll\ngW8Cu4F3VLzmxcC3nXO/dc4FzrnvAc8A/+1oV0DkaCncJXacc0eAjcANZrbAzM4GLsOXVcYIe+Zv\nAL5YMT+N78kPAm9zzgUVL30QuNjMVpt3Pr7e/1gz10dkMlRzl7i6GrgN2Ac8B/ylc26zmf0ecHc4\n7DFyOb4mf2/Fe/w34BJ8uB82s2j+hc65nwJfAtYA9wELgV3AO5xz/zklayQyARoKKSISQyrLiIjE\n0Ljhbma3mdk+M6taRwxrjZ8xsy1m9msze1nzmykiIhPRSM/9i8DaOs9fCJwS3tYBnzv6ZomIyNEY\nN9ydcz8BDtZZ5DLgS857AOg2s+XNaqCIiExcM0bLHAc8XfJ4VzhvzLk1zGwdvnfPggULfucFL3hB\nE368iMj88fDDDx9wzi0Zb7lmhLtVmVd1CI5zbgOwAeDMM890Dz300OR+Yi4HiQQkdfI9EZlfzGxH\nI8s1Y7TMLuCEksfHA3ua8L61HTwIO3fCyMiU/hgRkbmqGeG+CXhbOGrmlUDPtJzudHgYduyAwcEp\n/1EiInPNuGUZM/sKcB6w2Mx2Af8LSAM45/4PcBdwEf40qAPAn05VY8tkMpBK+YBfvhy6uqblx4qI\nzAXjhrtz7spxnnfAXzWtRRORSkF7O+zZ40s0ixeDVdsFICIyv8z9I1QTCejshEOHYNcuyOdnukUi\nIjNu7oc7+N56e7vvve/c6evxIiLz2NwK9zvugFWrfI39934PNm4sf7611Qf9jh1w5MiMNFFEZDaY\nO6f8veMOWLcOBgb84z174Npr/fQVV4wul8368e9PPw3HHgvd3arDi8i8M3d67tddNxrskcFBuPnm\nsctGO1r37oV9+yCovMaCiEi8zZ1w37mz+vw9NY6Xina09vRoR6uIzDtzJ9xXrqw+f9my+q9rb/en\nK9ixA4aGmt8uEZFZaO6E+003QVvb2PmDg/DrX9d/bWurr8Pv3Al9fVPTPhGRWWTuhPtb3wobNsCJ\nJ/odpCtWwAc/CAsWwOWXw1e/Wv/1mYwP+d274bnnQJcXFJEYm7FrqB7VWSH37vVDHVtafFBffTXc\nfz+87W3wsY/5IK/FOejv9/X4pUt1ZkkRmVPM7GHn3JnjLTd3eu61LFrkh0lefTV86UvwutfBM3XO\nW2YGHR0+4J9+2tfjRURiZu6HO/ihj9ddB//8z/Dkk7B2LTzwQP3XLFjgh0jqzJIiEkPxCPfIJZfA\nd77jSy5vfCPcemv92npLC6TTPuB7e6evnSIiUyxe4Q7wvOfBXXfB+efD9dfDO9859uCnUun06Jkl\n9+/XjlYRiYX4hTv4mvqtt8L69fDNb8Kll8L27bWXTyT8aw4e9CFfKExbU0VEpsLcDffxetiJhO+1\n/+u/+h2sF10EP/xh7eWjHa2Dg75Mo0v4icgcNjfDPToZWL1yS+S88+Duu+H44+Htb4dPfrL+uWba\n2vx7b9/e2PuLiMxCczPcs1l/MNOCBX5H6HgnBlu5Er71LT9M8hOfgD/9U3/OmXrv39Lij2g9dKi5\nbRcRmQZzM9zBH3y0bJm/HTkyfhmltRU+/Wl/GoP77vNlmieeqL186Zkl9+7VmSVFZE6Zu+EOvnzS\n3e178UEwfhnFDP7kT+DrX/e19de+1vfoayk9s+Tu3TqzpIjMGXM73CMtLRMr07z85b4O/8IX+iNb\nr7++/pGquoSfiMwx8Qh3KC/T9PePX6Y59lj42tfgqqv8sMkrr/Tj3GtpbfU9+e3b/fuLiMxi8Ql3\nGC3TrFrVWJkmnYYbboDPfAZ+9St/2oJf/rL28pmMH03z9NN+TLwOeBKRWSpe4R6JyjRtbY2VaV73\nOti0yYf3617nx8bXCu5k0tfh9+2DZ5/1FwBRyIvILBPPcAcfwsuX+/JLI2Wa00/3py04+2z40Ifg\nAx+ofeUmMx/wR474A562bYMDB/xOWgW9iMwC8Q138CG8cOFomWa8sz8uXAi33w7veQ/ceSdccYUf\nJVNLW5s/qjWb9SNqnn4atmzxPfqBAQ2fFJEZE+9wj0RlmpaW8cs0yaS/wtO//Ivvka9dCz/9af33\nTyT8Dtf2dh/4R474oN+61Z+rpr9fwyhFZFrNj3AHH9orVjReprngAvjud2HJEnjLW+Bzn2us5GLm\ng76jwwf98LDv/W/d6odS9vbqAiEiMuXmT7hDeZmmUBi/TLNmDXz723DxxXDjjfCOd0xsGKSZL9l0\ndPhbEPiSzVNP+SGVhw5p3LyITIn5Fe6RlhYf8I2UaRYs8L32v/5rf+DTJZf4x2ed5U9GdtZZsHFj\nYz83k/Glm/Z2X8o5cMCH/LZt/lqwGnkjIk0yNy+Q3SzOweHD/twxra1+3Hs9998Pf/ZnvqZeqrUV\nbrnF74CdjELB9+CDYPSUB9GO2sT83P6KSHXz5wLZR6O0TJPPj1+mOeccH7qVBgfh5psn345k0tfn\n29v9t4m+Pl+f37rVl3GOHNEFRERkQuZ3uEcmMppm797q83fv9iNsnnrq6NoSjbyJdsgODMCuXT7o\nd+/WyBsRaUhqphswa6RSfjTNeGWaFSuqj31PJuEjH/HTq1b5i4Sce64/KGrBgsm1ycxvcFpafAlp\nZMQPrQQ/r6vLtzOTmdz7i0hsKdxLRWWalhYformc7z2XWr8err22vIQT1dxf+lL48Y/h3nv9Scm+\n+EW/gTjrLPiDP/Bhf+qp/udMpm3ZrL+BD/q9e33op9N+A9LW5oM+nVatXmSea2iHqpmtBf4RSAKf\nd87dXPH8SuB2oDtcZr1z7q567zkrdqjWk8/78Ozv98FZGpYbN/oa+549vie/fv3YnanDw/Dgg/7C\nIPfdN3phkGXLfMifey78/u/7jcnRKhR82JfW5aPAj3r2CnyRWGh0h+q44W5mSeC3wPnALuBB4Ern\n3OMly2wAfuWc+5yZnQbc5ZxbVe99Z324w+homn37fG9+vNE09TzzDPzkJ75X/9Of+vdNJOAlL/El\nnPPO89PJZHPans/7bx6lgR+d1bKtza+LAl/kqDjncDgCFxSna80LXEA+yBO4gLZ0GwsykyvXNhru\njZRlzgK2OOe2hW98J3AZ8HjJMg7oDKe7gD0Ta+4s1UiZplHLl8Ob3uRvhQI88ojv0d97L3zqU/7C\n3d3dvjcf1euXLZt821MpfyuVz/uROIcPj46nz2ZHe/gKfGmSwAXFWxRslaxKedKoXrKstmyt5cdb\nNnBBWQhH7SudDlxAIShQcIWydSkE4WMCgiAAAxw4nP+5DjAf+sW2hPMMw8zIB35AxGTDvVGN9Nxf\nD6x1zv15+Pi/A69wzl1Tssxy4AfAQmAB8Grn3MNV3msdsA5g5cqVv7Njx45mrcfUKy3TtLdPrm5e\ny8GDvjcflXD27fPzTz11tFf/8peP1tubqbSH75xfr0xGgS9lPdBqYZ0P8mW3KPyi8IKS0Kvy3lWD\nvMqsWstWe+9Gli0uEwZzcfGKEK51n7BEcXoyBnODdGY7WbJgyaRe38yyzBuA11SE+1nOuXeWLPO+\n8L0+YWa/C3wBOMO5Kpvr0Jwoy1RqZpmm3s944onRXv2DD45+Yzj77NGwX7Wqsdr/ZESBn8+PbsSy\nWd+GKPAzmeZu4OaQyp5etd6fo/z/qjRwolCI5pWGRDOWq1y2tG2VQR31RCuDuuAKvmdaue4lIRmF\nXMISxdCLblLbdIV7I2WZXcAJJY+PZ2zZ5SpgLYBz7v+ZWQuwGNjXWHPniGplmtbW5oacGZx2mr9d\nfbU/gOlnPxsN+3vu8cstXuzPTRPV1Hfv9qN44OgDvlZJp7fX/8xIaeBnMv41s6iH30gNdLJfxav1\n/sbMK2WjbSqGcJ15Za8/iuUSiURxvWv1lEtDOmEJUokUaUsrpOe4RsL9QeAUMzsJ2A28GXhLxTI7\ngVcBXzSzU4EWoM4FSee41lZ/0NOBA76GHZ02IJVqfo92wQJ/hsoLLvC9+qee8sMtb7xx7FGrg4P+\nQiP79vmTnp18MpxwwtignoxGAz9aNpnEJZO4VBJSKT+dTODMcAmDxOi0i74uV/SEobx2W/m42jzw\n4ZYP8uVfu6MQrDGv3lfxRCJBylJH9VV8pjhXvSwi8dfoUMiLgE/jhzne5py7ycxuAB5yzm0KR8jc\nCrTj/2Wudc79oN57zsmyTDXRwUVDQ74ePzAwurNyKssXxx/f2EnG0mk46SQf9uHNrVmDW7Ma19mJ\nw40J1aioUNnLDQh7sbjwPgpVR4DDBQHgCIICQVCAIMAFAeYAF4BzVcPGAZZM+pFCySQkU5Dy95ZK\nYpaARMLfp1I+dBNJsLFBDJTNE5ltZlNZhnDM+l0V8z5aMv04cPZEGxkLpQcXdXWNhv3wsA/7I0d8\nz95stGffjNJFjSNlCyuWc+BbXyGx7SmSW7eR3Lad1FM7SP/nZtL3/ADLFzB8xzW/6BhGVq9kZNUJ\njJx0IrmTVvr7FcdCMmxj2MMdDVA/sxigGAkzUkQBbFhyEsEa+PAnCCAfQK4AQa7OBsxBItwYpKIN\nQip8HP5Zm41uWKvdV07Xek5kDtIRqs1WGvadnT6ccrmxYR8dWTqBsM8HeUaCHIO5QYL3rGPRX/8t\niaHR88EHLVkOvGcdR9oz2ItegL3oVMwgQRi6uQKpXbt92G/bTjK8b7nnJyQO9xTfx2Uy5FedQP6k\nVeRXryJ/0on+fvWJuPb2Me1q3XQ3HZ/8J5LP7KWw/Fj63ncNg5deOLHfW/Q7mMg4/+j3WAggF54u\nOdpAlA2DqDTB5xKJ8g1A1NaEgSXK50fPVT6O3iN6rnSjUWvjUuuxSAMU7lMtGlqYyfiTgUVhPzLi\nw76/39fOzXywlZzmNxfkGCnkGMgP0p8fIFcYgbCnnH7ta0hZckyoFi69kJZabckkKKxeRWH1KoZf\ndW7ZU4mDh0g9tYNU2NNPbdtO+rdbaPmP+7CS2n5h6eKywE/s3c+CL3+VRHjRkdSeZ+n6yI0AEw/4\niZrMBmEyoo2Gf0BYs4LAgcuPPle2XMXjet9AyjYm9TY8oWijEYV9IjG6oal8Pvq7iuZVvi7aCFVu\nuGTOm9/nc58tcjnc0BC5vsOM9B3myGAvRwoD5M0gkyaZTJFOpEklZmBbPJIj9fQuH/olwZ/atp1E\nb1/NlwUtLQxecQlBVxdBdxdBV6e/7+7CdXUSLOwm6Oxozs7eUFO+Qcx2ZRuLaJqxG5J6j4svqrER\nSSRKNgjmS15l88Lp0m8U1TYS+qZR1ayquUvzOecYKYwwnB/mSO4IR3JHCLIBZLMkC4vJFKBlaNiX\ncYZzQADJPGTSvtY8XTJp8mtOIr/mpMoVIHHwEMf+7vlVI8KGhmi5+z9I9PRidU6hHLQvIOjuJuju\nDDcA3T78u/106UYh6OrEdXdV3Si0brqbro/cSGJoCJjmbxAV7ZjSDUyD+wKOqh3OhTvA8SWv/HD5\nBqLs8xznm0Yq1XjYT+G2oPXb36PjU/979Pfx/msYvPyS8m8vld94qpXFat0abcfXNrLk+o+T2v0M\nrFwJN90Eb33rlKyzwn2aBC4ohnn/SD8DuYHicL9UMkVLqmXsuOL2Dj+ePZ/3ZZzBwfB87uEZKZMp\nX7ef6rJENWYEi46hsGIZqT3Pjnm6sGIZ++77LgQB1n+ExOEef+vp8YF/aHQ6UTKd2v0MdriHRG9f\n/Y1CR3sY+F0E3Z1kHn6kGOyRxNAQnX9zC+RzkMng0mlcxh9x6zIZXCYD6ZSfTqchkw6XyYTLpEd7\nqA2YTRuYo2qHGVj4N3WUf1ut3/ruaKguO5a+9/4lg5esrb7wFBURWr/zPbo++vHy38d1N0Iux+BF\nF4Q/u9q3mwko3TCUlslKNhqtm+6ia/31JAbDv9MdO2DdOj89BQGvsswUKQQFRgojDOWH6B/pZzAM\nZMNIJVJkkpnJD9WLwj4afpnLUdaDKu2JRF+lp+grcmWQgC/J9Nz4kaMLtCDA+vp96B/uLW4YrGS6\ndH760cempOPnwn0mLtwIlE2HGwAX7hhP//LR4r6HslVpbWXw4jBESnuxiXDcUjT2v9gTTPiP0kaP\nBygvf0S9RcMlypcFo/3zt5PoG3sh90JXJ33vvTocZZTAJRN+OmG4cF7d58K/JRdt8JJJ//PD51xp\n7zeZJPujH9N5y2fKfidBNkvfe69m+Nyz/d9xoYDlwvtCAXJ5rJCHfB7LF/x9oQDRdHFeHvIFrOI9\nRqfz/rl8gdbvfJ9ElausBa0tDJ3/h2W/U1e5A7za77qyd2/hsRrG6GcXHcxmhvNHitF++50k+sd+\nLpx4or+WcoOadvqBqRK3cM8HeUYKIwzmBukf6Wc47/+gzYx0Mk06kZ66cdfhH3Xx/DDR6QNGRvx0\nPl/yVbpkI1C5o22SO9NmQ6176XkXV/0GkT92Kc995QswMoLlcthIDhsZgXDa3/vnGBmdLn2OXL7q\nMn46h+VGYCRH5pePVt3AOCBYduzoKJ6gvMRhMFrucNEO26C4jBWXD4r19XrfauYrFw6JLT1wjlSK\nxL79NT+XwvHH+anos3CM/ZzCz8WgZMhuuM8jei5atuR1DX9GZvWv/jZmcdXcm6Ly0PXKc3REYZ4L\ncoA/lDuTzNCeHTtkcMpEB//UEwSjG4Ag8Lcw5IobgrIjXsONQFlvLFG13j946YUzvuOy733XVP0G\n0ffBd1E4fsW0tKHWBqZYopoKZRsFf1t6/uWknhl7Ocj8sqUc+PcvQyHAgoKvp7vAPy4EEM4b97nA\nFf+OLPp7KgRYuHz0XPf/vKFmqB765N/64xOiEE6PhrGLjnBORQezJXHpVBjcft7oMsnR4xtqdJ7q\nfi4/2nSUH8A4Sj+XP7yUry5+luteBTu7YGUP3PRDeGvvyin50bEN92rnDqkM6egWndGu9H7MIeww\nusPHUTyBUtKSZJIZsqkpOGNjM0UBXe9kZ86N3QBE4Z/zPVgKw+XDAmFMbbFs/Pc0iTYuM/kNouYG\n5n3X1HnVUYqGOpa24/3vrN6OD7yLYMniqWtLhY5/2sBXF40Nszc9t4yhS14zbe3oe981fPeO6/nI\nufliO278cYqL33K132jVGm0UTVfeF0cq1T9WwjnHcDDCQGGIwfwQt/6P07k59yxDYeru6IZ1lwLH\nXcRU7FKdk+E+mBtkIDdQFsjVQrnsRE5QFtLOueLZ7CpP5ZlK+EPcs2Tn1yHs0VG09YYnRj3F0o1A\noTDa+3eBr48WRqp81az4hyirP0c7pJj0hmGmv0HMhg3MbGrHbe88h/f2f52BsD8RhdmR9nO4JFqo\nNCxLQ7ZWwNbc6VnZAxt1x/OGufYyI6q67+iGdZcZt5wecHkux5DLMRAMMZAfYqAwxEAwzEBhmIHC\nIIOFkvn5QQYKgwzkhxjMD/rHeZ9F0fRgNJ0bZDA/SMFVnP+p4l9rIA3XDd+lcI/0DvdyaOhQsY49\n70N5OkU9xUZGUZQOnYtupfOifQGFQnHnGvmSbw3+Tah6kE/lmOpqQ9hmwB0vhJvfA3sGYEUbrH8h\nNOEkzFPXjspx847qYVrl4CwXBAwWBjmc66c3109Pro+eXD89I7305o7w94W7i8EeGUjDu3Pf5lv3\n7hs9h1F0M/+NOAjb4XDhPEqWLX2Nw7mg/DxIxWVc2GTHY/s3kyNX1o5BcrzrFx/jnb+4fkK/V8No\nS7eV3VrTrbRlF7CofQltqZJ5Fct98J4PVn3PnT07J9SGRs3JcAfIJDO0pGoeiymzwdEc9VhaSy7d\nMET3xY1BxQYin6/3ptQfTF3n+XqnDgjvN+78Ptc+fDODBV8O2T3wLNf+4kYo5LnixLVje6KV06WP\nax7ZOt46wMan7+HaR29hsDBc0o6/geEhrjjhgrJlc0GevsIAh/NH6M3305Pv9wGd6wsDu+TxiL8d\nHumld6SPnuFe8q7e77u6oWCYrSN7y07uVvViGDWeLy5HAkukwkEpNS6ugRX3h1VyON77yveWh3S6\nrRjQlQHemmqlJdUy6Y7jpx/4NLv7xp4PamXX1NTc5+Romb39ezmSO6JwnyU2PrGRm++/mT19e1jR\nsYL156znilOnv786ph1nf4grnn+5f7JWPbVe4JY+H25ghvLD9A710Jvro3e4l77hXnpz/fQO93LT\nL/+RntzYo3bbUq1cfuJrwhJhGDmJRBhKo1f18bfE6H3pckTP+deAlZcVo/cy49ZHb6N3ZGw7WpIt\nvPjYF9E70svhoR56h3s5kjtS93eaTqTpaumiM9tJV7bL36LHLV3FeZ0to89Hz63917VVw+y4juP4\nxV/8ou7Pbaazbj1rVrRj4xMbufaea4vDogHa0m1seO0G3vrCxgszGi0j06LyD3Z3326uvcdfNGQ6\nA75qO/7jQ2BWbEc+yNM73EffsA/m3uFe+kb66BnuoS+cH033joTPVyw7UhiZcNsG8oP86NkHCBh7\nEeXiVZtcaTmhylWdKp6vXK4RQ4UhEokkJ3at4kXHlgf0mLDOdtLd0n1UPdX156wfE2atqVbWn7N+\nUu83WbOlHdHf4cfv/zjP9D3Dyq6V3PSqmyYU7BOhnrs0zDlH73AvBwYP8NzAcxwYOMAH7/kgh4cO\nj1l2QXoBf3TqH01b277xxDeq9kJTiRSLWxfTO9LLQG5g3PdpS7fRme2kM9tJR6aDrmwXHdkOOrKj\n053ZTjoznWXzOrIdXH7n5ezpG3tt+OnqIUah/8rPv3JW9FRhFn+rm6F2wCy6hupUUbgfvWb8wQ7m\nBnlu0Af1gQEf2pWPDwyOTteqX1azpG1yf7yTsX+g9oW/rjzjSh/KmTC0o4AuCfFo/tGcnK3a1+7W\nVCu3nH/LjH6Lmal2SHU6cZjUVascEriAc08814dzSQ+7WlAfGDhQs+bakmphSdsSFrctZln7Ms5Y\ncgaL2xazqG2Rv29dxKK2Rbz9m2/n2f6xB4jMprrqP1zwD9PShig4Z7qHOFvaITNLPfc56PDQYc79\nog/wRiUtyaK2RSxq9eFcGtSLW0umw1tbuq2h950tvcTZ0g6R8ajnLjjn2N23m837NrN5/2Y279vM\nY/sfY1fvrrqvu+kPbxoN8LCH3d3SPSVXs58tvcTZ0g6R2UI991kiV8ix5eAWNu/fzGP7HmPz/s08\nvu9xDg/7nZWGsXrhas5YeganLzmdDQ9v4MDg2J77TOw0E5HGqeceY33DfTxx4Ilij/yxfY/x5HNP\nFofZtSRbOHXJqVz8vIs5fenpnLHkDE5dcmpZqWR5x/JZMbxLRGYnhfskNDpKxTnH3iN7i+WUKMy3\nH95eXGZhy0LOWHoGV730Kk5fcjqnLz2d1QtXjztqQ2UIEalH4T5B9UapvPjYF5fVxjfv28xzg88V\nX7uqaxWnLT2NN5z2hmJ5ZVn7skkfJHLFqVcozEWkKoX7BN18/81lpRCAwfwg7/7eu4uP04k0z1/8\nfF69+tXFED91yal0Zjunu7kiMk8p3GvIFXLs6NnB1oNb2XpoK1sObmHroa1Vx1JHPvWaT3HG0jM4\n+ZiTySQz09haEZFy8z7cDw4eZOuhrT7ED25ly6EtbD24lR09O/x54UNL2pZw8jEn05Zuq3oY+3Ed\nx/HG0984nU0XEalpXoR7Psizs2cnWw5uYduhbcVe+JaDWzg4eLC4XCaZYVX3Kp6/6PlceMqFnHzM\nyaxZuIY1C9fQ1dIF1D5YRqNURCRS6wRxxYsJTYM5Fe53/OYOrvvhdezs2cnyjuV8+JwPl+1QPDx0\nuNj73nZwNMS3H95edk6UxW2LWbNwDReefCGrF64uhvgJXSdolIpIzNUL3ugeGHNWzuIlN2vcl56d\n0zCSiWTxUpwJSxRv0Tnip9qcOYjpjt/cwbpvrysriaQTaV6+4uUUXIGth7aWHY6fTqRZ1b2qGNyr\nj1nNyQtPZs0xa+hu6W7quohI+XWLS69VDBTvy05PXO3KeBXzipfKnMRyVV8bvi6ZKA/c8W41LwZS\n536qxO4gput+eN2YWncuyPHA7gc4c8WZXLD6AtYcs8bfFq5hZdfKozrDn8h8UhrGpeFc7L06V/Va\nxKWPE4lEsZeaTqRJWIJUIlW8B8pOgVG8ylJJak/nvLibM+lX6zqDzjm+8aZvTHNrRMaKwjC6YHvp\nt+JaF9SYyDfnib5HcfmwZGBmxd5s9Dh6PurJJhNJUpYiaUk/HYZzMpHESq7+FF0Kr/SxzC5zJtxX\ndq1kR8+OMfNXdKyYgdZI3JX2ZIthzWiZoVIUmqlEimQiWey5lqoWgNHX+DHza3y1rxWi9d47ulcw\nzy9zJtwjT1pyAAAMI0lEQVRvetVNY2ruGqUyM5xzFFyBfJAvBl9Zp7JkR1Ox7lm68wnKQqf4sop6\nZbUa5kTrmdUCulh+qNNrjkoMqUSKTDJDKpEq3iprsaWPRWaLORPu0XUG642WkeYpBOXhXRwxgA++\ndCLNgvQCMskM6WS6GHowdjRC5TygLHBLd7qVljSinnLBFUZfR0AQBFU3HGWlhlAUuqlEikyiPKRr\n7VSb6h1iItOhodEyZrYW+EcgCXzeOXdzlWXeCFyPj4BHnXNvqfeeOuXvzApcUBbgpfVZMyv2WFtS\nLcWeazKRLNZiZ1q9DQdQ1rMWiZOmjZYxsyTwWeB8YBfwoJltcs49XrLMKcCHgbOdc4fMbOnkmy7N\nEJVOCkGBgisQBMFozzbcgZZJZujIdpBNZst6s0lLzvpQLCvpzO6misyIRsoyZwFbnHPbAMzsTuAy\n4PGSZf4C+Kxz7hCAc25fsxsqYwUuIB/kiwFeWpowrNjzbkm1kE6mizXkqBwhIvHVSLgfBzxd8ngX\n8IqKZZ4HYGY/w5durnfOfa/yjcxsHbAOYOXKlZNp77wTlU7G9L6BlKXIprIsSC/wve9kqizARWT+\naiTcq33prSzUp4BTgPOA44GfmtkZzrnDZS9ybgOwAXzNfcKtjaHSkSeFoFCsHUc79VKJVLHunU1l\n1fsWkYY0Eu67gBNKHh8P7KmyzAPOuRzwlJk9iQ/7B5vSyjmudOdlZfkkOpovGnmSSWaKB4/Mhdq3\niMxOjYT7g8ApZnYSsBt4M1A5EuabwJXAF81sMb5Ms62ZDZ3torp3IfC30qF60c7Lzmxnceigyici\nMpXGDXfnXN7MrgG+j6+n3+ac22xmNwAPOec2hc9dYGaPAwXgg86552q/69yWK+QYKYwUx2dH5ZNs\nMktHpqNs6GDp+G8RkenS0EFMzrm7gLsq5n20ZNoB7wtvsZMr5MgFOQpBAcPIprIsbltMS6qlOIRQ\n5RMRmU3mzBGq0ykf5Ed75g6yqSzHtB5Da6q1WBMXEZnNFO6Uh7lzjmwyy8KWhbSl2xTmIjInzctw\nLwQFRgoj5IM8ZkY6kaY7201bpo1sMqswF5E5b16EexTm0TjyTDJDV7aLtkxbceeniEicxDLVKsM8\nnUzTme2kLd1GNpVVmItI7MUi5QIXMJwf9mWW8IIJHdkOf1i+wlxE5qE5m3q5Qo58kMc5RzqRLoZ5\ndJCQiMh8NifDPZvK0t3SzYKMP2GWwlxEpNycDPfulu6ZboKIyKym4+JFRGJI4S4iEkMKdxGRGFK4\ni4jEkMJdRCSGFO4iIjGkcBcRiSGFu4hIDCncRURiSOEuIhJDCncRkRhSuIuIxJDCXUQkhhTuIiIx\npHAXEYkhhbuISAwp3EVEYkjhLiISQwp3EZEYUriLiMSQwl1EJIYU7iIiMaRwFxGJIYW7iEgMKdxF\nRGJI4S4iEkMNhbuZrTWzJ81si5mtr7Pc683MmdmZzWuiiIhM1LjhbmZJ4LPAhcBpwJVmdlqV5TqA\ndwE/b3YjRURkYhrpuZ8FbHHObXPOjQB3ApdVWe5vgFuAoSa2T0REJqGRcD8OeLrk8a5wXpGZvRQ4\nwTn3nXpvZGbrzOwhM3to//79E26siIg0ppFwtyrzXPFJswTwKeD9472Rc26Dc+5M59yZS5YsabyV\nIiIyIY2E+y7ghJLHxwN7Sh53AGcA95nZduCVwCbtVBURmTmNhPuDwClmdpKZZYA3A5uiJ51zPc65\nxc65Vc65VcADwKXOuYempMUiIjKuccPdOZcHrgG+DzwBfM05t9nMbjCzS6e6gSIiMnGpRhZyzt0F\n3FUx76M1lj3v6JslIiJHQ0eoiojEkMJdRCSGFO4iIjGkcBcRiSGFu4hIDCncRURiSOEuIhJDCncR\nkRhSuIuIxJDCXUQkhhTuIiIxpHAXEYkhhbuISAwp3EVEYkjhLiISQwp3EZEYUriLiMSQwl1EJIYU\n7iIiMaRwFxGJIYW7iEgMKdxFRGJI4S4iEkMKdxGRGFK4i4jEkMJdRCSGFO4iIjGkcBcRiSGFu4hI\nDCncRURiSOEuIhJDCncRkRhSuIuIxJDCXUQkhhoKdzNba2ZPmtkWM1tf5fn3mdnjZvZrM/uhmZ3Y\n/KaKiEijxg13M0sCnwUuBE4DrjSz0yoW+xVwpnPuRcDXgVua3VAREWlcIz33s4AtzrltzrkR4E7g\nstIFnHP3OucGwocPAMc3t5kiIjIRjYT7ccDTJY93hfNquQq4u9oTZrbOzB4ys4f279/feCtFRGRC\nGgl3qzLPVV3Q7I+BM4G/r/a8c26Dc+5M59yZS5YsabyVIiIyIakGltkFnFDy+HhgT+VCZvZq4Drg\nXOfccHOaJyIik9FIz/1B4BQzO8nMMsCbgU2lC5jZS4F/Bi51zu1rfjNFRGQixg1351weuAb4PvAE\n8DXn3GYzu8HMLg0X+3ugHfg3M3vEzDbVeDsREZkGjZRlcM7dBdxVMe+jJdOvbnK7RETkKOgIVRGR\nGFK4i4jEkMJdRCSGFO4iIjGkcBcRiSGFu4hIDCncRURiSOEuIhJDCncRkRhSuIuIxJDCXUQkhhTu\nIiIxpHAXEYkhhbuISAwp3EVEYkjhLiISQwp3EZEYUriLiMSQwl1EJIYU7iIiMaRwFxGJIYW7iEgM\nKdxFRGJI4S4iEkMKdxGRGFK4i4jEkMJdRCSGFO4iIjGkcBcRiSGFu4hIDCncRURiSOEuIhJDCncR\nkRhSuIuIxJDCXUQkhhoKdzNba2ZPmtkWM1tf5fmsmX01fP7nZraq2Q0VEZHGjRvuZpYEPgtcCJwG\nXGlmp1UsdhVwyDl3MvAp4O+a3VAREWlcIz33s4AtzrltzrkR4E7gsoplLgNuD6e/DrzKzKx5zRQR\nkYlINbDMccDTJY93Aa+otYxzLm9mPcAi4EDpQma2DlgXPuw3sycn0+gZspiK9ZlH5uu6z9f1Bq37\nbF73ExtZqJFwr9YDd5NYBufcBmBDAz9z1jGzh5xzZ850O2bCfF33+breoHWPw7o3UpbZBZxQ8vh4\nYE+tZcwsBXQBB5vRQBERmbhGwv1B4BQzO8nMMsCbgU0Vy2wC3h5Ovx74kXNuTM9dRESmx7hlmbCG\nfg3wfSAJ3Oac22xmNwAPOec2AV8AvmxmW/A99jdPZaNnyJwsJzXJfF33+breoHWf80wdbBGR+NER\nqiIiMaRwFxGJIYV7DWa23cx+Y2aPmNlD4bxjzOweM/uv8H7hTLfzaJnZbWa2z8weK5lXdT3N+0x4\nmolfm9nLZq7lR6/Gul9vZrvDz/0RM7uo5LkPh+v+pJm9ZmZaffTM7AQzu9fMnjCzzWb27nB+7D/3\nOusev8/dOadblRuwHVhcMe8WYH04vR74u5luZxPW8/eBlwGPjbeewEXA3fjjGl4J/Hym2z8F6349\n8IEqy54GPApkgZOArUByptdhkuu9HHhZON0B/DZcv9h/7nXWPXafu3ruE1N6moXbgctnsC1N4Zz7\nCWOPSai1npcBX3LeA0C3mS2fnpY2X411r+Uy4E7n3LBz7ilgC/7UHHOOc+4Z59wvw+k+4An8Ueax\n/9zrrHstc/ZzV7jX5oAfmNnD4WkTAI51zj0D/o8EWDpjrZtatdaz2qko6v1jzFXXhOWH20pKb7Fc\n9/AMri8Ffs48+9wr1h1i9rkr3Gs72zn3MvzZMP/KzH5/phs0CzR0mok57nPAGuAlwDPAJ8L5sVt3\nM2sH/h14j3Out96iVebFbd1j97kr3Gtwzu0J7/cB38B/FdsbfR0N7/fNXAunVK31bORUFHOac26v\nc67gnAuAWxn9Ch6rdTezND7c7nDObQxnz4vPvdq6x/FzV7hXYWYLzKwjmgYuAB6j/DQLbwe+NTMt\nnHK11nMT8LZw9MQrgZ7oa3xcVNSS/wj/uYNf9zeHF6Y5CTgF+MV0t68ZwtNxfwF4wjn3yZKnYv+5\n11r3WH7uM71HdzbegNX4PeSPApuB68L5i4AfAv8V3h8z021twrp+Bf81NIfvpVxVaz3xX1E/ix8x\n8BvgzJlu/xSs+5fDdfs1/h97ecny14Xr/iRw4Uy3/yjW+xx8aeHXwCPh7aL58LnXWffYfe46/YCI\nSAypLCMiEkMKdxGRGFK4i4jEkMJdRCSGFO4iIjGkcBcRiSGFu4hIDP1/aH5gFcAHKFAAAAAASUVO\nRK5CYII=\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x1133d7790>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x112f81250>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from matplotlib import pyplot as plt\n",
    "from sklearn.learning_curve import learning_curve\n",
    "from sklearn.model_selection import ShuffleSplit\n",
    "from sklearn.ensemble import GradientBoostingClassifier\n",
    "#from sklearn.naive_bayes import GaussianNB\n",
    "#from sklearn.linear_model import SGDClassifier\n",
    "#from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.ensemble import AdaBoostClassifier\n",
    "\n",
    "#from sklearn.model_selection import KFold\n",
    "#cv = list(KFold(n_splits=40, random_state=20, shuffle=True).split(X_train, y_train))\n",
    "\n",
    "def plot_LCurve(train_sizes, train_scores, test_scores):\n",
    "    train_scores_mean = np.mean(train_scores, axis=1)\n",
    "    train_scores_std = np.std(train_scores, axis=1)\n",
    "    test_scores_mean = np.mean(test_scores, axis=1)\n",
    "    test_scores_std = np.std(test_scores, axis=1)\n",
    "\n",
    "    plt.figure()\n",
    "    plt.fill_between(train_sizes, train_scores_mean - train_scores_std,\n",
    "                     train_scores_mean + train_scores_std, alpha=0.1, color=\"r\")\n",
    "    plt.fill_between(train_sizes, test_scores_mean - test_scores_std,\n",
    "                     test_scores_mean + test_scores_std, alpha=0.1, color=\"g\")\n",
    "    plt.plot(train_sizes, train_scores_mean, 'o-', color=\"r\", label=\"Training score\")\n",
    "    plt.plot(train_sizes, test_scores_mean, 'o-', color=\"g\", label=\"Cross-validation score\")\n",
    "    plt.title(test_scores_mean[len(test_scores_mean)-1])\n",
    "    plt.ylim([0,1])\n",
    "    plt.show()\n",
    "\n",
    "clf_1 = AdaBoostClassifier(n_estimators=30, learning_rate=0.075)\n",
    "clf_2 = AdaBoostClassifier(n_estimators=30, learning_rate=0.085)\n",
    "   \n",
    "\n",
    "cv = ShuffleSplit(n_splits=50, test_size=0.1, random_state=0).split(X_train, y_train)    \n",
    "train_sizes, train_scores, test_scores = learning_curve(\n",
    "    clf_1, X_train, y_train, cv=cv, n_jobs=1, train_sizes=np.linspace(.1, 1.0, 10))\n",
    "plot_LCurve(train_sizes, train_scores, test_scores)\n",
    "\n",
    "cv = ShuffleSplit(n_splits=50, test_size=0.1, random_state=0).split(X_train, y_train)\n",
    "train_sizes, train_scores, test_scores = learning_curve(\n",
    "    clf_2, X_train, y_train, cv=cv, n_jobs=1, train_sizes=np.linspace(.1, 1.0, 10))\n",
    "plot_LCurve(train_sizes, train_scores, test_scores)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 157,
   "metadata": {
    "collapsed": false,
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\ndH3B9ojZBQAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x113048a50>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAXcAAAEICAYAAACktLTqAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAIABJREFUeJzt3XuUZGV97vHvry5975lhei7MhcsowxKYYRTJQCIoCZcA\nWZHEKKIk5GR5nHgSTVwaJ4OYwCESkZioWWHlBBOXxoMoR8ZzQFFmNKIxEWRIZmBGBAbCZS7MfXr6\n3nV5zx9vvVW7qqu6q7urp7t3P5+19qrau3ZXvbur+9nvfve7323OOUREJF4S010AERFpPIW7iEgM\nKdxFRGJI4S4iEkMKdxGRGFK4i4jEkMJdRCSGFO4yJ5jZQjP7ppn1mdnLZvbeGut9x8x6I9OwmT0d\nef0vzOxpM8ua2W0nbQNExik13QUQOUnuBoaBpcAbgW+b2Q7n3K7oSs65a6LzZvYo8C+RRbuBjcAH\nprS0IpNkukJV4s7M2oFjwBrn3HOFZV8B9jrnNo3yc2cCLwBnOef+q+K1/w3sds7dNkXFFpkUNcvI\nXHA2kAvBXrADOG+Mn7sJ+NfKYBeZDRTuMhd0AN0Vy7qBzjF+7ibgS1NRIJGppnCXuaAXmFexbB7Q\nU+sHzOwS4FTgG1NYLpEpo3CXueA5IGVmqyPL1gG7aqwP8LvAZudc75SWTGSKKNwl9pxzfcBm4HYz\nazeztwDXAV+ptr6ZtQLvokqTjJmlzawF/7+TMrMWM0tOWeFFJkjhLnPFHwCtwEHgPuB/OOd2mdml\nZlZZO/8NfJv8D6q8zxeAAeA9wC2F578zZaUWmSB1hRQRiSHV3EVEYmjMcDezL5rZQTPbWeN1M7O/\nNbPdZvaUmV3Q+GKKiMh41FNz/xJw9SivXwOsLkwbgL+ffLFERGQyxgx359yPgKOjrHId8M/OewxY\nYGbLGlVAEREZv0YMHLYCeDUyv6ewbH/lima2AV+7p729/c1veMMb6v+Up5+G4eGRy9NpOPtsMINk\nEhIJP4mIxNCTTz552Dm3eKz1GhHuVmVZ1S44zrl7gHsALrzwQrdt27b6P6VWYGez8Mgj4BwMDUEu\n55e3tcG8edDSAk1N9X+OiMgMZmYv17NeI6q4e4DTIvMrgX0NeN9yp59efblzcOWV8KUv+XDv6PBT\nNguvvQYvvQQvvgiHD8PAAOTzDS+aiMhM04hwfxC4qdBr5mKg2zk3oklm0u64w9fGo1pa4N3v9k0z\nf/Zn8OY3w4c+BI8/7peFoE+nobsbXnkFXngB9uyBEyeqN/OIiMTAmM0yZnYfcBmwyMz2ALcCaQDn\n3P8CHgauxd/EoB/4vSkp6Y03+sdbbvEhvWwZfOxjcP31fvnOnXDvvbB5s5/OOgve8x5417ugqwta\nW/16zvlQf+01/zyd9s037e3Q3Kz2ehGJhWm7QnXcbe6VBgbg0CHo7/eh3Nzsl/f3w0MP+aB/8kkf\n3ldfDe99L1xyycjwzuVKbfVmPuQ7O/3OIJ2eePlERKaAmT3pnLtwzPVmbbgHtUIe4Oc/h69+FR54\nAI4fhzPO8LX566+HpUtHvleo1WcypVr9/Pm+OUi1ehGZAeZOuAf9/aWTps3N5T1kBgfh4Yd90P/k\nJ77L5JVX+tr8ZZf5+WpCrT6chO3o8E04zc2q1YvItJh74R709/ua/ODgyJAHf0L1vvvg/vvhyBFY\nvtzX5t/9blixovb7Vtbqm5rKa/VWrUeoiEhjzd1wBx++obmmVsgPD/v+8V/9KvzoR77J5bLL/Inb\nyy8fu2aezZZq9amUD/r2dt+DR0EvIlNkbod7EEL+4EEfxNVCHnzvm/vug69/HQ4c8O3x11/va/Rn\nnDH25+TzfieSy/kmnnnz/ElZtdOLSIMp3KOiIT84WPuq1WwWvv9939PmBz/woX3ppb5t/uqr67vS\nNZ/3O5Js1gd7Z2fpSlkFvYhMksK9mnpDHmDfPl+Tv+8+2LvX95V/17t8bf6pp+DOO/06y5fDpk3w\njndU/7zBwVLQt7f75puWltoncUVERqFwH814Qj6Xgx/+0LfNb91aCuroMAatrXDXXdUDPvqZoUYP\n5UGfasQQPyIyFyjc6+Fcee+asQYZO3gQ3vY2P3RBpWXLoN7tqex509bmg14XTonIGOoN97ldZQxX\npLa1lUK+p8eHfLWQXbLEv17N/v3wm78JV13l+9C//vW1e82YlV9wFR0OoaUFFizwQa/RLEVkguZ2\nzb1StCY/NFQ95Nev923wlTo7/ciVu3b5+VWrfMhfdRX8wi/U3/SSyfjPds6Hf+hiqaAXEdQsMzmj\nhfzmzbBxo2+zD6Jt7nv3+rb5rVvh3//d18oXLIBf+RUf9pdd5nvP1CPalz6d9u8Tgl596UXmJIV7\nI4SQP3jQh3QI+c2b6+st09vrT8Zu3Qrf+x4cO+Z//hd/0Qf9lVfCaaeN/Llqcjl/XiAE/bx5fjgE\nXR0rMqco3BupVsiPRy7nR6ncuhW2bIHdu/3yc84pNd+sW1dfX/jomDeJRPmQxep5IxJrCvepEA35\noaHJ9W558cVS881Pf+oDe8kSuOIKH/aXXloag3404aKpXK405k1npz9J3NSksBeJGYX7VHIO+vp8\nm/zwsG8WSacn3hZ+7Ji/InbLFnj00VKPnUsv9TX6K67wwV+PXM6XKZv1ZQlh39rqa/a6eEpkVlO4\nnyzDw74tvKfHB75zPkAnGqTDw/DYY6Va/auv+uVvelOpnf6cc3xw19P2n83698znSz1w5s0rdbVU\n2IvMKgr36RCaSPr6/IVOmczkavXO+RuObNnig/4//9MvX7nS96P/yU/K7wNbz5WyIezDnadaWnzN\nvqVFA52JzAIK95kgk/FdJkOtHnx4TrRWf/CgH9hsyxY/VbNihW/DH08Zh4f9jgRKYR9q9gp7kRlF\n4T7ThFp9fz90d/tQBR+gE6nVr1xZCuRKv/zLcNFFcPHFcP755bceHEsI+3zel6m1tXT3KYW9yLTT\n8AMzTSLhg7K11Y8wmcmU2up7e0vr1NvDZfny6lfKtrf7oRDuvNPPt7T49vqLL/aB/+Y3+540taTT\npR5AzvlyHjhQer2trdSMo4upRGYshft0CSHa2TmyVj84WFqnVoBu2lT9Stk77/Rt7kePwhNP+JOz\njz8On/986a5R55/vw379ej/Nn1+9jKG3TRj6IIT9wYOlPvYh7EPNXmEvMiOoWWYmCuPLnDjha/Wh\nB05lrb7eK2XBHyE8+WQp7LdvL3XjPOecUs3+ootg8eL6yhkd3RJKJ4+bm0s1+1TKT+qVI9IQanOP\ni1CrHxjwtfoQyKnU5IYeGBjwAR/Cftu20lHA619fCvuLLx79xuGVslk/5fPlY96HJqfQKyedLgW/\n2vFF6qZwj6torb6vr9Q8EmrJEw37TAaeftoH/WOP+R43Ydz6lStLQX/RRfC615V/Tj1HEM6Vgj9c\nTRveI+yoQvAnk6XgVzOPSBmF+1wQ7u40MOCbbwYGSqGZSk2ud0su5/vYh7B//HE4fNi/tnhxKex7\ne317fq1RMuuRz5dCP5crfy2d9qGvZh4RQOE+N+XzpZp9X5+fQlimUqWmkIlwzo+HE8L+sceq99YJ\nli/3J3QnK5crBb+aeUQU7lIQ+q339/tadriiNZEo9diZaNPHnj2+Bl/LGWfAWWfB6tVw9tml5/WO\nZz+a0Zp5wrY1NZW2MdT2Ewn/qJq/zFLq5y5eCLf2dt+cEgYWGxz0YR/Gw5lIU87Klf5ka607U61b\nB88/Dz/+sT+aCJYuLQX96tWl50uW1L+jCT1zqo3KGU7mDg76nVplU08QjmZCd8+wAwhTIqGjAJm1\nFO5zTTJZupjqlFNK3RlDP/toU04yOXZTTq3+9n/5l6U291wOXnnFB/3u3f7x+efhgQfK70k7f77v\nqVNZ01+5cnw17RDKYzVBhTb+vj5fjjC4WnQHEz0KCDu/0PQT3QnoxK/MMGqWkZFCU044URuacqK1\n5fH2lqnGOX/1a2XoP/+8H045aGnxPXQqa/qrVpUPrTDRcoxVxrATCEcElf8zZqUdYeVRQNjRhMlM\nOwKZFLW5S+OEppyhofJeOTD5Xjm1HD8+MvR37/ZDIIfPTib9TclXr/bLHn20dEEVjL/XzmSE8I/u\nBGoJwR9OAEd7AFXuDLRDkAoKd5k60StTQ6+cEKqhuSKdnpqTlgMD8MIL5bX83bvhueeqr59Mwtq1\nsHChH9MnOkWXLVzo70k72RCt5+ghhH/0SKDaEUHUeHcIOlcQWzqhKlPHzDeHNDf7QITSOPFhmOMw\nRX+mEX3UW1thzRo/RdUaJTOXgwULfDPPz3/ux9wJY/dUam725yFG2wFEny9YUB6imzeXn3/Yu9fP\nQ3nATyR8w44gdHUdzw4hTLV2CGYj52XWU7hLY4TggNJAZOHipNCGPzhYCv1w4jKc+Jxs//Rao2Su\nWAH33luaD/fBPXLET0ePlj9Gp5df9o9h1M5KyWRpZ7BwoR/OIbpDAz9/++3+6GH+fD+NZwjmYDI7\nhPAdRI8SKkVPJIdzCGGHULlzqLYz0I5hxqkr3M3sauDzQBL4R+fcnRWvnw58GVhQWGeTc+7hBpdV\nZptwoVFTk++KGYQaaDZbusJ2cLC8y2IIlHr74dfqtbNpU/l6Zr4s7e2+vb4eg4M+/MNUuRMIyyqD\nPTh0CC67rDTf0uJr/fPn+z7/IfTDsrA8Oh9eb2mp7/cxmZPLzpV2AtEjhejRQrQMldcYhKa56E67\n1lFDMqkdwhQZM9zNLAncDVwJ7AGeMLMHnXM/i6z2CeB+59zfm9m5wMPAmVNQXomDcDeq5uby0A9X\no4ZA6e/3gRluCQi1x50JwdXo3jLgA3X5cj+NZv366kcPXV2+9n78uB/8rbvbj9vT3e2X7d/vm4xO\nnCiN51NLU1P1HUJ02QsvwDe+UerltHcvfOxj/vd5/fWlIZxrCSdwJ3IkFd0BZDJw//3wmc/4bVy2\nDD7yEfj1Xy+tGz4n7MijVxpXXm8Qnktdxjyhama/CNzmnPvVwvzNAM65T0XW+QfgRefcpwvr/7Vz\n7pdGe1+dUJW6hStRww1OBgbKa5PRrogTHV6hESrb3GH8PXZyuVLw15qOHx+5Tlg2Wi+dIJXy4/CH\n6x3a2kpTdD48r1ynrc3v8Gr9XDinUu/vI+wQQk+jaucTKgeaiw6BPceOChp5QnUF8Gpkfg9Qec35\nbcAWM/sQ0A5cUaNQG4ANAKfXe0gsEv55w/1dodT/PJMpncQNV92OJlojjbYXRx8nqhFHD6Ed/5RT\nxv/5+bzvuXTOObVPtG7cWDoiGhjwz8PU1+ebkMLy8FjrCt9ampt9iFfb2QwMwM03+6ErwlHHggUj\nm6RGO+kevQK51nmEyqOCb33L71T27vUn32+9FW64ofYJ5RjsFOqpub8L+FXn3H8vzP8OsN4596HI\nOh8pvNdfF2ru/wSscc7VrEao5i5TIoR+tPYXfQwnGCsfx+qfHsLCufIAqDyZOBNOKtZqHhrvzdOh\n1O017ACq7RQi866/H9ffBwMD2Je+TLXfhIOqy4uvm8G8zkLYLygLf6vcEVTuINrbR54PeOABv5ON\nHkG0tMAnP1lqIqoUvQK54sSyKxwhOCuUNZHAJfzfgjPDWfhoV9heV/YcIJ1Ik05WGTqjDo2sue8B\nTovMrwT2VazzPuBqAOfcT8ysBVgEHKyvuCINErpcTlTlicPx7iAqR6+sPPlYWdZaRxETbfOG+k8u\njyLv8sXJpSDf2UK+o5m8m0/e5cnms2TJkc1nyeVz5HDk8lnyLu+T28GqR75Lev+BEe+dXbaUl759\nL4kTPSS6e0j29JA8foLEiR6S3ScKy3r98xM9JE8cJbnn5cLrPVg2W7PcLpUk39lJfsE83Lx55OfN\no2nbf5AYqOj+OjhI7lN3cGxlF7mOVlxHB9n2Vlx7G/lEgnw2D8N5XC4LzpHP58i7UGkoVIidwxkY\nxTT3AZ8wLJEsnUhOJv16qTSdD22h66/+jtS+A/6E/h13wI031v29jEc9/wVPAKvNbBWwF7gBeG/F\nOq8AlwNfMrNzgBbgECIN4pzzQUPhsTAfluXyuWLoOBwJEpgZCUsUJzPDsPoek0lsMjXwyp1CtR1F\n9I5V1Y4iKptDau0oCjsDB77W+GvXQjaDfeYzsG8/LF9OduNHyf761eQz/cXfVzafJUfeP3dZsi4/\nIqAdDrOEr277OigJEiTMMEsUfs+QIkFTsqXsd9b70Q8x/xOfJBG5riDf0kLvRz9Ee8cp0HEKRM5R\nO6B2bEd+B339JE6cwLpPkOg+gXV3F58nThQeu3uwEz0kjx3DKoO9IHnkGItu+L2RX11bK669nXxH\nO64jPHaQ7+zAFZdFnrcXXi/Ot+Ha23yw5/OQ8d936wPfYv7tnyYxWBhE7+WXYcMG/3wKAr6uK1TN\n7Frgc/hujl90zt1hZrcD25xzDxZ6yHwB6MB/Rxudc1tGe081y8wtleFcGdAhmIu1wsLzXD5HntL6\nxVpSNOMcPpAL4VxaXHE4HNoDxvGYSCSq7ihGm6LlCIfhoRxhW8PzyscRy/I5cHnyuTwun8M5/0i+\nsG4+Tz6f9bXJ4k4hi8vlsXzeL3d5v03hd2i+dAn8UUICI1HYPgMSNtZFZpW/qNpaH95K59/dQ/K1\ng+ROXULPH32AgV+7auRRigE2NU1aSy77NVL7XhuxPLeoi+N3/U+stw/r7SPR24f19pLo6Y3M95Ho\n88ujy6yOE9f5lmZcYSeQ72gn/dwLWOjBFHXGGfDSS3Vvj4YfkIZxzo2oMVeGdDSYowEdXisduY4M\naOdcMRiBYkAWw7JQm54OYdtHewTKlpVlXvj3Km6yf1K5IwrLwjrR55WvVf78hH434f++1uN416nn\nZyp7w2SzfscT3THVDM0qO5LoeY/KKWF+fTNaH/pu1SOI7k9+goG3X1PrN1Sbc1j/QCHse8t3Dn29\n/rGnt7QjKKzX/MN/q74rNKuvl1NxdQ0/IIwezNGaczafJedyxcP1ylpzZUiFeX/Y7oMmWmtNWIJk\nIknCEjTTPG3hPFnFEJ2dxa8tejXqTFPZnFXZNTJ67iNM0Z1DPg/Z0kn1gcvfCkMfKz+C+OD7/fK+\nvpGfHz0pXnni3AAM11Zon1+6uO7NqnUEUffFdOOkcJ+lQo14ODfMUG6odGIrnyuGdL7QnmpYMYT9\nDxfeJFKbrFZrbko1TWutWeaocN1CozjHwB9uYOAP3j9yZxHdYdTqb19jpzGe2jZAzwffz/zb7yq1\nuYO/LuCOOxq3rREK91kil8+RyWcYyg7Rl+mjP9NfDO5EIlFWc05YgnQyXZwXmdOmst96tZ1FjWng\npvdCewcdn/4sqf0HsBnQW0ZOMuccmXyG4dwwA5kBeod7yeQKQ+qa7yPbkmop1rZFZJqMs9vqwO/9\nNkd/+7eY1zyPxe31N+lMhMJ9Bsjms2RyGQazg/QN9zGQHSDv8pgZSUuSTqZpTk1gJEERmbMU7ieZ\nc47h3DDDuWH6M/30DfeRddlij5F0Mk1buk3NKSIyKQr3KRZOeg5mB+kd7mUwO1jsDphKpkgn07Qk\nWqa7mCISMwr3Bsq7vK+VZ4fLTno6HMlEknQiTXu6XbVyEZlyCvcJCl0OM7kMA5kB+jJ9DGYHi/2i\nk4kkzalmnfQUkWmhcK9QvHjH5csu6gnt5OHkZ+g37pwjlfDNK53NndNdfBERYA6Fu3OudHFPIbgz\nuUxZcOdcjnw+X7rgp3B9QyJRGjcklUjRlGxS04rMaJuf2cydP76TfT37WN65nE2XbOId5zTgrlQq\nx6TL8akff4r9Pfs5ff7p3HH5Hdy4Vv3cqwqX0EeDO9SuQ1/xTD5TvIQ+Gtzhgp9kIkkykaTJFNoy\n+21+ZjMbt25kIOuH/N3bs5eNWzcCnNRAUzlGL8fL3S+z4SE/KuRUBPysHDisZ6iH44PHfc3bFQYJ\njQR3uFozOr6J2r7jbybUzqarDJlchp7hHnqHe7nua9dxsG/krRQWtCxg41s2Fq92Dk2O9UzRnyn+\nrMuSzWXLHsPr2XyWV7tfJedG3sUpYQmWdSzz/5sVI24mLTnq/ESmLS9sKQZqVHu6nXee+86y0TzD\nZ5YNXofPkbJyVC6jsDyRKJ8Py0hw66O3cmzw2IhynDH/DF768Et1f9exHjisP9PPUG6IllQLLaZu\nhDIzamcTKUMml6F3uJee4R4fzkOF50M9xbAumx8qrdszVHp9MFt9zPKo44PH+fj3P171tdDkGC6a\niz6mEqlRp9ZkK6mm0nzoGfbS8Zeqflbe5fml036pfPC6wjhIo82H82HOOTIuUxouOl96vdp8tWAH\n6Mv08dBzD5WVI+dyIwbVq7aDaqRXul+ZkvedleEOqDY+g5zs2mre5enP9JdNt//w9hH/xAPZAW59\n9Faakk3FkTDDEd6IoXsrl43xOpSPUe9wfPYnn61ahj/d+qd8+7lvVw3rekI5YQnmNc2jo7mDzqZO\nOpo6WNS2iFULVtHR5Jd1Nnf615o7+OSPPsnRgaMj3ufUjlP5zo3fqRrQU/G/9NO9P2Vvz8jb/a3o\nXMHnrv5cwz+vlvVfWF+zHD99f323Hay890BdE4UdTWH+t+7/LQ70jbwz1enzNSqkzEC1aqu5fI6r\nXn+VD99sPwOZgRGBHKay17I1lkeWDebGDsTg6MBRfv9bvz9Vm1+X/mw/L3e/TEdTB12tXZyx4Awf\nyIUwLgvnirDubO6kNdU6rnNB6US67DsBaE21csult7CkfclUbGJVmy7ZVLUcmy6p/3Z/M6UcYSiQ\nJBMfrfITb/3EiHK0pdu443KNCinTwDlH91A3h/sPc6T/CIf7D3N44DBH+49yuP8wX9/19aq11Q8/\n8uFxfU5Tsom2VBut6Vba0m3FaWHrQlbMW1Faliq9Fl3349//OEcGjox43yXtS/jqO7464jZ7UBqr\nvfIWe+EGIRTuj1nvrfmu+Ocr2N+7f0QZVnSu4Hs3fW9cv4/JCEdN033+QeWoXo6T1VtmVp5QPdB7\ngL5MHy2pud3ePtHmkIHMgA/rgSMjQjs6f6T/CEcGjpDJZ6q+z4KWBRwfPF7zc259261lQV0WyBUh\nnUpMrp5ReQQBvnZ215V3TVub+3SUQWa+gczApEaFjPUJVaneHPInW/6Enx/+OecsOmdEUEfDvD/T\nX/U929JtLGpbRFdrF8s7l3P+0vPpauuiq7WLRW2L/GttXSxqXcTC1oWkk+lR2zM3vHnDlP4OomZC\n7WwmlEEkUM19FnHOsa9nHzsP7uSPv/vH9Az3jLp+KpGiq7XLB3LbIha1Lio9jwR1eN6Wbht3mVRb\nFRkf1dznuLzL8+KxF9l5cGdxevrg06M2g4BvI370vz3KorZFzG+eP+UXZam2KjIzKdxngOHcMM8d\nea4syHcd2lVsPmlKNvGGRW/g2rOu5bwl57F2yVo+8O0PsK9n34j3Wt65nLMWnnVSy/+Oc96hMBeZ\nYRTuJ1l/pp9dh3ax6+CuYm382cPPFk9atqfbOW/Jedxw3g2sWbqGNUvWsHrhapqSTWXvc/MlN8+I\nbmYiMjMp3Ceg3l4qxwaOsfPQzrIgf+HoC7jCiGSntJzC2qVref8F7y8G+aoFq+q6oETNISIyGoX7\nONW6aKd7sJuV81f6ZpUDO9l5aCd7Tuwp/tzyzuWsWbKGt5/9dtYuXct5S85jecfySbWJqzlERGpR\nuI/TnT++s+pFO5/4wSeK86875XVcsOwCbjr/JtYuXcuaJWtY2LrwZBdVROYwhfsYDvUdYvuB7ex4\nbQc7Duyo2qc7+Oa7v8m5i8+lo6njJJZQRGQkhXvE8cHjPHXgKXYc2MGO13aw/bXtxcvJE5Zg9cLV\ntKXbql4EtKJzBetXrD/ZRRYRqWrOhnt/pp+nDzzN9gPbeeq1p9h+YHvZEKVnLjiT9SvWs+7Udbxx\n6RtZs2QN7U3tNS/aUS8VEZlJ5kS4D2WH+Nmhn/kaeaFW/vzR5/0QsMCyjmW88dQ3csOaG1i3dB3n\nLz2fBS0Lqr6XeqnIdKscazw6H07QO+f84GeB4W8baRSHLC7eSjLyWuXdyoqDpxUGSCu+XY0B1Cpf\nm6rtr7qcGssr1p/q8s0Usyrc7336Xm75/i280v0KyzqXcfMlN48I1Ww+y3NHniu2ke84sINnDj1T\n7Efe1drFulPXce3qa1l36jrWLV037mFQ1UtFGq3azSKiN4moDOt0Ml28n29Tsql4k4xwF6HoXcjC\nz0fHpK+2bMR49YXnleOU11oedjRAcSzz6A4DKN/hhG0LO5ORL1RlVj2Ywwie1dYf8buuKF9lOYs/\nV7HzG21HVutxusyacL/36XvZ8NCGYnv3vp59bNy6kQO9B1jasZTtr21nx4Ed7Dy4s3gDhM6mTs5f\nej4b3ryBdUvXse7UdazoXBH7PbbMDJWBHabwWggIhysGcyqRojXVOuJGGpO9ZWQxkE7yn37lDqPW\n/161UB5t/Uap3LGFHWutnV49N+koHk1FdiDRo4e8y9fc3kaaNQOHnfm5M3m5++War7ekWli7ZG2x\nNr7u1HV1XxAkUvkPXOuf2/nq3Yimi2rLwv04Q8061LSrhbX+TuOp1t9Q0pIkExO78UfsBg4b7T6D\nW39nK2d3nT3pMcFl+kWbBMJ8redhvWgFpTKEawVv5bJwE+NqoRv+EaM3Ug43Ya92k4+ZcEguM8N0\nHTFBneFuZlcDnweSwD865+6sss71wG34f58dzrn3NrCcnD7/9Ko19xWdKzh38bmN/CipQ7hZcbHJ\nIV9obogEZlmgQvHwNPyxR58XfrjYnprA12RDaEL5fXNrLQvPU4nUiPbPyjCOLhOJmzHD3cySwN3A\nlcAe4Akze9A597PIOquBm4G3OOeOmVnDb9R4x+V3lLW5g7ogTpXK4A43jI6eWEpZinQyTUuqpeyE\nXvREE1BWg618Htar/BkRmbx6au7rgd3OuRcBzOxrwHXAzyLrvB+42zl3DMA5d7DRBQ33GRyrt4yM\nLvTCyOVzxZM/lT0CkpYknUzTmmwt9sYIJ/zCo4JYZGarJ9xXAK9G5vcAF1WsczaAmf0bvunmNufc\ndyvfyMwDtFuLAAAKs0lEQVQ2ABsATj/99HEX9sa1N3Lj2hvn7J2YxjJacId26WQiSTpRqnEruEXi\nqZ5wr/afXtnFJgWsBi4DVgL/amZrnHNltw1yzt0D3AO+t8y4SyvFAM/kMmX9oMNJwWhwpxNpH9iR\n8FavDJG5oZ5w3wOcFplfCVTeAmgP8JhzLgP8l5k9iw/7JxpSyjkqm88WJ/DBnrAETckmOpo6RrR3\nK7hFJKgn3J8AVpvZKmAvcANQ2RPm/wLvAb5kZovwzTQvNrKgcVYZ4kFToon2dHtZiIdeICIioxkz\n3J1zWTP7IPAIvj39i865XWZ2O7DNOfdg4bWrzOxnQA74mHPuyFQWfDZSiIvIyVJXP3fn3MPAwxXL\n/jzy3AEfKUxzXj0hnk6mSSfSCnERmRK6pHMScvkcmXym2DslhLRCXESmm8J9nIZzwwxnh3E40sm0\nQlxEZiSF+xiccwzlhsjk/JDBrelWlnYspTXtL/AREZmJFO5V5F2eoewQ2XwWM6OjqYMl7UtoSbVo\ncDIRmRWUVAW5fI6h3BC5fI5kIsm85nnFvuTqPy4is82cDvdMLsNwzrefpxIpFrYupC3dRnOyWe3m\nIjKrzalwd84xnBsu3nKvJdXCkvYlaj8XkdiJfbhH288TlqC9qZ3FzYvVfi4isRbLdIu2nycswfyW\n+Wo/F5E5JTbhHtrP8y5POpHmlJZTaG9qV/u5iMxJszrch7JDZPIZnHNqPxcRiZiV4W5mZHIZ2tPt\ndLV20dbUpvZzEZGIWZmIXa1ddLV2kUwkp7soIiIz0qwMd4W6iMjo1HVERCSGFO4iIjGkcBcRiSGF\nu4hIDCncRURiSOEuIhJDCncRkRhSuIuIxJDCXUQkhhTuIiIxpHAXEYkhhbuISAwp3EVEYkjhLiIS\nQwp3EZEYUriLiMSQwl1EJIYU7iIiMaRwFxGJIYW7iEgMKdxFRGKornA3s6vN7Fkz221mm0ZZ751m\n5szswsYVUURExmvMcDezJHA3cA1wLvAeMzu3ynqdwB8Bjze6kCIiMj711NzXA7udcy8654aBrwHX\nVVnvL4C7gMEGlk9ERCagnnBfAbwamd9TWFZkZm8CTnPOfWu0NzKzDWa2zcy2HTp0aNyFFRGR+tQT\n7lZlmSu+aJYAPgt8dKw3cs7d45y70Dl34eLFi+svpYiIjEs94b4HOC0yvxLYF5nvBNYAj5rZS8DF\nwIM6qSoiMn3qCfcngNVmtsrMmoAbgAfDi865bufcIufcmc65M4HHgLc757ZNSYlFRGRMY4a7cy4L\nfBB4BHgGuN85t8vMbjezt091AUVEZPxS9azknHsYeLhi2Z/XWPeyyRdLREQmQ1eoiojEkMJdRCSG\nFO4iIjGkcBcRiSGFu4hIDCncRURiSOEuIhJDCncRkRhSuIuIxJDCXUQkhhTuIiIxpHAXEYkhhbuI\nSAwp3EVEYkjhLiISQwp3EZEYUriLiMSQwl1EJIYU7iIiMaRwFxGJIYW7iEgMKdxFRGJI4S4iEkMK\ndxGRGFK4i4jEkMJdRCSGFO4iIjGkcBcRiSGFu4hIDCncRURiSOEuIhJDCncRkRhSuIuIxJDCXUQk\nhuoKdzO72syeNbPdZrapyusfMbOfmdlTZvZ9Mzuj8UUVEZF6jRnuZpYE7gauAc4F3mNm51as9p/A\nhc6584FvAHc1uqAiIlK/emru64HdzrkXnXPDwNeA66IrOOd+4JzrL8w+BqxsbDFFRGQ86gn3FcCr\nkfk9hWW1vA/4TrUXzGyDmW0zs22HDh2qv5QiIjIu9YS7VVnmqq5o9tvAhcBfVXvdOXePc+5C59yF\nixcvrr+UIiIyLqk61tkDnBaZXwnsq1zJzK4AbgHe5pwbakzxRERkIuqpuT8BrDazVWbWBNwAPBhd\nwczeBPwD8Hbn3MHGF1NERMZjzHB3zmWBDwKPAM8A9zvndpnZ7Wb29sJqfwV0AP/HzLab2YM13k5E\nRE6CepplcM49DDxcsezPI8+vaHC5RERkEnSFqohIDCncRURiSOEuIhJDCncRkRhSuIuIxJDCXUQk\nhhTuIiIxpHAXEYkhhbuISAwp3EVEYkjhLiISQwp3EZEYUriLiMSQwl1EJIYU7iIiMaRwFxGJIYW7\niEgMKdxFRGJI4S4iEkMKdxGRGFK4i4jEkMJdRCSGFO4iIjGkcBcRiSGFu4hIDCncRURiSOEuIhJD\nCncRkRhSuIuIxJDCXUQkhhTuIiIxpHAXEYkhhbuISAwp3EVEYkjhLiISQ3WFu5ldbWbPmtluM9tU\n5fVmM/t64fXHzezMRhdURETqN2a4m1kSuBu4BjgXeI+ZnVux2vuAY865s4DPAp9udEFFRKR+9dTc\n1wO7nXMvOueGga8B11Wscx3w5cLzbwCXm5k1rpgiIjIeqTrWWQG8GpnfA1xUax3nXNbMuoEu4HB0\nJTPbAGwozPaa2bMTKfQ0WUTF9swhc3Xb5+p2g7Z9Jm/7GfWsVE+4V6uBuwmsg3PuHuCeOj5zxjGz\nbc65C6e7HNNhrm77XN1u0LbHYdvraZbZA5wWmV8J7Ku1jpmlgPnA0UYUUERExq+ecH8CWG1mq8ys\nCbgBeLBinQeB3y08fyfwL865ETV3ERE5OcZslim0oX8QeARIAl90zu0ys9uBbc65B4F/Ar5iZrvx\nNfYbprLQ02RWNic1yFzd9rm63aBtn/VMFWwRkfjRFaoiIjGkcBcRiSGFew1m9pKZPW1m281sW2HZ\nQjPbambPFx5Pme5yTpaZfdHMDprZzsiyqttp3t8Whpl4yswumL6ST16Nbb/NzPYWvvftZnZt5LWb\nC9v+rJn96vSUevLM7DQz+4GZPWNmu8zsjwvLY/+9j7Lt8fvenXOaqkzAS8CiimV3AZsKzzcBn57u\ncjZgO98KXADsHGs7gWuB7+Cva7gYeHy6yz8F234b8CdV1j0X2AE0A6uAF4DkdG/DBLd7GXBB4Xkn\n8Fxh+2L/vY+y7bH73lVzH5/oMAtfBn5jGsvSEM65HzHymoRa23kd8M/OewxYYGbLTk5JG6/Gttdy\nHfA159yQc+6/gN34oTlmHefcfufcfxSe9wDP4K8yj/33Psq21zJrv3eFe20O2GJmTxaGTQBY6pzb\nD/6PBFgybaWbWrW2s9pQFKP9Y8xWHyw0P3wx0vQWy20vjOD6JuBx5tj3XrHtELPvXeFe21uccxfg\nR8P8QzN763QXaAaoa5iJWe7vgdcDbwT2A39dWB67bTezDuAB4MPOuROjrVplWdy2PXbfu8K9Bufc\nvsLjQeCb+EOxA+FwtPB4cPpKOKVqbWc9Q1HMas65A865nHMuD3yB0iF4rLbdzNL4cLvXObe5sHhO\nfO/Vtj2O37vCvQozazezzvAcuArYSfkwC78L/L/pKeGUq7WdDwI3FXpPXAx0h8P4uKhoS/5N/PcO\nfttvKNyYZhWwGvjpyS5fIxSG4/4n4Bnn3N9EXor9915r22P5vU/3Gd2ZOAGvw58h3wHsAm4pLO8C\nvg88X3hcON1lbcC23oc/DM3gaynvq7Wd+EPUu/E9Bp4GLpzu8k/Btn+lsG1P4f+xl0XWv6Ww7c8C\n10x3+Sex3ZfgmxaeArYXpmvnwvc+yrbH7nvX8AMiIjGkZhkRkRhSuIuIxJDCXUQkhhTuIiIxpHAX\nEYkhhbuISAwp3EVEYuj/A7XdEfvjxyLeAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x112f7a1d0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n/wevrclR+tR+8gAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x1131e5cd0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from matplotlib import pyplot as plt\n",
    "from sklearn.learning_curve import learning_curve\n",
    "from sklearn.model_selection import ShuffleSplit\n",
    "from sklearn.ensemble import GradientBoostingClassifier\n",
    "#from sklearn.naive_bayes import GaussianNB\n",
    "#from sklearn.linear_model import SGDClassifier\n",
    "#from sklearn.ensemble import RandomForestClassifier\n",
    "#from sklearn.ensemble import AdaBoostClassifier\n",
    "\n",
    "#from sklearn.model_selection import KFold\n",
    "#cv = list(KFold(n_splits=40, random_state=20, shuffle=True).split(X_train, y_train))\n",
    "\n",
    "def plot_LCurve(train_sizes, train_scores, test_scores):\n",
    "    train_scores_mean = np.mean(train_scores, axis=1)\n",
    "    train_scores_std = np.std(train_scores, axis=1)\n",
    "    test_scores_mean = np.mean(test_scores, axis=1)\n",
    "    test_scores_std = np.std(test_scores, axis=1)\n",
    "\n",
    "    plt.figure()\n",
    "    plt.fill_between(train_sizes, train_scores_mean - train_scores_std,\n",
    "                     train_scores_mean + train_scores_std, alpha=0.1, color=\"r\")\n",
    "    plt.fill_between(train_sizes, test_scores_mean - test_scores_std,\n",
    "                     test_scores_mean + test_scores_std, alpha=0.1, color=\"g\")\n",
    "    plt.plot(train_sizes, train_scores_mean, 'o-', color=\"r\", label=\"Training score\")\n",
    "    plt.plot(train_sizes, test_scores_mean, 'o-', color=\"g\", label=\"Cross-validation score\")\n",
    "    plt.title(test_scores_mean[len(test_scores_mean)-1])\n",
    "    plt.ylim([0,1])\n",
    "    plt.show()\n",
    "\n",
    "clf_1 = GradientBoostingClassifier(n_estimators=20, learning_rate=0.0852, max_depth=2)\n",
    "clf_2 = GradientBoostingClassifier(n_estimators=30, learning_rate=0.0852, max_depth=2)\n",
    "clf_3 = GradientBoostingClassifier(n_estimators=40, learning_rate=0.0852, max_depth=2)\n",
    "   \n",
    "\n",
    "cv = ShuffleSplit(n_splits=50, test_size=0.1, random_state=0).split(X_train, y_train)    \n",
    "train_sizes, train_scores, test_scores = learning_curve(\n",
    "    clf_1, X_train, y_train, cv=cv, n_jobs=1, train_sizes=np.linspace(.1, 1.0, 10))\n",
    "plot_LCurve(train_sizes, train_scores, test_scores)\n",
    "\n",
    "cv = ShuffleSplit(n_splits=50, test_size=0.1, random_state=0).split(X_train, y_train)\n",
    "train_sizes, train_scores, test_scores = learning_curve(\n",
    "    clf_2, X_train, y_train, cv=cv, n_jobs=1, train_sizes=np.linspace(.1, 1.0, 10))\n",
    "plot_LCurve(train_sizes, train_scores, test_scores)\n",
    "\n",
    "cv = ShuffleSplit(n_splits=50, test_size=0.1, random_state=0).split(X_train, y_train)\n",
    "train_sizes, train_scores, test_scores = learning_curve(\n",
    "    clf_3, X_train, y_train, cv=cv, n_jobs=1, train_sizes=np.linspace(.1, 1.0, 10))\n",
    "plot_LCurve(train_sizes, train_scores, test_scores)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 160,
   "metadata": {
    "collapsed": false,
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x10f605690>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\nBf4AAAAASUVORK5CYII=\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x1131a1550>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x11316e150>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from matplotlib import pyplot as plt\n",
    "from sklearn.learning_curve import learning_curve\n",
    "from sklearn.model_selection import ShuffleSplit\n",
    "#from sklearn.ensemble import GradientBoostingClassifier\n",
    "#from sklearn.naive_bayes import GaussianNB\n",
    "#from sklearn.linear_model import SGDClassifier\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "#from sklearn.ensemble import AdaBoostClassifier\n",
    "\n",
    "#from sklearn.model_selection import KFold\n",
    "#cv = list(KFold(n_splits=40, random_state=20, shuffle=True).split(X_train, y_train))\n",
    "\n",
    "def plot_LCurve(train_sizes, train_scores, test_scores):\n",
    "    train_scores_mean = np.mean(train_scores, axis=1)\n",
    "    train_scores_std = np.std(train_scores, axis=1)\n",
    "    test_scores_mean = np.mean(test_scores, axis=1)\n",
    "    test_scores_std = np.std(test_scores, axis=1)\n",
    "\n",
    "    plt.figure()\n",
    "    plt.fill_between(train_sizes, train_scores_mean - train_scores_std,\n",
    "                     train_scores_mean + train_scores_std, alpha=0.1, color=\"r\")\n",
    "    plt.fill_between(train_sizes, test_scores_mean - test_scores_std,\n",
    "                     test_scores_mean + test_scores_std, alpha=0.1, color=\"g\")\n",
    "    plt.plot(train_sizes, train_scores_mean, 'o-', color=\"r\", label=\"Training score\")\n",
    "    plt.plot(train_sizes, test_scores_mean, 'o-', color=\"g\", label=\"Cross-validation score\")\n",
    "    plt.title(test_scores_mean[len(test_scores_mean)-1])\n",
    "    plt.ylim([0,1])\n",
    "    plt.show()\n",
    "\n",
    "clf_1 = RandomForestClassifier(n_estimators=30, max_depth=4)\n",
    "clf_2 = RandomForestClassifier(n_estimators=30, max_depth=4)\n",
    "clf_3 = RandomForestClassifier(n_estimators=30, max_depth=4)\n",
    "   \n",
    "\n",
    "cv = ShuffleSplit(n_splits=50, test_size=0.1, random_state=0).split(X_train, y_train)    \n",
    "train_sizes, train_scores, test_scores = learning_curve(\n",
    "    clf_1, X_train, y_train, cv=cv, n_jobs=1, train_sizes=np.linspace(.1, 1.0, 10))\n",
    "plot_LCurve(train_sizes, train_scores, test_scores)\n",
    "\n",
    "cv = ShuffleSplit(n_splits=50, test_size=0.1, random_state=0).split(X_train, y_train)\n",
    "train_sizes, train_scores, test_scores = learning_curve(\n",
    "    clf_2, X_train, y_train, cv=cv, n_jobs=1, train_sizes=np.linspace(.1, 1.0, 10))\n",
    "plot_LCurve(train_sizes, train_scores, test_scores)\n",
    "\n",
    "cv = ShuffleSplit(n_splits=50, test_size=0.1, random_state=0).split(X_train, y_train)\n",
    "train_sizes, train_scores, test_scores = learning_curve(\n",
    "    clf_3, X_train, y_train, cv=cv, n_jobs=1, train_sizes=np.linspace(.1, 1.0, 10))\n",
    "plot_LCurve(train_sizes, train_scores, test_scores)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Choosing the Best Model\n",
    "In this final section, you will choose from the three supervised learning models the *best* model to use on the student data. You will then perform a grid search optimization for the model over the entire training set (`X_train` and `y_train`) by tuning at least one parameter to improve upon the untuned model's F<sub>1</sub> score. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Question 3 - Choosing the Best Model\n",
    "*Based on the experiments you performed earlier, in one to two paragraphs, explain to the board of supervisors what single model you chose as the best model. Which model is generally the most appropriate based on the available data, limited resources, cost, and performance?*"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Answer: **\n",
    "what domain knowledge do I have?\n",
    "\n",
    "dimensions are too high for the number of data points we have for KNN method.\n",
    "\n",
    "Comparing the three models, with the default settings, support vector machine classifier delivers the best F1 score, hence the best accuracy of all, however KNN and decision tree classifiers, respectively have shorter calculation times. \n",
    "Decision tree classifier (DTC) is obviously overfitting the training set with the default setting. To have a fair comparison between the tree models, it would be a good idea to limit the max_depth to avoid overfitting. After setting max_depth=2, DTC slightly outperforms SVC in any aspect. However, SVC supports arbitrary boundary directions, and we are not dealing with a huge data set here, I tend to chose SVC over DTC. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Question 4 - Model in Layman's Terms\n",
    "*In one to two paragraphs, explain to the board of directors in layman's terms how the final model chosen is supposed to work. Be sure that you are describing the major qualities of the model, such as how the model is trained and how the model makes a prediction. Avoid using advanced mathematical or technical jargon, such as describing equations or discussing the algorithm implementation.*"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Answer: **"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Implementation: Model Tuning\n",
    "Fine tune the chosen model. Use grid search (`GridSearchCV`) with at least one important parameter tuned with at least 3 different values. You will need to use the entire training set for this. In the code cell below, you will need to implement the following:\n",
    "- Import [`sklearn.grid_search.gridSearchCV`](http://scikit-learn.org/stable/modules/generated/sklearn.grid_search.GridSearchCV.html) and [`sklearn.metrics.make_scorer`](http://scikit-learn.org/stable/modules/generated/sklearn.metrics.make_scorer.html).\n",
    "- Create a dictionary of parameters you wish to tune for the chosen model.\n",
    " - Example: `parameters = {'parameter' : [list of values]}`.\n",
    "- Initialize the classifier you've chosen and store it in `clf`.\n",
    "- Create the F<sub>1</sub> scoring function using `make_scorer` and store it in `f1_scorer`.\n",
    " - Set the `pos_label` parameter to the correct value!\n",
    "- Perform grid search on the classifier `clf` using `f1_scorer` as the scoring method, and store it in `grid_obj`.\n",
    "- Fit the grid search object to the training data (`X_train`, `y_train`), and store it in `grid_obj`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 182,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "30\n",
      "Made predictions in 0.0079 seconds.\n",
      "Tuned model has a training F1 score of 0.8211.\n",
      "Made predictions in 0.0037 seconds.\n",
      "Tuned model has a testing F1 score of 0.8228.\n"
     ]
    }
   ],
   "source": [
    "# TODO: Import 'GridSearchCV' and 'make_scorer'\n",
    "from sklearn.grid_search import GridSearchCV\n",
    "from sklearn.metrics import make_scorer\n",
    "from sklearn.cross_validation import KFold\n",
    "\n",
    "# TODO: Create the parameters list you wish to tune\n",
    "parameters = {'n_neighbors':[1, 10, 30]}\n",
    "cv1 = KFold(X_train.shape[0], n_folds=6, random_state=20, shuffle=False)\n",
    "\n",
    "# TODO: Initialize the classifier\n",
    "clf = KNeighborsClassifier()\n",
    "\n",
    "# TODO: Make an f1 scoring function using 'make_scorer' \n",
    "f1_scorer = make_scorer(f1_score)\n",
    "\n",
    "# TODO: Perform grid search on the classifier using the f1_scorer as the scoring method\n",
    "grid_obj = GridSearchCV(estimator=clf, param_grid=parameters, cv=cv1)\n",
    "\n",
    "# TODO: Fit the grid search object to the training data and find the optimal parameters\n",
    "grid_obj.fit(X_train, y_train)\n",
    "\n",
    "# Get the estimator\n",
    "clf = grid_obj.best_estimator_\n",
    "print(grid_obj.best_estimator_.n_neighbors)\n",
    "# Report the final F1 score for training and testing after parameter tuning\n",
    "print \"Tuned model has a training F1 score of {:.4f}.\".format(predict_labels(clf, X_train, y_train))\n",
    "print \"Tuned model has a testing F1 score of {:.4f}.\".format(predict_labels(clf, X_test, y_test))\n",
    "\n",
    "#Made predictions in 0.0103 seconds.\n",
    "#Tuned model has a training F1 score of 0.8211.\n",
    "#Made predictions in 0.0036 seconds.\n",
    "#Tuned model has a testing F1 score of 0.8228."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 152,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Made predictions in 0.0085 seconds.\n",
      "Tuned model has a training F1 score of 0.8270.\n",
      "Made predictions in 0.0021 seconds.\n",
      "Tuned model has a testing F1 score of 0.8105.\n"
     ]
    }
   ],
   "source": [
    "# TODO: Import 'GridSearchCV' and 'make_scorer'\n",
    "from sklearn.grid_search import GridSearchCV\n",
    "from sklearn.metrics import make_scorer\n",
    "from sklearn.cross_validation import ShuffleSplit\n",
    "\n",
    "# TODO: Create the parameters list you wish to tune\n",
    "parameters = [\n",
    "  {'C': [0.1, 100], 'kernel': ['linear']},\n",
    "  {'C': [0.1, 100], 'gamma': [0.001, 0.0001], 'kernel': ['rbf']}\n",
    " ]\n",
    "#{'C':[0.001, 100]}\n",
    "\n",
    "cv = ShuffleSplit(X_train.shape[0], n_iter=10, test_size=0.2, random_state=0)\n",
    "cv1 = list(KFold(n_splits=5, random_state=20, shuffle=False).split(X_train, y_train))\n",
    "\n",
    "# TODO: Initialize the classifier\n",
    "clf = SVC()\n",
    "\n",
    "# TODO: Make an f1 scoring function using 'make_scorer' \n",
    "f1_scorer = make_scorer(f1_score)\n",
    "\n",
    "# TODO: Perform grid search on the classifier using the f1_scorer as the scoring method\n",
    "grid_obj = GridSearchCV(estimator=clf, param_grid=parameters, cv=cv1)\n",
    "\n",
    "# TODO: Fit the grid search object to the training data and find the optimal parameters\n",
    "grid_obj.fit(X_train, y_train)\n",
    "\n",
    "# Get the estimator\n",
    "clf = grid_obj.best_estimator_\n",
    "\n",
    "# Report the final F1 score for training and testing after parameter tuning\n",
    "print \"Tuned model has a training F1 score of {:.4f}.\".format(predict_labels(clf, X_train, y_train))\n",
    "print \"Tuned model has a testing F1 score of {:.4f}.\".format(predict_labels(clf, X_test, y_test))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Made predictions in 0.0003 seconds.\n",
      "Tuned model has a training F1 score of 0.8263.\n",
      "Made predictions in 0.0002 seconds.\n",
      "Tuned model has a testing F1 score of 0.8169.\n"
     ]
    }
   ],
   "source": [
    "# TODO: Import 'GridSearchCV' and 'make_scorer'\n",
    "from sklearn.grid_search import GridSearchCV\n",
    "from sklearn.metrics import make_scorer\n",
    "from sklearn.model_selection import ShuffleSplit\n",
    "from sklearn.model_selection import KFold\n",
    "\n",
    "# TODO: Create the parameters list you wish to tune\n",
    "parameters = [{'max_iter': [50, 200, 300]},\n",
    "               {'C':[10, 100]}]\n",
    "\n",
    "#cv = ShuffleSplit(X_train.shape[0], n_iter=10, test_size=0.2, random_state=0)\n",
    "cv1 = list(KFold(n_splits=2, random_state=20, shuffle=False).split(X_train, y_train))\n",
    "\n",
    "# TODO: Initialize the classifier\n",
    "clf = LogisticRegression()\n",
    "\n",
    "# TODO: Make an f1 scoring function using 'make_scorer' \n",
    "f1_scorer = make_scorer(f1_score)\n",
    "\n",
    "# TODO: Perform grid search on the classifier using the f1_scorer as the scoring method\n",
    "grid_obj = GridSearchCV(estimator=clf, param_grid=parameters, cv=cv1)\n",
    "\n",
    "# TODO: Fit the grid search object to the training data and find the optimal parameters\n",
    "grid_obj.fit(X_train, y_train)\n",
    "\n",
    "# Get the estimator\n",
    "clf = grid_obj.best_estimator_\n",
    "\n",
    "# Report the final F1 score for training and testing after parameter tuning\n",
    "print \"Tuned model has a training F1 score of {:.4f}.\".format(predict_labels(clf, X_train, y_train))\n",
    "print \"Tuned model has a testing F1 score of {:.4f}.\".format(predict_labels(clf, X_test, y_test))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Question 5 - Final F<sub>1</sub> Score\n",
    "*What is the final model's F<sub>1</sub> score for training and testing? How does that score compare to the untuned model?*"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Answer: **"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "> **Note**: Once you have completed all of the code implementations and successfully answered each question above, you may finalize your work by exporting the iPython Notebook as an HTML document. You can do this by using the menu above and navigating to  \n",
    "**File -> Download as -> HTML (.html)**. Include the finished document along with this notebook as your submission."
   ]
  }
 ],
 "metadata": {
  "anaconda-cloud": {},
  "kernelspec": {
   "display_name": "Python [conda root]",
   "language": "python",
   "name": "conda-root-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
