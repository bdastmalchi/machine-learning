{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Machine Learning Engineer Nanodegree\n",
    "## Supervised Learning\n",
    "## Project 2: Building a Student Intervention System"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Welcome to the second project of the Machine Learning Engineer Nanodegree! In this notebook, some template code has already been provided for you, and it will be your job to implement the additional functionality necessary to successfully complete this project. Sections that begin with **'Implementation'** in the header indicate that the following block of code will require additional functionality which you must provide. Instructions will be provided for each section and the specifics of the implementation are marked in the code block with a `'TODO'` statement. Please be sure to read the instructions carefully!\n",
    "\n",
    "In addition to implementing code, there will be questions that you must answer which relate to the project and your implementation. Each section where you will answer a question is preceded by a **'Question X'** header. Carefully read each question and provide thorough answers in the following text boxes that begin with **'Answer:'**. Your project submission will be evaluated based on your answers to each of the questions and the implementation you provide.  \n",
    "\n",
    ">**Note:** Code and Markdown cells can be executed using the **Shift + Enter** keyboard shortcut. In addition, Markdown cells can be edited by typically double-clicking the cell to enter edit mode."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Question 1 - Classification vs. Regression\n",
    "*Your goal for this project is to identify students who might need early intervention before they fail to graduate. Which type of supervised learning problem is this, classification or regression? Why?*"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Answer: **\n",
    "\n",
    "Based on the historical data, we would like to categorize the students into two groups: \n",
    "\n",
    "1- The ones who are likely to pass\n",
    "\n",
    "2- The ones who are likely to fail, hence, would need early intervension. \n",
    "\n",
    "Therefore, we are dealing with a classification problem with a binary outcome."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Exploring the Data\n",
    "Run the code cell below to load necessary Python libraries and load the student data. Note that the last column from this dataset, `'passed'`, will be our target label (whether the student graduated or didn't graduate). All other columns are features about each student."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Student data read successfully!\n"
     ]
    }
   ],
   "source": [
    "# Import libraries\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "from time import time\n",
    "from sklearn.metrics import f1_score\n",
    "\n",
    "# Read student data\n",
    "student_data = pd.read_csv(\"student-data.csv\")\n",
    "print \"Student data read successfully!\""
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Implementation: Data Exploration\n",
    "Let's begin by investigating the dataset to determine how many students we have information on, and learn about the graduation rate among these students. In the code cell below, you will need to compute the following:\n",
    "- The total number of students, `n_students`.\n",
    "- The total number of features for each student, `n_features`.\n",
    "- The number of those students who passed, `n_passed`.\n",
    "- The number of those students who failed, `n_failed`.\n",
    "- The graduation rate of the class, `grad_rate`, in percent (%).\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Total number of students: 395\n",
      "Number of features: 31\n",
      "Number of students who passed: 265\n",
      "Number of students who failed: 130\n",
      "Graduation rate of the class: 0.67%\n"
     ]
    }
   ],
   "source": [
    "# TODO: Calculate number of students\n",
    "n_students = student_data.shape[0]\n",
    "\n",
    "# TODO: Calculate number of features\n",
    "n_features = student_data.shape[1]\n",
    "\n",
    "# TODO: Calculate passing students\n",
    "n_passed = sum(student_data.passed == 'yes')\n",
    "\n",
    "# TODO: Calculate failing students\n",
    "n_failed = sum(student_data.passed == 'no')\n",
    "\n",
    "# TODO: Calculate graduation rate\n",
    "grad_rate = float(n_passed) / n_students\n",
    "\n",
    "# Print the results\n",
    "print \"Total number of students: {}\".format(n_students)\n",
    "print \"Number of features: {}\".format(n_features)\n",
    "print \"Number of students who passed: {}\".format(n_passed)\n",
    "print \"Number of students who failed: {}\".format(n_failed)\n",
    "print \"Graduation rate of the class: {:.2f}%\".format(grad_rate)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Preparing the Data\n",
    "In this section, we will prepare the data for modeling, training and testing.\n",
    "\n",
    "### Identify feature and target columns\n",
    "It is often the case that the data you obtain contains non-numeric features. This can be a problem, as most machine learning algorithms expect numeric data to perform computations with.\n",
    "\n",
    "Run the code cell below to separate the student data into feature and target columns to see if any features are non-numeric."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Feature columns:\n",
      "['school', 'sex', 'age', 'address', 'famsize', 'Pstatus', 'Medu', 'Fedu', 'Mjob', 'Fjob', 'reason', 'guardian', 'traveltime', 'studytime', 'failures', 'schoolsup', 'famsup', 'paid', 'activities', 'nursery', 'higher', 'internet', 'romantic', 'famrel', 'freetime', 'goout', 'Dalc', 'Walc', 'health', 'absences']\n",
      "\n",
      "Target column: passed\n",
      "\n",
      "Feature values:\n",
      "  school sex  age address famsize Pstatus  Medu  Fedu     Mjob      Fjob  \\\n",
      "0     GP   F   18       U     GT3       A     4     4  at_home   teacher   \n",
      "1     GP   F   17       U     GT3       T     1     1  at_home     other   \n",
      "2     GP   F   15       U     LE3       T     1     1  at_home     other   \n",
      "3     GP   F   15       U     GT3       T     4     2   health  services   \n",
      "4     GP   F   16       U     GT3       T     3     3    other     other   \n",
      "\n",
      "    ...    higher internet  romantic  famrel  freetime goout Dalc Walc health  \\\n",
      "0   ...       yes       no        no       4         3     4    1    1      3   \n",
      "1   ...       yes      yes        no       5         3     3    1    1      3   \n",
      "2   ...       yes      yes        no       4         3     2    2    3      3   \n",
      "3   ...       yes      yes       yes       3         2     2    1    1      5   \n",
      "4   ...       yes       no        no       4         3     2    1    2      5   \n",
      "\n",
      "  absences  \n",
      "0        6  \n",
      "1        4  \n",
      "2       10  \n",
      "3        2  \n",
      "4        4  \n",
      "\n",
      "[5 rows x 30 columns]\n"
     ]
    }
   ],
   "source": [
    "# Extract feature columns\n",
    "feature_cols = list(student_data.columns[:-1])\n",
    "\n",
    "# Extract target column 'passed'\n",
    "target_col = student_data.columns[-1] \n",
    "\n",
    "# Show the list of columns\n",
    "print \"Feature columns:\\n{}\".format(feature_cols)\n",
    "print \"\\nTarget column: {}\".format(target_col)\n",
    "\n",
    "# Separate the data into feature data and target data (X_all and y_all, respectively)\n",
    "X_all = student_data[feature_cols]\n",
    "y_all = student_data[target_col]\n",
    "\n",
    "# Show the feature information by printing the first five rows\n",
    "print \"\\nFeature values:\"\n",
    "print X_all.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Preprocess Feature Columns\n",
    "\n",
    "As you can see, there are several non-numeric columns that need to be converted! Many of them are simply `yes`/`no`, e.g. `internet`. These can be reasonably converted into `1`/`0` (binary) values.\n",
    "\n",
    "Other columns, like `Mjob` and `Fjob`, have more than two values, and are known as _categorical variables_. The recommended way to handle such a column is to create as many columns as possible values (e.g. `Fjob_teacher`, `Fjob_other`, `Fjob_services`, etc.), and assign a `1` to one of them and `0` to all others.\n",
    "\n",
    "These generated columns are sometimes called _dummy variables_, and we will use the [`pandas.get_dummies()`](http://pandas.pydata.org/pandas-docs/stable/generated/pandas.get_dummies.html?highlight=get_dummies#pandas.get_dummies) function to perform this transformation. Run the code cell below to perform the preprocessing routine discussed in this section."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Processed feature columns (48 total features):\n",
      "['school_GP', 'school_MS', 'sex_F', 'sex_M', 'age', 'address_R', 'address_U', 'famsize_GT3', 'famsize_LE3', 'Pstatus_A', 'Pstatus_T', 'Medu', 'Fedu', 'Mjob_at_home', 'Mjob_health', 'Mjob_other', 'Mjob_services', 'Mjob_teacher', 'Fjob_at_home', 'Fjob_health', 'Fjob_other', 'Fjob_services', 'Fjob_teacher', 'reason_course', 'reason_home', 'reason_other', 'reason_reputation', 'guardian_father', 'guardian_mother', 'guardian_other', 'traveltime', 'studytime', 'failures', 'schoolsup', 'famsup', 'paid', 'activities', 'nursery', 'higher', 'internet', 'romantic', 'famrel', 'freetime', 'goout', 'Dalc', 'Walc', 'health', 'absences']\n"
     ]
    }
   ],
   "source": [
    "def preprocess_features(X):\n",
    "    ''' Preprocesses the student data and converts non-numeric binary variables into\n",
    "        binary (0/1) variables. Converts categorical variables into dummy variables. '''\n",
    "    \n",
    "    # Initialize new output DataFrame\n",
    "    output = pd.DataFrame(index = X.index)\n",
    "    \n",
    "    # Investigate each feature column for the data\n",
    "    for col, col_data in X.iteritems():\n",
    "        \n",
    "        # If data type is non-numeric, replace all yes/no values with 1/0\n",
    "        if col_data.dtype == object:\n",
    "            col_data = col_data.replace(['yes', 'no'], [1, 0])\n",
    "\n",
    "        # If data type is categorical, convert to dummy variables\n",
    "        if col_data.dtype == object:\n",
    "            # Example: 'school' => 'school_GP' and 'school_MS'\n",
    "            col_data = pd.get_dummies(col_data, prefix = col)  \n",
    "        \n",
    "        # Collect the revised columns\n",
    "        output = output.join(col_data)\n",
    "    \n",
    "    return output\n",
    "\n",
    "X_all = preprocess_features(X_all)\n",
    "print \"Processed feature columns ({} total features):\\n{}\".format(len(X_all.columns), list(X_all.columns))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Implementation: Training and Testing Data Split\n",
    "So far, we have converted all _categorical_ features into numeric values. For the next step, we split the data (both features and corresponding labels) into training and test sets. In the following code cell below, you will need to implement the following:\n",
    "- Randomly shuffle and split the data (`X_all`, `y_all`) into training and testing subsets.\n",
    "  - Use 300 training points (approximately 75%) and 95 testing points (approximately 25%).\n",
    "  - Set a `random_state` for the function(s) you use, if provided.\n",
    "  - Store the results in `X_train`, `X_test`, `y_train`, and `y_test`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training set has 300 samples.\n",
      "Testing set has 95 samples.\n"
     ]
    }
   ],
   "source": [
    "# TODO: Import any additional functionality you may need here\n",
    "from sklearn.model_selection import train_test_split\n",
    "# TODO: Set the number of training points\n",
    "num_train = 300\n",
    "\n",
    "# Set the number of testing points\n",
    "num_test = X_all.shape[0] - num_train\n",
    "\n",
    "# TODO: Shuffle and split the dataset into the number of training and testing points above\n",
    "X_train, X_test, y_train, y_test = train_test_split(\n",
    "                                    X_all, y_all, test_size = num_test,\n",
    "                                    random_state = 10)\n",
    "\n",
    "# Show the results of the split\n",
    "print \"Training set has {} samples.\".format(X_train.shape[0])\n",
    "print \"Testing set has {} samples.\".format(X_test.shape[0])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Training and Evaluating Models\n",
    "In this section, you will choose 3 supervised learning models that are appropriate for this problem and available in `scikit-learn`. You will first discuss the reasoning behind choosing these three models by considering what you know about the data and each model's strengths and weaknesses. You will then fit the model to varying sizes of training data (100 data points, 200 data points, and 300 data points) and measure the F<sub>1</sub> score. You will need to produce three tables (one for each model) that shows the training set size, training time, prediction time, F<sub>1</sub> score on the training set, and F<sub>1</sub> score on the testing set.\n",
    "\n",
    "**The following supervised learning models are currently available in** [`scikit-learn`](http://scikit-learn.org/stable/supervised_learning.html) **that you may choose from:**\n",
    "- Gaussian Naive Bayes (GaussianNB)\n",
    "- Decision Trees\n",
    "- Ensemble Methods (Bagging, AdaBoost, Random Forest, Gradient Boosting)\n",
    "- K-Nearest Neighbors (KNeighbors)\n",
    "- Stochastic Gradient Descent (SGDC)\n",
    "- Support Vector Machines (SVM)\n",
    "- Logistic Regression"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Question 2 - Model Application\n",
    "*List three supervised learning models that are appropriate for this problem. For each model chosen*\n",
    "- Describe one real-world application in industry where the model can be applied. *(You may need to do a small bit of research for this — give references!)* \n",
    "- What are the strengths of the model; when does it perform well? \n",
    "- What are the weaknesses of the model; when does it perform poorly?\n",
    "- What makes this model a good candidate for the problem, given what you know about the data?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": false
   },
   "source": [
    "## Support Vector Machines (SVM)\n",
    "\n",
    "### **Applications:**\n",
    "- [Pattern recognition](http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.723.5893&rep=rep1&type=pdf)\n",
    "- [Text Categorization](http://www.cs.cornell.edu/people/tj/publications/joachims_98a.pdf)\n",
    "- [Financial time series forcasting](http://www.svms.org/finance/)\n",
    "\n",
    "### **Advantages:**\n",
    "- Robust and accurate\n",
    "- Resistant to overfitting.\n",
    "- With an appropriate kernel choice, can work well when the data is not-linearly separable in the base feature space. The trick is that the data is projected to higher dimension feature space to formulate a linear problem in that space.\n",
    "- Insensitive to the number of  dimensions. Especially popular in text classification problems where very high-dimensional spaces are the norm. \n",
    "\t\n",
    "### **Disadvantages:**\n",
    "- Time / Memory-intensive since it is based on convex quadratic programming and requires large matrix operations. Training scales quadraticaly vs number of data points\n",
    "- Hard to interpret, run and tune.\n",
    "\n",
    "## Logistic Regression\n",
    "\n",
    "### **Applications:**\n",
    "- [Credit scoring](http://www.statsoft.com/textbook/credit-scoring): Predicting whether or not credit extended to an applicant will likely result in profit or losses for the lending institution.\n",
    "- [Measuring the success rates and effectiveness of marketing campaigns](http://www.sas.com/content/dam/SAS/en_ca/User%20Group%20Presentations/Toronto-Data-Mining-Forum/RyanZhao-MarketingCampaignROI.pdf)\n",
    "\n",
    "\n",
    "**Advantages:**\n",
    "- Intrinsically simple, has low variance and so is less prone to over-fitting\n",
    "- Works well with linear features, but can handle nonlinear features as well\n",
    "- Robust to noise\n",
    "- Feature correlations do not concern much, opposed to Naïve Bayes\n",
    "- Unlike SVM and Decision Trees, Have nice probabilistic interpretation, therefor, can be used to establish a probabilistic framework, e.g., to easily adjust classification thresholds, to say when you’re unsure, or to get confidence intervals\n",
    "- Model can easily be updated to take new data, using online gradient descent method\n",
    "- Decision boundaries can be in any direction, unlike decision trees\n",
    "\n",
    "**Disadvantages:**\n",
    "- Requires independent observations\n",
    "\n",
    "## K-Nearest Neighbors (KNeighbors)\n",
    "\n",
    "### **Applications:**\n",
    "- Everything including information retrieval to similar object search:\n",
    " - [Nearest Neighbor Retrieval and Classification](http://vlm1.uta.edu/~athitsos/nearest_neighbors/)\n",
    " - [Similar object search](http://staff.itee.uq.edu.au/zxf/_papers/sigmod510-zheng.pdf)\n",
    " - [Sentiment analysis](http://www.cs.tau.ac.il/~kfirbar/mlproject/project-ml.pdf)\n",
    " - [Query Dependent Ranking Using K-Nearest Neighbor](http://www.cs.cmu.edu/~aarnold/cald/fp025-geng.pdf)\n",
    "    \n",
    "### **Advantages:**\n",
    "- Has a simple implementation and very easy to interpret\n",
    "- Classes do not need to be linearly separable\n",
    "- Non parametric, does not make any assumptions on the data distribution, does not build a model therefor:\n",
    " - Fast training and works very well for relatively small databases \n",
    " - Can easily take in new data, with no need to rebuilt a model\n",
    "- Well suited for multi-modal classes as well as applications in which an object can have many class labels\n",
    "\n",
    "### **Disadvantages:**\n",
    "- Computationally inefficient for very large data sets\n",
    "- Sensitive local noise or irrelevant attributes\n",
    "- Low accuracy for small amount of data\n",
    "- Performance depends on the dimensions used (curse of dimensionality)\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\nkgr9fxfgvcm908O5AAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x10e6fa2d0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from matplotlib import pyplot as plt\n",
    "\n",
    "plt.figure()\n",
    "plt.hist([student_data.Medu[student_data.address == 'U'],\n",
    "          student_data.Medu[student_data.address == 'R']],\n",
    "         alpha=0.7, bins = [0, 1, 2, 3, 4, 5],\n",
    "         label=['Urban', 'Rural'])\n",
    "plt.legend(loc='upper left')\n",
    "plt.xlabel('Mother\\'s level of education')\n",
    "plt.xlim([0,5])\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Answer:**\n",
    "The dataset has fairly small number of features (48), with below 400 samples. Some of the fearures might be related to the others. For example, family size and parents' level of education.\n",
    "\n",
    "\n",
    "* KNN\n",
    "* SVM\n",
    "* Tree\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Setup\n",
    "Run the code cell below to initialize three helper functions which you can use for training and testing the three supervised learning models you've chosen above. The functions are as follows:\n",
    "- `train_classifier` - takes as input a classifier and training data and fits the classifier to the data.\n",
    "- `predict_labels` - takes as input a fit classifier, features, and a target labeling and makes predictions using the F<sub>1</sub> score.\n",
    "- `train_predict` - takes as input a classifier, and the training and testing data, and performs `train_clasifier` and `predict_labels`.\n",
    " - This function will report the F<sub>1</sub> score for both the training and testing data separately."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "def train_classifier(clf, X_train, y_train):\n",
    "    ''' Fits a classifier to the training data. '''\n",
    "    \n",
    "    # Start the clock, train the classifier, then stop the clock\n",
    "    start = time()\n",
    "    clf.fit(X_train, y_train)\n",
    "    end = time()\n",
    "    \n",
    "    # Print the results\n",
    "    print \"Trained model in {:.4f} seconds\".format(end - start)\n",
    "\n",
    "    \n",
    "def predict_labels(clf, features, target):\n",
    "    ''' Makes predictions using a fit classifier based on F1 score. '''\n",
    "    \n",
    "    # Start the clock, make predictions, then stop the clock\n",
    "    start = time()\n",
    "    y_pred = clf.predict(features)\n",
    "    end = time()\n",
    "    \n",
    "    # Print and return results\n",
    "    print \"Made predictions in {:.4f} seconds.\".format(end - start)\n",
    "    return f1_score(target.values, y_pred, pos_label='yes')\n",
    "\n",
    "\n",
    "def train_predict(clf, X_train, y_train, X_test, y_test):\n",
    "    ''' Train and predict using a classifer based on F1 score. '''\n",
    "    \n",
    "    # Indicate the classifier and the training set size\n",
    "    print \"Training a {} using a training set size of {}. . .\".format(clf.__class__.__name__, len(X_train))\n",
    "    \n",
    "    # Train the classifier\n",
    "    train_classifier(clf, X_train, y_train)\n",
    "    \n",
    "    # Print the results of prediction for both training and testing\n",
    "    print \"F1 score for training set: {:.4f}.\".format(predict_labels(clf, X_train, y_train))\n",
    "    print \"F1 score for test set: {:.4f}.\".format(predict_labels(clf, X_test, y_test))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Implementation: Model Performance Metrics\n",
    "With the predefined functions above, you will now import the three supervised learning models of your choice and run the `train_predict` function for each one. Remember that you will need to train and predict on each classifier for three different training set sizes: 100, 200, and 300. Hence, you should expect to have 9 different outputs below — 3 for each model using the varying training set sizes. In the following code cell, you will need to implement the following:\n",
    "- Import the three supervised learning models you've discussed in the previous section.\n",
    "- Initialize the three models and store them in `clf_A`, `clf_B`, and `clf_C`.\n",
    " - Use a `random_state` for each model you use, if provided.\n",
    " - **Note:** Use the default settings for each model — you will tune one specific model in a later section.\n",
    "- Create the different training set sizes to be used to train each model.\n",
    " - *Do not reshuffle and resplit the data! The new training points should be drawn from `X_train` and `y_train`.*\n",
    "- Fit each model with each training set size and make predictions on the test set (9 in total).  \n",
    "**Note:** Three tables are provided after the following code cell which can be used to store your results."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "_____________________________________________________ SVC Classifier\n",
      "\n",
      "Training a SVC using a training set size of 100. . .\n",
      "Trained model in 0.0018 seconds\n",
      "Made predictions in 0.0016 seconds.\n",
      "F1 score for training set: 0.8889.\n",
      "Made predictions in 0.0011 seconds.\n",
      "F1 score for test set: 0.8101.\n",
      "\n",
      "\n",
      "Training a SVC using a training set size of 200. . .\n",
      "Trained model in 0.0039 seconds\n",
      "Made predictions in 0.0033 seconds.\n",
      "F1 score for training set: 0.8645.\n",
      "Made predictions in 0.0017 seconds.\n",
      "F1 score for test set: 0.8105.\n",
      "\n",
      "\n",
      "Training a SVC using a training set size of 300. . .\n",
      "Trained model in 0.0094 seconds\n",
      "Made predictions in 0.0082 seconds.\n",
      "F1 score for training set: 0.8615.\n",
      "Made predictions in 0.0025 seconds.\n",
      "F1 score for test set: 0.8079.\n",
      "\n",
      "_____________________________________________________ KNN Classifier\n",
      "\n",
      "Training a KNeighborsClassifier using a training set size of 100. . .\n",
      "Trained model in 0.0017 seconds\n",
      "Made predictions in 0.0030 seconds.\n",
      "F1 score for training set: 0.8516.\n",
      "Made predictions in 0.0021 seconds.\n",
      "F1 score for test set: 0.8205.\n",
      "\n",
      "\n",
      "Training a KNeighborsClassifier using a training set size of 200. . .\n",
      "Trained model in 0.0009 seconds\n",
      "Made predictions in 0.0067 seconds.\n",
      "F1 score for training set: 0.8483.\n",
      "Made predictions in 0.0034 seconds.\n",
      "F1 score for test set: 0.7639.\n",
      "\n",
      "\n",
      "Training a KNeighborsClassifier using a training set size of 300. . .\n",
      "Trained model in 0.0013 seconds\n",
      "Made predictions in 0.0072 seconds.\n",
      "F1 score for training set: 0.8519.\n",
      "Made predictions in 0.0034 seconds.\n",
      "F1 score for test set: 0.7887.\n",
      "\n",
      "_____________________________________ Logistic Regression Classifier\n",
      "\n",
      "Training a LogisticRegression using a training set size of 100. . .\n",
      "Trained model in 0.0024 seconds\n",
      "Made predictions in 0.0006 seconds.\n",
      "F1 score for training set: 0.9595.\n",
      "Made predictions in 0.0004 seconds.\n",
      "F1 score for test set: 0.7626.\n",
      "\n",
      "\n",
      "Training a LogisticRegression using a training set size of 200. . .\n",
      "Trained model in 0.0036 seconds\n",
      "Made predictions in 0.0007 seconds.\n",
      "F1 score for training set: 0.8552.\n",
      "Made predictions in 0.0006 seconds.\n",
      "F1 score for test set: 0.7887.\n",
      "\n",
      "\n",
      "Training a LogisticRegression using a training set size of 300. . .\n",
      "Trained model in 0.0066 seconds\n",
      "Made predictions in 0.0005 seconds.\n",
      "F1 score for training set: 0.8263.\n",
      "Made predictions in 0.0005 seconds.\n",
      "F1 score for test set: 0.8169.\n",
      "\n",
      "________________________________________________ AdaBoost Classifier\n",
      "\n",
      "Training a GradientBoostingClassifier using a training set size of 100. . .\n",
      "Trained model in 0.0775 seconds\n",
      "Made predictions in 0.0009 seconds.\n",
      "F1 score for training set: 0.9660.\n",
      "Made predictions in 0.0007 seconds.\n",
      "F1 score for test set: 0.7692.\n",
      "\n",
      "\n",
      "Training a GradientBoostingClassifier using a training set size of 200. . .\n",
      "Trained model in 0.0980 seconds\n",
      "Made predictions in 0.0010 seconds.\n",
      "F1 score for training set: 0.8759.\n",
      "Made predictions in 0.0006 seconds.\n",
      "F1 score for test set: 0.8028.\n",
      "\n",
      "\n",
      "Training a GradientBoostingClassifier using a training set size of 300. . .\n",
      "Trained model in 0.0944 seconds\n",
      "Made predictions in 0.0013 seconds.\n",
      "F1 score for training set: 0.8539.\n",
      "Made predictions in 0.0008 seconds.\n",
      "F1 score for test set: 0.7972.\n"
     ]
    }
   ],
   "source": [
    "# TODO: Import the three supervised learning models from sklearn\n",
    "from sklearn.neighbors import KNeighborsClassifier \n",
    "from sklearn.svm import SVC\n",
    "from sklearn.tree import DecisionTreeClassifier\n",
    "#from sklearn.naive_bayes import GaussianNB\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "#from sklearn.linear_model import SGDClassifier\n",
    "#from sklearn.ensemble import RandomForestClassifier\n",
    "#from sklearn.ensemble import AdaBoostClassifier\n",
    "from sklearn.ensemble import GradientBoostingClassifier\n",
    "\n",
    "from sklearn.utils import shuffle\n",
    "\n",
    "# TODO: Initialize the three models\n",
    "\n",
    "clf_A = SVC()\n",
    "clf_B = KNeighborsClassifier()\n",
    "clf_C = LogisticRegression()\n",
    "clf_D = GradientBoostingClassifier(max_depth=1, n_estimators=300)\n",
    "\n",
    "# TODO: Set up the training set sizes\n",
    "X_train_100, y_train_100 = shuffle(X_train, y_train, n_samples=100, random_state=0)\n",
    "\n",
    "X_train_200, y_train_200 = shuffle(X_train, y_train, n_samples=200, random_state=0)\n",
    "\n",
    "X_train_300, y_train_300 = shuffle(X_train, y_train, n_samples=300, random_state=0)\n",
    "\n",
    "# TODO: Execute the 'train_predict' function for each classifier and each training set size\n",
    "# train_predict(clf, X_train, y_train, X_test, y_test)\n",
    "print '\\n_____________________________________________________ SVC Classifier\\n'\n",
    "train_predict(clf_A, X_train_100, y_train_100, X_test, y_test)\n",
    "print '\\n'\n",
    "train_predict(clf_A, X_train_200, y_train_200, X_test, y_test)\n",
    "print '\\n'\n",
    "train_predict(clf_A, X_train_300, y_train_300, X_test, y_test)\n",
    "print '\\n_____________________________________________________ KNN Classifier\\n'\n",
    "train_predict(clf_B, X_train_100, y_train_100, X_test, y_test)\n",
    "print '\\n'\n",
    "train_predict(clf_B, X_train_200, y_train_200, X_test, y_test)\n",
    "print '\\n'\n",
    "train_predict(clf_B, X_train_300, y_train_300, X_test, y_test)\n",
    "print '\\n_____________________________________ Logistic Regression Classifier\\n'\n",
    "train_predict(clf_C, X_train_100, y_train_100, X_test, y_test)\n",
    "print '\\n'\n",
    "train_predict(clf_C, X_train_200, y_train_200, X_test, y_test)\n",
    "print '\\n'\n",
    "train_predict(clf_C, X_train_300, y_train_300, X_test, y_test)\n",
    "print '\\n________________________________________________ AdaBoost Classifier\\n'\n",
    "train_predict(clf_D, X_train_100, y_train_100, X_test, y_test)\n",
    "print '\\n'\n",
    "train_predict(clf_D, X_train_200, y_train_200, X_test, y_test)\n",
    "print '\\n'\n",
    "train_predict(clf_D, X_train_300, y_train_300, X_test, y_test)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Tabular Results\n",
    "Edit the cell below to see how a table can be designed in [Markdown](https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet#tables). You can record your results from above in the tables provided."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "** Classifer 1 - K-Nearest Neighbors Classifier**  \n",
    "\n",
    "| Training Set Size | Training Time | Prediction Time (test) | F1 Score (train) | F1 Score (test) |\n",
    "| :---------------: | :-----------: | :--------------------: | :--------------: | :-------------: |\n",
    "| 100               |   0.0007      |   0.0031               |    0.8516        |    0.8205       |\n",
    "| 200               |   0.0014      |   0.0030               |    0.8483        |    0.7639       |\n",
    "| 300               |   0.0010      |   0.0044               |    0.8519        |    0.7887       |\n",
    "\n",
    "** Classifer 2 - Support Vector Machine Classifier**  \n",
    "\n",
    "| Training Set Size | Training Time | Prediction Time (test) | F1 Score (train) | F1 Score (test) |\n",
    "| :---------------: | :-----------: | :--------------------: | :--------------: | :-------------: |\n",
    "| 100               |   0.0019      |   0.0022               |    0.8889        |    0.8101       |\n",
    "| 200               |   0.0077      |   0.0024               |    0.8645        |    0.8105       |\n",
    "| 300               |   0.0114      |   0.0017               |    0.8615        |    0.8079       |\n",
    "\n",
    "** Classifer 3.1 - Decision Tree Classifier, default parameters**  \n",
    "\n",
    "| Training Set Size | Training Time | Prediction Time (test) | F1 Score (train) | F1 Score (test) |\n",
    "| :---------------: | :-----------: | :--------------------: | :--------------: | :-------------: |\n",
    "| 100               |   0.0009      |   0.0002               |    1.0000        |    0.7591       |\n",
    "| 200               |   0.0020      |   0.0003               |    1.0000        |    0.7317       |\n",
    "| 300               |   0.0024      |   0.0002               |    1.0000        |    0.6719       |\n",
    "\n",
    "** Classifer 3.2 - Decision Tree Classifier, depth limited**  \n",
    "\n",
    "| Training Set Size | Training Time | Prediction Time (test) | F1 Score (train) | F1 Score (test) |\n",
    "| :---------------: | :-----------: | :--------------------: | :--------------: | :-------------: |\n",
    "| 100               |   0.0013      |   0.0004               |    0.8000        |    0.8169       |\n",
    "| 200               |   0.0009      |   0.0003               |    0.7885        |    0.8169       |\n",
    "| 300               |   0.0011      |   0.0003               |    0.8319        |    0.8129       |\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Choosing the Best Model\n",
    "In this final section, you will choose from the three supervised learning models the *best* model to use on the student data. You will then perform a grid search optimization for the model over the entire training set (`X_train` and `y_train`) by tuning at least one parameter to improve upon the untuned model's F<sub>1</sub> score. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Question 3 - Choosing the Best Model\n",
    "*Based on the experiments you performed earlier, in one to two paragraphs, explain to the board of supervisors what single model you chose as the best model. Which model is generally the most appropriate based on the available data, limited resources, cost, and performance?*"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Answer: **\n",
    "what domain knowledge do I have?\n",
    "\n",
    "dimensions are too high for the number of data points we have for KNN method.\n",
    "\n",
    "Comparing the three models, with the default settings, support vector machine classifier delivers the best F1 score, hence the best accuracy of all, however KNN and decision tree classifiers, respectively have shorter calculation times. \n",
    "Decision tree classifier (DTC) is obviously overfitting the training set with the default setting. To have a fair comparison between the tree models, it would be a good idea to limit the max_depth to avoid overfitting. After setting max_depth=2, DTC slightly outperforms SVC in any aspect. However, SVC supports arbitrary boundary directions, and we are not dealing with a huge data set here, I tend to chose SVC over DTC. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Question 4 - Model in Layman's Terms\n",
    "*In one to two paragraphs, explain to the board of directors in layman's terms how the final model chosen is supposed to work. Be sure that you are describing the major qualities of the model, such as how the model is trained and how the model makes a prediction. Avoid using advanced mathematical or technical jargon, such as describing equations or discussing the algorithm implementation.*"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Answer: **"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Implementation: Model Tuning\n",
    "Fine tune the chosen model. Use grid search (`GridSearchCV`) with at least one important parameter tuned with at least 3 different values. You will need to use the entire training set for this. In the code cell below, you will need to implement the following:\n",
    "- Import [`sklearn.grid_search.gridSearchCV`](http://scikit-learn.org/stable/modules/generated/sklearn.grid_search.GridSearchCV.html) and [`sklearn.metrics.make_scorer`](http://scikit-learn.org/stable/modules/generated/sklearn.metrics.make_scorer.html).\n",
    "- Create a dictionary of parameters you wish to tune for the chosen model.\n",
    " - Example: `parameters = {'parameter' : [list of values]}`.\n",
    "- Initialize the classifier you've chosen and store it in `clf`.\n",
    "- Create the F<sub>1</sub> scoring function using `make_scorer` and store it in `f1_scorer`.\n",
    " - Set the `pos_label` parameter to the correct value!\n",
    "- Perform grid search on the classifier `clf` using `f1_scorer` as the scoring method, and store it in `grid_obj`.\n",
    "- Fit the grid search object to the training data (`X_train`, `y_train`), and store it in `grid_obj`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 182,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "30\n",
      "Made predictions in 0.0079 seconds.\n",
      "Tuned model has a training F1 score of 0.8211.\n",
      "Made predictions in 0.0037 seconds.\n",
      "Tuned model has a testing F1 score of 0.8228.\n"
     ]
    }
   ],
   "source": [
    "# TODO: Import 'GridSearchCV' and 'make_scorer'\n",
    "from sklearn.grid_search import GridSearchCV\n",
    "from sklearn.metrics import make_scorer\n",
    "from sklearn.cross_validation import KFold\n",
    "\n",
    "# TODO: Create the parameters list you wish to tune\n",
    "parameters = {'n_neighbors':[1, 10, 30]}\n",
    "cv1 = KFold(X_train.shape[0], n_folds=6, random_state=20, shuffle=False)\n",
    "\n",
    "# TODO: Initialize the classifier\n",
    "clf = KNeighborsClassifier()\n",
    "\n",
    "# TODO: Make an f1 scoring function using 'make_scorer' \n",
    "f1_scorer = make_scorer(f1_score)\n",
    "\n",
    "# TODO: Perform grid search on the classifier using the f1_scorer as the scoring method\n",
    "grid_obj = GridSearchCV(estimator=clf, param_grid=parameters, cv=cv1)\n",
    "\n",
    "# TODO: Fit the grid search object to the training data and find the optimal parameters\n",
    "grid_obj.fit(X_train, y_train)\n",
    "\n",
    "# Get the estimator\n",
    "clf = grid_obj.best_estimator_\n",
    "print(grid_obj.best_estimator_.n_neighbors)\n",
    "# Report the final F1 score for training and testing after parameter tuning\n",
    "print \"Tuned model has a training F1 score of {:.4f}.\".format(predict_labels(clf, X_train, y_train))\n",
    "print \"Tuned model has a testing F1 score of {:.4f}.\".format(predict_labels(clf, X_test, y_test))\n",
    "\n",
    "#Made predictions in 0.0103 seconds.\n",
    "#Tuned model has a training F1 score of 0.8211.\n",
    "#Made predictions in 0.0036 seconds.\n",
    "#Tuned model has a testing F1 score of 0.8228."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 152,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Made predictions in 0.0085 seconds.\n",
      "Tuned model has a training F1 score of 0.8270.\n",
      "Made predictions in 0.0021 seconds.\n",
      "Tuned model has a testing F1 score of 0.8105.\n"
     ]
    }
   ],
   "source": [
    "# TODO: Import 'GridSearchCV' and 'make_scorer'\n",
    "from sklearn.grid_search import GridSearchCV\n",
    "from sklearn.metrics import make_scorer\n",
    "from sklearn.cross_validation import ShuffleSplit\n",
    "\n",
    "# TODO: Create the parameters list you wish to tune\n",
    "parameters = [\n",
    "  {'C': [0.1, 100], 'kernel': ['linear']},\n",
    "  {'C': [0.1, 100], 'gamma': [0.001, 0.0001], 'kernel': ['rbf']}\n",
    " ]\n",
    "#{'C':[0.001, 100]}\n",
    "\n",
    "cv = ShuffleSplit(X_train.shape[0], n_iter=10, test_size=0.2, random_state=0)\n",
    "cv1 = list(KFold(n_splits=5, random_state=20, shuffle=False).split(X_train, y_train))\n",
    "\n",
    "# TODO: Initialize the classifier\n",
    "clf = SVC()\n",
    "\n",
    "# TODO: Make an f1 scoring function using 'make_scorer' \n",
    "f1_scorer = make_scorer(f1_score)\n",
    "\n",
    "# TODO: Perform grid search on the classifier using the f1_scorer as the scoring method\n",
    "grid_obj = GridSearchCV(estimator=clf, param_grid=parameters, cv=cv1)\n",
    "\n",
    "# TODO: Fit the grid search object to the training data and find the optimal parameters\n",
    "grid_obj.fit(X_train, y_train)\n",
    "\n",
    "# Get the estimator\n",
    "clf = grid_obj.best_estimator_\n",
    "\n",
    "# Report the final F1 score for training and testing after parameter tuning\n",
    "print \"Tuned model has a training F1 score of {:.4f}.\".format(predict_labels(clf, X_train, y_train))\n",
    "print \"Tuned model has a testing F1 score of {:.4f}.\".format(predict_labels(clf, X_test, y_test))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Made predictions in 0.0003 seconds.\n",
      "Tuned model has a training F1 score of 0.8263.\n",
      "Made predictions in 0.0002 seconds.\n",
      "Tuned model has a testing F1 score of 0.8169.\n"
     ]
    }
   ],
   "source": [
    "# TODO: Import 'GridSearchCV' and 'make_scorer'\n",
    "from sklearn.grid_search import GridSearchCV\n",
    "from sklearn.metrics import make_scorer\n",
    "from sklearn.model_selection import ShuffleSplit\n",
    "from sklearn.model_selection import KFold\n",
    "\n",
    "# TODO: Create the parameters list you wish to tune\n",
    "parameters = [{'max_iter': [50, 200, 300]},\n",
    "               {'C':[10, 100]}]\n",
    "\n",
    "#cv = ShuffleSplit(X_train.shape[0], n_iter=10, test_size=0.2, random_state=0)\n",
    "cv1 = list(KFold(n_splits=2, random_state=20, shuffle=False).split(X_train, y_train))\n",
    "\n",
    "# TODO: Initialize the classifier\n",
    "clf = LogisticRegression()\n",
    "\n",
    "# TODO: Make an f1 scoring function using 'make_scorer' \n",
    "f1_scorer = make_scorer(f1_score)\n",
    "\n",
    "# TODO: Perform grid search on the classifier using the f1_scorer as the scoring method\n",
    "grid_obj = GridSearchCV(estimator=clf, param_grid=parameters, cv=cv1)\n",
    "\n",
    "# TODO: Fit the grid search object to the training data and find the optimal parameters\n",
    "grid_obj.fit(X_train, y_train)\n",
    "\n",
    "# Get the estimator\n",
    "clf = grid_obj.best_estimator_\n",
    "\n",
    "# Report the final F1 score for training and testing after parameter tuning\n",
    "print \"Tuned model has a training F1 score of {:.4f}.\".format(predict_labels(clf, X_train, y_train))\n",
    "print \"Tuned model has a testing F1 score of {:.4f}.\".format(predict_labels(clf, X_test, y_test))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Question 5 - Final F<sub>1</sub> Score\n",
    "*What is the final model's F<sub>1</sub> score for training and testing? How does that score compare to the untuned model?*"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Answer: **"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "> **Note**: Once you have completed all of the code implementations and successfully answered each question above, you may finalize your work by exporting the iPython Notebook as an HTML document. You can do this by using the menu above and navigating to  \n",
    "**File -> Download as -> HTML (.html)**. Include the finished document along with this notebook as your submission."
   ]
  }
 ],
 "metadata": {
  "anaconda-cloud": {},
  "kernelspec": {
   "display_name": "Python [conda root]",
   "language": "python",
   "name": "conda-root-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
